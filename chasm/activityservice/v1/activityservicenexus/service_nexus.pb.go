// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-nexus. DO NOT EDIT.
// plugins:
//
//	protoc-gen-go-nexus
//	go go1.23.4
//	protoc
//
// source: temporal/api/chasm/activityservice/v1/service.proto
package activityservicenexus

import (
	"context"

	nexusproto "github.com/nexus-rpc/sdk-go/contrib/nexusproto"
	nexus "github.com/nexus-rpc/sdk-go/nexus"
	v1 "go.temporal.io/api/chasm/activityservice/v1"
)

// ActivityServiceServiceName defines the fully-qualified name for the temporal.api.chasm.activityservice.v1.ActivityService service.
const ActivityServiceServiceName = "temporal.api.chasm.activityservice.v1.ActivityService"

// ActivityServiceExecuteActivityOperationName defines the fully-qualified name for the ExecuteActivity operation.
const ActivityServiceExecuteActivityOperationName = "ExecuteActivity"

var ActivityServiceExecuteActivityOperation = nexus.NewOperationReference[*v1.ExecuteActivityRequest, *v1.ExecuteActivityResponse](ActivityServiceExecuteActivityOperationName)

// ActivityServiceDescribeActivityOperationName defines the fully-qualified name for the DescribeActivity operation.
const ActivityServiceDescribeActivityOperationName = "DescribeActivity"

var ActivityServiceDescribeActivityOperation = nexus.NewOperationReference[*v1.DescribeActivityRequest, *v1.DescribeActivityResponse](ActivityServiceDescribeActivityOperationName)

// ActivityServiceListActivitiesOperationName defines the fully-qualified name for the ListActivities operation.
const ActivityServiceListActivitiesOperationName = "ListActivities"

var ActivityServiceListActivitiesOperation = nexus.NewOperationReference[*v1.ListActivitiesRequest, *v1.ListActivitiesResponse](ActivityServiceListActivitiesOperationName)

func NewActivityServiceExecuteActivityOperationHandlerResultAsync(operationID string, startResult *v1.ExecuteActivityStartResponse, links []nexus.Link) *nexus.HandlerStartOperationResultAsync {
	return &nexus.HandlerStartOperationResultAsync{
		OperationID: operationID,
		StartResult: startResult,
		Links:       links,
	}
}

type ActivityServiceNexusHandler interface {
	mustEmbedUnimplementedActivityServiceNexusHandler()
	ExecuteActivity(name string) nexus.Operation[*v1.ExecuteActivityRequest, *v1.ExecuteActivityResponse]
	DescribeActivity(name string) nexus.Operation[*v1.DescribeActivityRequest, *v1.DescribeActivityResponse]
	ListActivities(name string) nexus.Operation[*v1.ListActivitiesRequest, *v1.ListActivitiesResponse]
}

func NewActivityServiceNexusService(h ActivityServiceNexusHandler) (*nexus.Service, error) {
	svc := nexus.NewService(ActivityServiceServiceName)
	err := svc.Register(h.ExecuteActivity(ActivityServiceExecuteActivityOperationName), h.DescribeActivity(ActivityServiceDescribeActivityOperationName), h.ListActivities(ActivityServiceListActivitiesOperationName))
	if err != nil {
		return nil, err
	}
	return svc, nil
}

type UnimplementedActivityServiceNexusHandler struct{}

func (h *UnimplementedActivityServiceNexusHandler) mustEmbedUnimplementedActivityServiceNexusHandler() {
}
func (h *UnimplementedActivityServiceNexusHandler) ExecuteActivity(name string) nexus.Operation[*v1.ExecuteActivityRequest, *v1.ExecuteActivityResponse] {
	panic("TODO")
}
func (h *UnimplementedActivityServiceNexusHandler) DescribeActivity(name string) nexus.Operation[*v1.DescribeActivityRequest, *v1.DescribeActivityResponse] {
	panic("TODO")
}
func (h *UnimplementedActivityServiceNexusHandler) ListActivities(name string) nexus.Operation[*v1.ListActivitiesRequest, *v1.ListActivitiesResponse] {
	panic("TODO")
}

type ActivityServiceNexusHTTPClient struct {
	client nexus.HTTPClient
}

// NewActivityServiceNexusHTTPClient initializes a new ActivityServiceNexusHTTPClient.
// options.Service is overridden with the defined proto service name.
func NewActivityServiceNexusHTTPClient(options nexus.HTTPClientOptions) (*ActivityServiceNexusHTTPClient, error) {
	options.Service = ActivityServiceServiceName
	if options.Serializer == nil {
		options.Serializer = nexusproto.Serializer(nexusproto.SerializerModePreferJSON)
	}
	client, err := nexus.NewHTTPClient(options)
	if err != nil {
		return nil, err
	}
	return &ActivityServiceNexusHTTPClient{
		client: *client,
	}, nil
}

type ActivityServiceExecuteActivityOperationStartResult struct {
	Successful  *v1.ExecuteActivityResponse
	StartResult *v1.ExecuteActivityStartResponse
	Pending     *nexus.OperationHandle[*v1.ExecuteActivityResponse]
	Links       []nexus.Link
}

func (c *ActivityServiceNexusHTTPClient) ExecuteActivityAsync(ctx context.Context, input *v1.ExecuteActivityRequest, options nexus.StartOperationOptions) (*ActivityServiceExecuteActivityOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, ActivityServiceExecuteActivityOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := ActivityServiceExecuteActivityOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	if err := res.StartResult.Consume(&typed.StartResult); err != nil {
		return nil, err
	}
	return &typed, nil
}
func (c *ActivityServiceNexusHTTPClient) ExecuteActivity(ctx context.Context, input *v1.ExecuteActivityRequest, options nexus.ExecuteOperationOptions) (*v1.ExecuteActivityResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, ActivityServiceExecuteActivityOperation, input, options)
	return output, err
}
func (c *ActivityServiceNexusHTTPClient) NewExecuteActivityHandle(id string) (*nexus.OperationHandle[*v1.ExecuteActivityResponse], error) {
	return nexus.NewHandle(&c.client, ActivityServiceExecuteActivityOperation, id)
}

type ActivityServiceDescribeActivityOperationStartResult struct {
	Successful *v1.DescribeActivityResponse
	Pending    *nexus.OperationHandle[*v1.DescribeActivityResponse]
	Links      []nexus.Link
}

func (c *ActivityServiceNexusHTTPClient) DescribeActivityAsync(ctx context.Context, input *v1.DescribeActivityRequest, options nexus.StartOperationOptions) (*ActivityServiceDescribeActivityOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, ActivityServiceDescribeActivityOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := ActivityServiceDescribeActivityOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *ActivityServiceNexusHTTPClient) DescribeActivity(ctx context.Context, input *v1.DescribeActivityRequest, options nexus.ExecuteOperationOptions) (*v1.DescribeActivityResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, ActivityServiceDescribeActivityOperation, input, options)
	return output, err
}
func (c *ActivityServiceNexusHTTPClient) NewDescribeActivityHandle(id string) (*nexus.OperationHandle[*v1.DescribeActivityResponse], error) {
	return nexus.NewHandle(&c.client, ActivityServiceDescribeActivityOperation, id)
}

type ActivityServiceListActivitiesOperationStartResult struct {
	Successful *v1.ListActivitiesResponse
	Pending    *nexus.OperationHandle[*v1.ListActivitiesResponse]
	Links      []nexus.Link
}

func (c *ActivityServiceNexusHTTPClient) ListActivitiesAsync(ctx context.Context, input *v1.ListActivitiesRequest, options nexus.StartOperationOptions) (*ActivityServiceListActivitiesOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, ActivityServiceListActivitiesOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := ActivityServiceListActivitiesOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *ActivityServiceNexusHTTPClient) ListActivities(ctx context.Context, input *v1.ListActivitiesRequest, options nexus.ExecuteOperationOptions) (*v1.ListActivitiesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, ActivityServiceListActivitiesOperation, input, options)
	return output, err
}
func (c *ActivityServiceNexusHTTPClient) NewListActivitiesHandle(id string) (*nexus.OperationHandle[*v1.ListActivitiesResponse], error) {
	return nexus.NewHandle(&c.client, ActivityServiceListActivitiesOperation, id)
}
