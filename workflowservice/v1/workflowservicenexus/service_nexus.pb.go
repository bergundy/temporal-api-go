// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-nexus. DO NOT EDIT.
// plugins:
//
//	protoc-gen-go-nexus
//	go go1.23.4
//	protoc
//
// source: temporal/api/workflowservice/v1/service.proto
package workflowservicenexus

import (
	"context"

	nexusproto "github.com/nexus-rpc/sdk-go/contrib/nexusproto"
	nexus "github.com/nexus-rpc/sdk-go/nexus"
	v1 "go.temporal.io/api/workflowservice/v1"
)

// WorkflowServiceServiceName defines the fully-qualified name for the temporal.api.workflowservice.v1.WorkflowService service.
const WorkflowServiceServiceName = "temporal.api.workflowservice.v1.WorkflowService"

// WorkflowServiceRegisterNamespaceOperationName defines the fully-qualified name for the RegisterNamespace operation.
const WorkflowServiceRegisterNamespaceOperationName = "RegisterNamespace"

var WorkflowServiceRegisterNamespaceOperation = nexus.NewOperationReference[*v1.RegisterNamespaceRequest, *v1.RegisterNamespaceResponse](WorkflowServiceRegisterNamespaceOperationName)

// WorkflowServiceDescribeNamespaceOperationName defines the fully-qualified name for the DescribeNamespace operation.
const WorkflowServiceDescribeNamespaceOperationName = "DescribeNamespace"

var WorkflowServiceDescribeNamespaceOperation = nexus.NewOperationReference[*v1.DescribeNamespaceRequest, *v1.DescribeNamespaceResponse](WorkflowServiceDescribeNamespaceOperationName)

// WorkflowServiceListNamespacesOperationName defines the fully-qualified name for the ListNamespaces operation.
const WorkflowServiceListNamespacesOperationName = "ListNamespaces"

var WorkflowServiceListNamespacesOperation = nexus.NewOperationReference[*v1.ListNamespacesRequest, *v1.ListNamespacesResponse](WorkflowServiceListNamespacesOperationName)

// WorkflowServiceUpdateNamespaceOperationName defines the fully-qualified name for the UpdateNamespace operation.
const WorkflowServiceUpdateNamespaceOperationName = "UpdateNamespace"

var WorkflowServiceUpdateNamespaceOperation = nexus.NewOperationReference[*v1.UpdateNamespaceRequest, *v1.UpdateNamespaceResponse](WorkflowServiceUpdateNamespaceOperationName)

// WorkflowServiceDeprecateNamespaceOperationName defines the fully-qualified name for the DeprecateNamespace operation.
const WorkflowServiceDeprecateNamespaceOperationName = "DeprecateNamespace"

var WorkflowServiceDeprecateNamespaceOperation = nexus.NewOperationReference[*v1.DeprecateNamespaceRequest, *v1.DeprecateNamespaceResponse](WorkflowServiceDeprecateNamespaceOperationName)

// WorkflowServiceStartWorkflowExecutionOperationName defines the fully-qualified name for the StartWorkflowExecution operation.
const WorkflowServiceStartWorkflowExecutionOperationName = "StartWorkflowExecution"

var WorkflowServiceStartWorkflowExecutionOperation = nexus.NewOperationReference[*v1.StartWorkflowExecutionRequest, *v1.StartWorkflowExecutionResponse](WorkflowServiceStartWorkflowExecutionOperationName)

// WorkflowServiceExecuteMultiOperationOperationName defines the fully-qualified name for the ExecuteMultiOperation operation.
const WorkflowServiceExecuteMultiOperationOperationName = "ExecuteMultiOperation"

var WorkflowServiceExecuteMultiOperationOperation = nexus.NewOperationReference[*v1.ExecuteMultiOperationRequest, *v1.ExecuteMultiOperationResponse](WorkflowServiceExecuteMultiOperationOperationName)

// WorkflowServiceGetWorkflowExecutionHistoryOperationName defines the fully-qualified name for the GetWorkflowExecutionHistory operation.
const WorkflowServiceGetWorkflowExecutionHistoryOperationName = "GetWorkflowExecutionHistory"

var WorkflowServiceGetWorkflowExecutionHistoryOperation = nexus.NewOperationReference[*v1.GetWorkflowExecutionHistoryRequest, *v1.GetWorkflowExecutionHistoryResponse](WorkflowServiceGetWorkflowExecutionHistoryOperationName)

// WorkflowServiceGetWorkflowExecutionHistoryReverseOperationName defines the fully-qualified name for the GetWorkflowExecutionHistoryReverse operation.
const WorkflowServiceGetWorkflowExecutionHistoryReverseOperationName = "GetWorkflowExecutionHistoryReverse"

var WorkflowServiceGetWorkflowExecutionHistoryReverseOperation = nexus.NewOperationReference[*v1.GetWorkflowExecutionHistoryReverseRequest, *v1.GetWorkflowExecutionHistoryReverseResponse](WorkflowServiceGetWorkflowExecutionHistoryReverseOperationName)

// WorkflowServicePollWorkflowTaskQueueOperationName defines the fully-qualified name for the PollWorkflowTaskQueue operation.
const WorkflowServicePollWorkflowTaskQueueOperationName = "PollWorkflowTaskQueue"

var WorkflowServicePollWorkflowTaskQueueOperation = nexus.NewOperationReference[*v1.PollWorkflowTaskQueueRequest, *v1.PollWorkflowTaskQueueResponse](WorkflowServicePollWorkflowTaskQueueOperationName)

// WorkflowServiceRespondWorkflowTaskCompletedOperationName defines the fully-qualified name for the RespondWorkflowTaskCompleted operation.
const WorkflowServiceRespondWorkflowTaskCompletedOperationName = "RespondWorkflowTaskCompleted"

var WorkflowServiceRespondWorkflowTaskCompletedOperation = nexus.NewOperationReference[*v1.RespondWorkflowTaskCompletedRequest, *v1.RespondWorkflowTaskCompletedResponse](WorkflowServiceRespondWorkflowTaskCompletedOperationName)

// WorkflowServiceRespondWorkflowTaskFailedOperationName defines the fully-qualified name for the RespondWorkflowTaskFailed operation.
const WorkflowServiceRespondWorkflowTaskFailedOperationName = "RespondWorkflowTaskFailed"

var WorkflowServiceRespondWorkflowTaskFailedOperation = nexus.NewOperationReference[*v1.RespondWorkflowTaskFailedRequest, *v1.RespondWorkflowTaskFailedResponse](WorkflowServiceRespondWorkflowTaskFailedOperationName)

// WorkflowServicePollActivityTaskQueueOperationName defines the fully-qualified name for the PollActivityTaskQueue operation.
const WorkflowServicePollActivityTaskQueueOperationName = "PollActivityTaskQueue"

var WorkflowServicePollActivityTaskQueueOperation = nexus.NewOperationReference[*v1.PollActivityTaskQueueRequest, *v1.PollActivityTaskQueueResponse](WorkflowServicePollActivityTaskQueueOperationName)

// WorkflowServiceRecordActivityTaskHeartbeatOperationName defines the fully-qualified name for the RecordActivityTaskHeartbeat operation.
const WorkflowServiceRecordActivityTaskHeartbeatOperationName = "RecordActivityTaskHeartbeat"

var WorkflowServiceRecordActivityTaskHeartbeatOperation = nexus.NewOperationReference[*v1.RecordActivityTaskHeartbeatRequest, *v1.RecordActivityTaskHeartbeatResponse](WorkflowServiceRecordActivityTaskHeartbeatOperationName)

// WorkflowServiceRecordActivityTaskHeartbeatByIdOperationName defines the fully-qualified name for the RecordActivityTaskHeartbeatById operation.
const WorkflowServiceRecordActivityTaskHeartbeatByIdOperationName = "RecordActivityTaskHeartbeatById"

var WorkflowServiceRecordActivityTaskHeartbeatByIdOperation = nexus.NewOperationReference[*v1.RecordActivityTaskHeartbeatByIdRequest, *v1.RecordActivityTaskHeartbeatByIdResponse](WorkflowServiceRecordActivityTaskHeartbeatByIdOperationName)

// WorkflowServiceRespondActivityTaskCompletedOperationName defines the fully-qualified name for the RespondActivityTaskCompleted operation.
const WorkflowServiceRespondActivityTaskCompletedOperationName = "RespondActivityTaskCompleted"

var WorkflowServiceRespondActivityTaskCompletedOperation = nexus.NewOperationReference[*v1.RespondActivityTaskCompletedRequest, *v1.RespondActivityTaskCompletedResponse](WorkflowServiceRespondActivityTaskCompletedOperationName)

// WorkflowServiceRespondActivityTaskCompletedByIdOperationName defines the fully-qualified name for the RespondActivityTaskCompletedById operation.
const WorkflowServiceRespondActivityTaskCompletedByIdOperationName = "RespondActivityTaskCompletedById"

var WorkflowServiceRespondActivityTaskCompletedByIdOperation = nexus.NewOperationReference[*v1.RespondActivityTaskCompletedByIdRequest, *v1.RespondActivityTaskCompletedByIdResponse](WorkflowServiceRespondActivityTaskCompletedByIdOperationName)

// WorkflowServiceRespondActivityTaskFailedOperationName defines the fully-qualified name for the RespondActivityTaskFailed operation.
const WorkflowServiceRespondActivityTaskFailedOperationName = "RespondActivityTaskFailed"

var WorkflowServiceRespondActivityTaskFailedOperation = nexus.NewOperationReference[*v1.RespondActivityTaskFailedRequest, *v1.RespondActivityTaskFailedResponse](WorkflowServiceRespondActivityTaskFailedOperationName)

// WorkflowServiceRespondActivityTaskFailedByIdOperationName defines the fully-qualified name for the RespondActivityTaskFailedById operation.
const WorkflowServiceRespondActivityTaskFailedByIdOperationName = "RespondActivityTaskFailedById"

var WorkflowServiceRespondActivityTaskFailedByIdOperation = nexus.NewOperationReference[*v1.RespondActivityTaskFailedByIdRequest, *v1.RespondActivityTaskFailedByIdResponse](WorkflowServiceRespondActivityTaskFailedByIdOperationName)

// WorkflowServiceRespondActivityTaskCanceledOperationName defines the fully-qualified name for the RespondActivityTaskCanceled operation.
const WorkflowServiceRespondActivityTaskCanceledOperationName = "RespondActivityTaskCanceled"

var WorkflowServiceRespondActivityTaskCanceledOperation = nexus.NewOperationReference[*v1.RespondActivityTaskCanceledRequest, *v1.RespondActivityTaskCanceledResponse](WorkflowServiceRespondActivityTaskCanceledOperationName)

// WorkflowServiceRespondActivityTaskCanceledByIdOperationName defines the fully-qualified name for the RespondActivityTaskCanceledById operation.
const WorkflowServiceRespondActivityTaskCanceledByIdOperationName = "RespondActivityTaskCanceledById"

var WorkflowServiceRespondActivityTaskCanceledByIdOperation = nexus.NewOperationReference[*v1.RespondActivityTaskCanceledByIdRequest, *v1.RespondActivityTaskCanceledByIdResponse](WorkflowServiceRespondActivityTaskCanceledByIdOperationName)

// WorkflowServiceRequestCancelWorkflowExecutionOperationName defines the fully-qualified name for the RequestCancelWorkflowExecution operation.
const WorkflowServiceRequestCancelWorkflowExecutionOperationName = "RequestCancelWorkflowExecution"

var WorkflowServiceRequestCancelWorkflowExecutionOperation = nexus.NewOperationReference[*v1.RequestCancelWorkflowExecutionRequest, *v1.RequestCancelWorkflowExecutionResponse](WorkflowServiceRequestCancelWorkflowExecutionOperationName)

// WorkflowServiceSignalWorkflowExecutionOperationName defines the fully-qualified name for the SignalWorkflowExecution operation.
const WorkflowServiceSignalWorkflowExecutionOperationName = "SignalWorkflowExecution"

var WorkflowServiceSignalWorkflowExecutionOperation = nexus.NewOperationReference[*v1.SignalWorkflowExecutionRequest, *v1.SignalWorkflowExecutionResponse](WorkflowServiceSignalWorkflowExecutionOperationName)

// WorkflowServiceSignalWithStartWorkflowExecutionOperationName defines the fully-qualified name for the SignalWithStartWorkflowExecution operation.
const WorkflowServiceSignalWithStartWorkflowExecutionOperationName = "SignalWithStartWorkflowExecution"

var WorkflowServiceSignalWithStartWorkflowExecutionOperation = nexus.NewOperationReference[*v1.SignalWithStartWorkflowExecutionRequest, *v1.SignalWithStartWorkflowExecutionResponse](WorkflowServiceSignalWithStartWorkflowExecutionOperationName)

// WorkflowServiceResetWorkflowExecutionOperationName defines the fully-qualified name for the ResetWorkflowExecution operation.
const WorkflowServiceResetWorkflowExecutionOperationName = "ResetWorkflowExecution"

var WorkflowServiceResetWorkflowExecutionOperation = nexus.NewOperationReference[*v1.ResetWorkflowExecutionRequest, *v1.ResetWorkflowExecutionResponse](WorkflowServiceResetWorkflowExecutionOperationName)

// WorkflowServiceTerminateWorkflowExecutionOperationName defines the fully-qualified name for the TerminateWorkflowExecution operation.
const WorkflowServiceTerminateWorkflowExecutionOperationName = "TerminateWorkflowExecution"

var WorkflowServiceTerminateWorkflowExecutionOperation = nexus.NewOperationReference[*v1.TerminateWorkflowExecutionRequest, *v1.TerminateWorkflowExecutionResponse](WorkflowServiceTerminateWorkflowExecutionOperationName)

// WorkflowServiceDeleteWorkflowExecutionOperationName defines the fully-qualified name for the DeleteWorkflowExecution operation.
const WorkflowServiceDeleteWorkflowExecutionOperationName = "DeleteWorkflowExecution"

var WorkflowServiceDeleteWorkflowExecutionOperation = nexus.NewOperationReference[*v1.DeleteWorkflowExecutionRequest, *v1.DeleteWorkflowExecutionResponse](WorkflowServiceDeleteWorkflowExecutionOperationName)

// WorkflowServiceListOpenWorkflowExecutionsOperationName defines the fully-qualified name for the ListOpenWorkflowExecutions operation.
const WorkflowServiceListOpenWorkflowExecutionsOperationName = "ListOpenWorkflowExecutions"

var WorkflowServiceListOpenWorkflowExecutionsOperation = nexus.NewOperationReference[*v1.ListOpenWorkflowExecutionsRequest, *v1.ListOpenWorkflowExecutionsResponse](WorkflowServiceListOpenWorkflowExecutionsOperationName)

// WorkflowServiceListClosedWorkflowExecutionsOperationName defines the fully-qualified name for the ListClosedWorkflowExecutions operation.
const WorkflowServiceListClosedWorkflowExecutionsOperationName = "ListClosedWorkflowExecutions"

var WorkflowServiceListClosedWorkflowExecutionsOperation = nexus.NewOperationReference[*v1.ListClosedWorkflowExecutionsRequest, *v1.ListClosedWorkflowExecutionsResponse](WorkflowServiceListClosedWorkflowExecutionsOperationName)

// WorkflowServiceListWorkflowExecutionsOperationName defines the fully-qualified name for the ListWorkflowExecutions operation.
const WorkflowServiceListWorkflowExecutionsOperationName = "ListWorkflowExecutions"

var WorkflowServiceListWorkflowExecutionsOperation = nexus.NewOperationReference[*v1.ListWorkflowExecutionsRequest, *v1.ListWorkflowExecutionsResponse](WorkflowServiceListWorkflowExecutionsOperationName)

// WorkflowServiceListArchivedWorkflowExecutionsOperationName defines the fully-qualified name for the ListArchivedWorkflowExecutions operation.
const WorkflowServiceListArchivedWorkflowExecutionsOperationName = "ListArchivedWorkflowExecutions"

var WorkflowServiceListArchivedWorkflowExecutionsOperation = nexus.NewOperationReference[*v1.ListArchivedWorkflowExecutionsRequest, *v1.ListArchivedWorkflowExecutionsResponse](WorkflowServiceListArchivedWorkflowExecutionsOperationName)

// WorkflowServiceScanWorkflowExecutionsOperationName defines the fully-qualified name for the ScanWorkflowExecutions operation.
const WorkflowServiceScanWorkflowExecutionsOperationName = "ScanWorkflowExecutions"

var WorkflowServiceScanWorkflowExecutionsOperation = nexus.NewOperationReference[*v1.ScanWorkflowExecutionsRequest, *v1.ScanWorkflowExecutionsResponse](WorkflowServiceScanWorkflowExecutionsOperationName)

// WorkflowServiceCountWorkflowExecutionsOperationName defines the fully-qualified name for the CountWorkflowExecutions operation.
const WorkflowServiceCountWorkflowExecutionsOperationName = "CountWorkflowExecutions"

var WorkflowServiceCountWorkflowExecutionsOperation = nexus.NewOperationReference[*v1.CountWorkflowExecutionsRequest, *v1.CountWorkflowExecutionsResponse](WorkflowServiceCountWorkflowExecutionsOperationName)

// WorkflowServiceGetSearchAttributesOperationName defines the fully-qualified name for the GetSearchAttributes operation.
const WorkflowServiceGetSearchAttributesOperationName = "GetSearchAttributes"

var WorkflowServiceGetSearchAttributesOperation = nexus.NewOperationReference[*v1.GetSearchAttributesRequest, *v1.GetSearchAttributesResponse](WorkflowServiceGetSearchAttributesOperationName)

// WorkflowServiceRespondQueryTaskCompletedOperationName defines the fully-qualified name for the RespondQueryTaskCompleted operation.
const WorkflowServiceRespondQueryTaskCompletedOperationName = "RespondQueryTaskCompleted"

var WorkflowServiceRespondQueryTaskCompletedOperation = nexus.NewOperationReference[*v1.RespondQueryTaskCompletedRequest, *v1.RespondQueryTaskCompletedResponse](WorkflowServiceRespondQueryTaskCompletedOperationName)

// WorkflowServiceResetStickyTaskQueueOperationName defines the fully-qualified name for the ResetStickyTaskQueue operation.
const WorkflowServiceResetStickyTaskQueueOperationName = "ResetStickyTaskQueue"

var WorkflowServiceResetStickyTaskQueueOperation = nexus.NewOperationReference[*v1.ResetStickyTaskQueueRequest, *v1.ResetStickyTaskQueueResponse](WorkflowServiceResetStickyTaskQueueOperationName)

// WorkflowServiceShutdownWorkerOperationName defines the fully-qualified name for the ShutdownWorker operation.
const WorkflowServiceShutdownWorkerOperationName = "ShutdownWorker"

var WorkflowServiceShutdownWorkerOperation = nexus.NewOperationReference[*v1.ShutdownWorkerRequest, *v1.ShutdownWorkerResponse](WorkflowServiceShutdownWorkerOperationName)

// WorkflowServiceQueryWorkflowOperationName defines the fully-qualified name for the QueryWorkflow operation.
const WorkflowServiceQueryWorkflowOperationName = "QueryWorkflow"

var WorkflowServiceQueryWorkflowOperation = nexus.NewOperationReference[*v1.QueryWorkflowRequest, *v1.QueryWorkflowResponse](WorkflowServiceQueryWorkflowOperationName)

// WorkflowServiceDescribeWorkflowExecutionOperationName defines the fully-qualified name for the DescribeWorkflowExecution operation.
const WorkflowServiceDescribeWorkflowExecutionOperationName = "DescribeWorkflowExecution"

var WorkflowServiceDescribeWorkflowExecutionOperation = nexus.NewOperationReference[*v1.DescribeWorkflowExecutionRequest, *v1.DescribeWorkflowExecutionResponse](WorkflowServiceDescribeWorkflowExecutionOperationName)

// WorkflowServiceDescribeTaskQueueOperationName defines the fully-qualified name for the DescribeTaskQueue operation.
const WorkflowServiceDescribeTaskQueueOperationName = "DescribeTaskQueue"

var WorkflowServiceDescribeTaskQueueOperation = nexus.NewOperationReference[*v1.DescribeTaskQueueRequest, *v1.DescribeTaskQueueResponse](WorkflowServiceDescribeTaskQueueOperationName)

// WorkflowServiceGetClusterInfoOperationName defines the fully-qualified name for the GetClusterInfo operation.
const WorkflowServiceGetClusterInfoOperationName = "GetClusterInfo"

var WorkflowServiceGetClusterInfoOperation = nexus.NewOperationReference[*v1.GetClusterInfoRequest, *v1.GetClusterInfoResponse](WorkflowServiceGetClusterInfoOperationName)

// WorkflowServiceGetSystemInfoOperationName defines the fully-qualified name for the GetSystemInfo operation.
const WorkflowServiceGetSystemInfoOperationName = "GetSystemInfo"

var WorkflowServiceGetSystemInfoOperation = nexus.NewOperationReference[*v1.GetSystemInfoRequest, *v1.GetSystemInfoResponse](WorkflowServiceGetSystemInfoOperationName)

// WorkflowServiceListTaskQueuePartitionsOperationName defines the fully-qualified name for the ListTaskQueuePartitions operation.
const WorkflowServiceListTaskQueuePartitionsOperationName = "ListTaskQueuePartitions"

var WorkflowServiceListTaskQueuePartitionsOperation = nexus.NewOperationReference[*v1.ListTaskQueuePartitionsRequest, *v1.ListTaskQueuePartitionsResponse](WorkflowServiceListTaskQueuePartitionsOperationName)

// WorkflowServiceCreateScheduleOperationName defines the fully-qualified name for the CreateSchedule operation.
const WorkflowServiceCreateScheduleOperationName = "CreateSchedule"

var WorkflowServiceCreateScheduleOperation = nexus.NewOperationReference[*v1.CreateScheduleRequest, *v1.CreateScheduleResponse](WorkflowServiceCreateScheduleOperationName)

// WorkflowServiceDescribeScheduleOperationName defines the fully-qualified name for the DescribeSchedule operation.
const WorkflowServiceDescribeScheduleOperationName = "DescribeSchedule"

var WorkflowServiceDescribeScheduleOperation = nexus.NewOperationReference[*v1.DescribeScheduleRequest, *v1.DescribeScheduleResponse](WorkflowServiceDescribeScheduleOperationName)

// WorkflowServiceUpdateScheduleOperationName defines the fully-qualified name for the UpdateSchedule operation.
const WorkflowServiceUpdateScheduleOperationName = "UpdateSchedule"

var WorkflowServiceUpdateScheduleOperation = nexus.NewOperationReference[*v1.UpdateScheduleRequest, *v1.UpdateScheduleResponse](WorkflowServiceUpdateScheduleOperationName)

// WorkflowServicePatchScheduleOperationName defines the fully-qualified name for the PatchSchedule operation.
const WorkflowServicePatchScheduleOperationName = "PatchSchedule"

var WorkflowServicePatchScheduleOperation = nexus.NewOperationReference[*v1.PatchScheduleRequest, *v1.PatchScheduleResponse](WorkflowServicePatchScheduleOperationName)

// WorkflowServiceListScheduleMatchingTimesOperationName defines the fully-qualified name for the ListScheduleMatchingTimes operation.
const WorkflowServiceListScheduleMatchingTimesOperationName = "ListScheduleMatchingTimes"

var WorkflowServiceListScheduleMatchingTimesOperation = nexus.NewOperationReference[*v1.ListScheduleMatchingTimesRequest, *v1.ListScheduleMatchingTimesResponse](WorkflowServiceListScheduleMatchingTimesOperationName)

// WorkflowServiceDeleteScheduleOperationName defines the fully-qualified name for the DeleteSchedule operation.
const WorkflowServiceDeleteScheduleOperationName = "DeleteSchedule"

var WorkflowServiceDeleteScheduleOperation = nexus.NewOperationReference[*v1.DeleteScheduleRequest, *v1.DeleteScheduleResponse](WorkflowServiceDeleteScheduleOperationName)

// WorkflowServiceListSchedulesOperationName defines the fully-qualified name for the ListSchedules operation.
const WorkflowServiceListSchedulesOperationName = "ListSchedules"

var WorkflowServiceListSchedulesOperation = nexus.NewOperationReference[*v1.ListSchedulesRequest, *v1.ListSchedulesResponse](WorkflowServiceListSchedulesOperationName)

// WorkflowServiceUpdateWorkerBuildIdCompatibilityOperationName defines the fully-qualified name for the UpdateWorkerBuildIdCompatibility operation.
const WorkflowServiceUpdateWorkerBuildIdCompatibilityOperationName = "UpdateWorkerBuildIdCompatibility"

var WorkflowServiceUpdateWorkerBuildIdCompatibilityOperation = nexus.NewOperationReference[*v1.UpdateWorkerBuildIdCompatibilityRequest, *v1.UpdateWorkerBuildIdCompatibilityResponse](WorkflowServiceUpdateWorkerBuildIdCompatibilityOperationName)

// WorkflowServiceGetWorkerBuildIdCompatibilityOperationName defines the fully-qualified name for the GetWorkerBuildIdCompatibility operation.
const WorkflowServiceGetWorkerBuildIdCompatibilityOperationName = "GetWorkerBuildIdCompatibility"

var WorkflowServiceGetWorkerBuildIdCompatibilityOperation = nexus.NewOperationReference[*v1.GetWorkerBuildIdCompatibilityRequest, *v1.GetWorkerBuildIdCompatibilityResponse](WorkflowServiceGetWorkerBuildIdCompatibilityOperationName)

// WorkflowServiceUpdateWorkerVersioningRulesOperationName defines the fully-qualified name for the UpdateWorkerVersioningRules operation.
const WorkflowServiceUpdateWorkerVersioningRulesOperationName = "UpdateWorkerVersioningRules"

var WorkflowServiceUpdateWorkerVersioningRulesOperation = nexus.NewOperationReference[*v1.UpdateWorkerVersioningRulesRequest, *v1.UpdateWorkerVersioningRulesResponse](WorkflowServiceUpdateWorkerVersioningRulesOperationName)

// WorkflowServiceGetWorkerVersioningRulesOperationName defines the fully-qualified name for the GetWorkerVersioningRules operation.
const WorkflowServiceGetWorkerVersioningRulesOperationName = "GetWorkerVersioningRules"

var WorkflowServiceGetWorkerVersioningRulesOperation = nexus.NewOperationReference[*v1.GetWorkerVersioningRulesRequest, *v1.GetWorkerVersioningRulesResponse](WorkflowServiceGetWorkerVersioningRulesOperationName)

// WorkflowServiceGetWorkerTaskReachabilityOperationName defines the fully-qualified name for the GetWorkerTaskReachability operation.
const WorkflowServiceGetWorkerTaskReachabilityOperationName = "GetWorkerTaskReachability"

var WorkflowServiceGetWorkerTaskReachabilityOperation = nexus.NewOperationReference[*v1.GetWorkerTaskReachabilityRequest, *v1.GetWorkerTaskReachabilityResponse](WorkflowServiceGetWorkerTaskReachabilityOperationName)

// WorkflowServiceDescribeDeploymentOperationName defines the fully-qualified name for the DescribeDeployment operation.
const WorkflowServiceDescribeDeploymentOperationName = "DescribeDeployment"

var WorkflowServiceDescribeDeploymentOperation = nexus.NewOperationReference[*v1.DescribeDeploymentRequest, *v1.DescribeDeploymentResponse](WorkflowServiceDescribeDeploymentOperationName)

// WorkflowServiceListDeploymentsOperationName defines the fully-qualified name for the ListDeployments operation.
const WorkflowServiceListDeploymentsOperationName = "ListDeployments"

var WorkflowServiceListDeploymentsOperation = nexus.NewOperationReference[*v1.ListDeploymentsRequest, *v1.ListDeploymentsResponse](WorkflowServiceListDeploymentsOperationName)

// WorkflowServiceGetDeploymentReachabilityOperationName defines the fully-qualified name for the GetDeploymentReachability operation.
const WorkflowServiceGetDeploymentReachabilityOperationName = "GetDeploymentReachability"

var WorkflowServiceGetDeploymentReachabilityOperation = nexus.NewOperationReference[*v1.GetDeploymentReachabilityRequest, *v1.GetDeploymentReachabilityResponse](WorkflowServiceGetDeploymentReachabilityOperationName)

// WorkflowServiceGetCurrentDeploymentOperationName defines the fully-qualified name for the GetCurrentDeployment operation.
const WorkflowServiceGetCurrentDeploymentOperationName = "GetCurrentDeployment"

var WorkflowServiceGetCurrentDeploymentOperation = nexus.NewOperationReference[*v1.GetCurrentDeploymentRequest, *v1.GetCurrentDeploymentResponse](WorkflowServiceGetCurrentDeploymentOperationName)

// WorkflowServiceSetCurrentDeploymentOperationName defines the fully-qualified name for the SetCurrentDeployment operation.
const WorkflowServiceSetCurrentDeploymentOperationName = "SetCurrentDeployment"

var WorkflowServiceSetCurrentDeploymentOperation = nexus.NewOperationReference[*v1.SetCurrentDeploymentRequest, *v1.SetCurrentDeploymentResponse](WorkflowServiceSetCurrentDeploymentOperationName)

// WorkflowServiceUpdateWorkflowExecutionOperationName defines the fully-qualified name for the UpdateWorkflowExecution operation.
const WorkflowServiceUpdateWorkflowExecutionOperationName = "UpdateWorkflowExecution"

var WorkflowServiceUpdateWorkflowExecutionOperation = nexus.NewOperationReference[*v1.UpdateWorkflowExecutionRequest, *v1.UpdateWorkflowExecutionResponse](WorkflowServiceUpdateWorkflowExecutionOperationName)

// WorkflowServicePollWorkflowExecutionUpdateOperationName defines the fully-qualified name for the PollWorkflowExecutionUpdate operation.
const WorkflowServicePollWorkflowExecutionUpdateOperationName = "PollWorkflowExecutionUpdate"

var WorkflowServicePollWorkflowExecutionUpdateOperation = nexus.NewOperationReference[*v1.PollWorkflowExecutionUpdateRequest, *v1.PollWorkflowExecutionUpdateResponse](WorkflowServicePollWorkflowExecutionUpdateOperationName)

// WorkflowServiceStartBatchOperationOperationName defines the fully-qualified name for the StartBatchOperation operation.
const WorkflowServiceStartBatchOperationOperationName = "StartBatchOperation"

var WorkflowServiceStartBatchOperationOperation = nexus.NewOperationReference[*v1.StartBatchOperationRequest, *v1.StartBatchOperationResponse](WorkflowServiceStartBatchOperationOperationName)

// WorkflowServiceStopBatchOperationOperationName defines the fully-qualified name for the StopBatchOperation operation.
const WorkflowServiceStopBatchOperationOperationName = "StopBatchOperation"

var WorkflowServiceStopBatchOperationOperation = nexus.NewOperationReference[*v1.StopBatchOperationRequest, *v1.StopBatchOperationResponse](WorkflowServiceStopBatchOperationOperationName)

// WorkflowServiceDescribeBatchOperationOperationName defines the fully-qualified name for the DescribeBatchOperation operation.
const WorkflowServiceDescribeBatchOperationOperationName = "DescribeBatchOperation"

var WorkflowServiceDescribeBatchOperationOperation = nexus.NewOperationReference[*v1.DescribeBatchOperationRequest, *v1.DescribeBatchOperationResponse](WorkflowServiceDescribeBatchOperationOperationName)

// WorkflowServiceListBatchOperationsOperationName defines the fully-qualified name for the ListBatchOperations operation.
const WorkflowServiceListBatchOperationsOperationName = "ListBatchOperations"

var WorkflowServiceListBatchOperationsOperation = nexus.NewOperationReference[*v1.ListBatchOperationsRequest, *v1.ListBatchOperationsResponse](WorkflowServiceListBatchOperationsOperationName)

// WorkflowServicePollNexusTaskQueueOperationName defines the fully-qualified name for the PollNexusTaskQueue operation.
const WorkflowServicePollNexusTaskQueueOperationName = "PollNexusTaskQueue"

var WorkflowServicePollNexusTaskQueueOperation = nexus.NewOperationReference[*v1.PollNexusTaskQueueRequest, *v1.PollNexusTaskQueueResponse](WorkflowServicePollNexusTaskQueueOperationName)

// WorkflowServiceRespondNexusTaskCompletedOperationName defines the fully-qualified name for the RespondNexusTaskCompleted operation.
const WorkflowServiceRespondNexusTaskCompletedOperationName = "RespondNexusTaskCompleted"

var WorkflowServiceRespondNexusTaskCompletedOperation = nexus.NewOperationReference[*v1.RespondNexusTaskCompletedRequest, *v1.RespondNexusTaskCompletedResponse](WorkflowServiceRespondNexusTaskCompletedOperationName)

// WorkflowServiceRespondNexusTaskFailedOperationName defines the fully-qualified name for the RespondNexusTaskFailed operation.
const WorkflowServiceRespondNexusTaskFailedOperationName = "RespondNexusTaskFailed"

var WorkflowServiceRespondNexusTaskFailedOperation = nexus.NewOperationReference[*v1.RespondNexusTaskFailedRequest, *v1.RespondNexusTaskFailedResponse](WorkflowServiceRespondNexusTaskFailedOperationName)

// WorkflowServiceUpdateActivityOptionsByIdOperationName defines the fully-qualified name for the UpdateActivityOptionsById operation.
const WorkflowServiceUpdateActivityOptionsByIdOperationName = "UpdateActivityOptionsById"

var WorkflowServiceUpdateActivityOptionsByIdOperation = nexus.NewOperationReference[*v1.UpdateActivityOptionsByIdRequest, *v1.UpdateActivityOptionsByIdResponse](WorkflowServiceUpdateActivityOptionsByIdOperationName)

// WorkflowServiceUpdateWorkflowExecutionOptionsOperationName defines the fully-qualified name for the UpdateWorkflowExecutionOptions operation.
const WorkflowServiceUpdateWorkflowExecutionOptionsOperationName = "UpdateWorkflowExecutionOptions"

var WorkflowServiceUpdateWorkflowExecutionOptionsOperation = nexus.NewOperationReference[*v1.UpdateWorkflowExecutionOptionsRequest, *v1.UpdateWorkflowExecutionOptionsResponse](WorkflowServiceUpdateWorkflowExecutionOptionsOperationName)

// WorkflowServicePauseActivityByIdOperationName defines the fully-qualified name for the PauseActivityById operation.
const WorkflowServicePauseActivityByIdOperationName = "PauseActivityById"

var WorkflowServicePauseActivityByIdOperation = nexus.NewOperationReference[*v1.PauseActivityByIdRequest, *v1.PauseActivityByIdResponse](WorkflowServicePauseActivityByIdOperationName)

// WorkflowServiceUnpauseActivityByIdOperationName defines the fully-qualified name for the UnpauseActivityById operation.
const WorkflowServiceUnpauseActivityByIdOperationName = "UnpauseActivityById"

var WorkflowServiceUnpauseActivityByIdOperation = nexus.NewOperationReference[*v1.UnpauseActivityByIdRequest, *v1.UnpauseActivityByIdResponse](WorkflowServiceUnpauseActivityByIdOperationName)

// WorkflowServiceResetActivityByIdOperationName defines the fully-qualified name for the ResetActivityById operation.
const WorkflowServiceResetActivityByIdOperationName = "ResetActivityById"

var WorkflowServiceResetActivityByIdOperation = nexus.NewOperationReference[*v1.ResetActivityByIdRequest, *v1.ResetActivityByIdResponse](WorkflowServiceResetActivityByIdOperationName)

type WorkflowServiceNexusHandler interface {
	mustEmbedUnimplementedWorkflowServiceNexusHandler()
	RegisterNamespace(name string) nexus.Operation[*v1.RegisterNamespaceRequest, *v1.RegisterNamespaceResponse]
	DescribeNamespace(name string) nexus.Operation[*v1.DescribeNamespaceRequest, *v1.DescribeNamespaceResponse]
	ListNamespaces(name string) nexus.Operation[*v1.ListNamespacesRequest, *v1.ListNamespacesResponse]
	UpdateNamespace(name string) nexus.Operation[*v1.UpdateNamespaceRequest, *v1.UpdateNamespaceResponse]
	DeprecateNamespace(name string) nexus.Operation[*v1.DeprecateNamespaceRequest, *v1.DeprecateNamespaceResponse]
	StartWorkflowExecution(name string) nexus.Operation[*v1.StartWorkflowExecutionRequest, *v1.StartWorkflowExecutionResponse]
	ExecuteMultiOperation(name string) nexus.Operation[*v1.ExecuteMultiOperationRequest, *v1.ExecuteMultiOperationResponse]
	GetWorkflowExecutionHistory(name string) nexus.Operation[*v1.GetWorkflowExecutionHistoryRequest, *v1.GetWorkflowExecutionHistoryResponse]
	GetWorkflowExecutionHistoryReverse(name string) nexus.Operation[*v1.GetWorkflowExecutionHistoryReverseRequest, *v1.GetWorkflowExecutionHistoryReverseResponse]
	PollWorkflowTaskQueue(name string) nexus.Operation[*v1.PollWorkflowTaskQueueRequest, *v1.PollWorkflowTaskQueueResponse]
	RespondWorkflowTaskCompleted(name string) nexus.Operation[*v1.RespondWorkflowTaskCompletedRequest, *v1.RespondWorkflowTaskCompletedResponse]
	RespondWorkflowTaskFailed(name string) nexus.Operation[*v1.RespondWorkflowTaskFailedRequest, *v1.RespondWorkflowTaskFailedResponse]
	PollActivityTaskQueue(name string) nexus.Operation[*v1.PollActivityTaskQueueRequest, *v1.PollActivityTaskQueueResponse]
	RecordActivityTaskHeartbeat(name string) nexus.Operation[*v1.RecordActivityTaskHeartbeatRequest, *v1.RecordActivityTaskHeartbeatResponse]
	RecordActivityTaskHeartbeatById(name string) nexus.Operation[*v1.RecordActivityTaskHeartbeatByIdRequest, *v1.RecordActivityTaskHeartbeatByIdResponse]
	RespondActivityTaskCompleted(name string) nexus.Operation[*v1.RespondActivityTaskCompletedRequest, *v1.RespondActivityTaskCompletedResponse]
	RespondActivityTaskCompletedById(name string) nexus.Operation[*v1.RespondActivityTaskCompletedByIdRequest, *v1.RespondActivityTaskCompletedByIdResponse]
	RespondActivityTaskFailed(name string) nexus.Operation[*v1.RespondActivityTaskFailedRequest, *v1.RespondActivityTaskFailedResponse]
	RespondActivityTaskFailedById(name string) nexus.Operation[*v1.RespondActivityTaskFailedByIdRequest, *v1.RespondActivityTaskFailedByIdResponse]
	RespondActivityTaskCanceled(name string) nexus.Operation[*v1.RespondActivityTaskCanceledRequest, *v1.RespondActivityTaskCanceledResponse]
	RespondActivityTaskCanceledById(name string) nexus.Operation[*v1.RespondActivityTaskCanceledByIdRequest, *v1.RespondActivityTaskCanceledByIdResponse]
	RequestCancelWorkflowExecution(name string) nexus.Operation[*v1.RequestCancelWorkflowExecutionRequest, *v1.RequestCancelWorkflowExecutionResponse]
	SignalWorkflowExecution(name string) nexus.Operation[*v1.SignalWorkflowExecutionRequest, *v1.SignalWorkflowExecutionResponse]
	SignalWithStartWorkflowExecution(name string) nexus.Operation[*v1.SignalWithStartWorkflowExecutionRequest, *v1.SignalWithStartWorkflowExecutionResponse]
	ResetWorkflowExecution(name string) nexus.Operation[*v1.ResetWorkflowExecutionRequest, *v1.ResetWorkflowExecutionResponse]
	TerminateWorkflowExecution(name string) nexus.Operation[*v1.TerminateWorkflowExecutionRequest, *v1.TerminateWorkflowExecutionResponse]
	DeleteWorkflowExecution(name string) nexus.Operation[*v1.DeleteWorkflowExecutionRequest, *v1.DeleteWorkflowExecutionResponse]
	ListOpenWorkflowExecutions(name string) nexus.Operation[*v1.ListOpenWorkflowExecutionsRequest, *v1.ListOpenWorkflowExecutionsResponse]
	ListClosedWorkflowExecutions(name string) nexus.Operation[*v1.ListClosedWorkflowExecutionsRequest, *v1.ListClosedWorkflowExecutionsResponse]
	ListWorkflowExecutions(name string) nexus.Operation[*v1.ListWorkflowExecutionsRequest, *v1.ListWorkflowExecutionsResponse]
	ListArchivedWorkflowExecutions(name string) nexus.Operation[*v1.ListArchivedWorkflowExecutionsRequest, *v1.ListArchivedWorkflowExecutionsResponse]
	ScanWorkflowExecutions(name string) nexus.Operation[*v1.ScanWorkflowExecutionsRequest, *v1.ScanWorkflowExecutionsResponse]
	CountWorkflowExecutions(name string) nexus.Operation[*v1.CountWorkflowExecutionsRequest, *v1.CountWorkflowExecutionsResponse]
	GetSearchAttributes(name string) nexus.Operation[*v1.GetSearchAttributesRequest, *v1.GetSearchAttributesResponse]
	RespondQueryTaskCompleted(name string) nexus.Operation[*v1.RespondQueryTaskCompletedRequest, *v1.RespondQueryTaskCompletedResponse]
	ResetStickyTaskQueue(name string) nexus.Operation[*v1.ResetStickyTaskQueueRequest, *v1.ResetStickyTaskQueueResponse]
	ShutdownWorker(name string) nexus.Operation[*v1.ShutdownWorkerRequest, *v1.ShutdownWorkerResponse]
	QueryWorkflow(name string) nexus.Operation[*v1.QueryWorkflowRequest, *v1.QueryWorkflowResponse]
	DescribeWorkflowExecution(name string) nexus.Operation[*v1.DescribeWorkflowExecutionRequest, *v1.DescribeWorkflowExecutionResponse]
	DescribeTaskQueue(name string) nexus.Operation[*v1.DescribeTaskQueueRequest, *v1.DescribeTaskQueueResponse]
	GetClusterInfo(name string) nexus.Operation[*v1.GetClusterInfoRequest, *v1.GetClusterInfoResponse]
	GetSystemInfo(name string) nexus.Operation[*v1.GetSystemInfoRequest, *v1.GetSystemInfoResponse]
	ListTaskQueuePartitions(name string) nexus.Operation[*v1.ListTaskQueuePartitionsRequest, *v1.ListTaskQueuePartitionsResponse]
	CreateSchedule(name string) nexus.Operation[*v1.CreateScheduleRequest, *v1.CreateScheduleResponse]
	DescribeSchedule(name string) nexus.Operation[*v1.DescribeScheduleRequest, *v1.DescribeScheduleResponse]
	UpdateSchedule(name string) nexus.Operation[*v1.UpdateScheduleRequest, *v1.UpdateScheduleResponse]
	PatchSchedule(name string) nexus.Operation[*v1.PatchScheduleRequest, *v1.PatchScheduleResponse]
	ListScheduleMatchingTimes(name string) nexus.Operation[*v1.ListScheduleMatchingTimesRequest, *v1.ListScheduleMatchingTimesResponse]
	DeleteSchedule(name string) nexus.Operation[*v1.DeleteScheduleRequest, *v1.DeleteScheduleResponse]
	ListSchedules(name string) nexus.Operation[*v1.ListSchedulesRequest, *v1.ListSchedulesResponse]
	UpdateWorkerBuildIdCompatibility(name string) nexus.Operation[*v1.UpdateWorkerBuildIdCompatibilityRequest, *v1.UpdateWorkerBuildIdCompatibilityResponse]
	GetWorkerBuildIdCompatibility(name string) nexus.Operation[*v1.GetWorkerBuildIdCompatibilityRequest, *v1.GetWorkerBuildIdCompatibilityResponse]
	UpdateWorkerVersioningRules(name string) nexus.Operation[*v1.UpdateWorkerVersioningRulesRequest, *v1.UpdateWorkerVersioningRulesResponse]
	GetWorkerVersioningRules(name string) nexus.Operation[*v1.GetWorkerVersioningRulesRequest, *v1.GetWorkerVersioningRulesResponse]
	GetWorkerTaskReachability(name string) nexus.Operation[*v1.GetWorkerTaskReachabilityRequest, *v1.GetWorkerTaskReachabilityResponse]
	DescribeDeployment(name string) nexus.Operation[*v1.DescribeDeploymentRequest, *v1.DescribeDeploymentResponse]
	ListDeployments(name string) nexus.Operation[*v1.ListDeploymentsRequest, *v1.ListDeploymentsResponse]
	GetDeploymentReachability(name string) nexus.Operation[*v1.GetDeploymentReachabilityRequest, *v1.GetDeploymentReachabilityResponse]
	GetCurrentDeployment(name string) nexus.Operation[*v1.GetCurrentDeploymentRequest, *v1.GetCurrentDeploymentResponse]
	SetCurrentDeployment(name string) nexus.Operation[*v1.SetCurrentDeploymentRequest, *v1.SetCurrentDeploymentResponse]
	UpdateWorkflowExecution(name string) nexus.Operation[*v1.UpdateWorkflowExecutionRequest, *v1.UpdateWorkflowExecutionResponse]
	PollWorkflowExecutionUpdate(name string) nexus.Operation[*v1.PollWorkflowExecutionUpdateRequest, *v1.PollWorkflowExecutionUpdateResponse]
	StartBatchOperation(name string) nexus.Operation[*v1.StartBatchOperationRequest, *v1.StartBatchOperationResponse]
	StopBatchOperation(name string) nexus.Operation[*v1.StopBatchOperationRequest, *v1.StopBatchOperationResponse]
	DescribeBatchOperation(name string) nexus.Operation[*v1.DescribeBatchOperationRequest, *v1.DescribeBatchOperationResponse]
	ListBatchOperations(name string) nexus.Operation[*v1.ListBatchOperationsRequest, *v1.ListBatchOperationsResponse]
	PollNexusTaskQueue(name string) nexus.Operation[*v1.PollNexusTaskQueueRequest, *v1.PollNexusTaskQueueResponse]
	RespondNexusTaskCompleted(name string) nexus.Operation[*v1.RespondNexusTaskCompletedRequest, *v1.RespondNexusTaskCompletedResponse]
	RespondNexusTaskFailed(name string) nexus.Operation[*v1.RespondNexusTaskFailedRequest, *v1.RespondNexusTaskFailedResponse]
	UpdateActivityOptionsById(name string) nexus.Operation[*v1.UpdateActivityOptionsByIdRequest, *v1.UpdateActivityOptionsByIdResponse]
	UpdateWorkflowExecutionOptions(name string) nexus.Operation[*v1.UpdateWorkflowExecutionOptionsRequest, *v1.UpdateWorkflowExecutionOptionsResponse]
	PauseActivityById(name string) nexus.Operation[*v1.PauseActivityByIdRequest, *v1.PauseActivityByIdResponse]
	UnpauseActivityById(name string) nexus.Operation[*v1.UnpauseActivityByIdRequest, *v1.UnpauseActivityByIdResponse]
	ResetActivityById(name string) nexus.Operation[*v1.ResetActivityByIdRequest, *v1.ResetActivityByIdResponse]
}

func NewWorkflowServiceNexusService(h WorkflowServiceNexusHandler) (*nexus.Service, error) {
	svc := nexus.NewService(WorkflowServiceServiceName)
	err := svc.Register(h.RegisterNamespace(WorkflowServiceRegisterNamespaceOperationName), h.DescribeNamespace(WorkflowServiceDescribeNamespaceOperationName), h.ListNamespaces(WorkflowServiceListNamespacesOperationName), h.UpdateNamespace(WorkflowServiceUpdateNamespaceOperationName), h.DeprecateNamespace(WorkflowServiceDeprecateNamespaceOperationName), h.StartWorkflowExecution(WorkflowServiceStartWorkflowExecutionOperationName), h.ExecuteMultiOperation(WorkflowServiceExecuteMultiOperationOperationName), h.GetWorkflowExecutionHistory(WorkflowServiceGetWorkflowExecutionHistoryOperationName), h.GetWorkflowExecutionHistoryReverse(WorkflowServiceGetWorkflowExecutionHistoryReverseOperationName), h.PollWorkflowTaskQueue(WorkflowServicePollWorkflowTaskQueueOperationName), h.RespondWorkflowTaskCompleted(WorkflowServiceRespondWorkflowTaskCompletedOperationName), h.RespondWorkflowTaskFailed(WorkflowServiceRespondWorkflowTaskFailedOperationName), h.PollActivityTaskQueue(WorkflowServicePollActivityTaskQueueOperationName), h.RecordActivityTaskHeartbeat(WorkflowServiceRecordActivityTaskHeartbeatOperationName), h.RecordActivityTaskHeartbeatById(WorkflowServiceRecordActivityTaskHeartbeatByIdOperationName), h.RespondActivityTaskCompleted(WorkflowServiceRespondActivityTaskCompletedOperationName), h.RespondActivityTaskCompletedById(WorkflowServiceRespondActivityTaskCompletedByIdOperationName), h.RespondActivityTaskFailed(WorkflowServiceRespondActivityTaskFailedOperationName), h.RespondActivityTaskFailedById(WorkflowServiceRespondActivityTaskFailedByIdOperationName), h.RespondActivityTaskCanceled(WorkflowServiceRespondActivityTaskCanceledOperationName), h.RespondActivityTaskCanceledById(WorkflowServiceRespondActivityTaskCanceledByIdOperationName), h.RequestCancelWorkflowExecution(WorkflowServiceRequestCancelWorkflowExecutionOperationName), h.SignalWorkflowExecution(WorkflowServiceSignalWorkflowExecutionOperationName), h.SignalWithStartWorkflowExecution(WorkflowServiceSignalWithStartWorkflowExecutionOperationName), h.ResetWorkflowExecution(WorkflowServiceResetWorkflowExecutionOperationName), h.TerminateWorkflowExecution(WorkflowServiceTerminateWorkflowExecutionOperationName), h.DeleteWorkflowExecution(WorkflowServiceDeleteWorkflowExecutionOperationName), h.ListOpenWorkflowExecutions(WorkflowServiceListOpenWorkflowExecutionsOperationName), h.ListClosedWorkflowExecutions(WorkflowServiceListClosedWorkflowExecutionsOperationName), h.ListWorkflowExecutions(WorkflowServiceListWorkflowExecutionsOperationName), h.ListArchivedWorkflowExecutions(WorkflowServiceListArchivedWorkflowExecutionsOperationName), h.ScanWorkflowExecutions(WorkflowServiceScanWorkflowExecutionsOperationName), h.CountWorkflowExecutions(WorkflowServiceCountWorkflowExecutionsOperationName), h.GetSearchAttributes(WorkflowServiceGetSearchAttributesOperationName), h.RespondQueryTaskCompleted(WorkflowServiceRespondQueryTaskCompletedOperationName), h.ResetStickyTaskQueue(WorkflowServiceResetStickyTaskQueueOperationName), h.ShutdownWorker(WorkflowServiceShutdownWorkerOperationName), h.QueryWorkflow(WorkflowServiceQueryWorkflowOperationName), h.DescribeWorkflowExecution(WorkflowServiceDescribeWorkflowExecutionOperationName), h.DescribeTaskQueue(WorkflowServiceDescribeTaskQueueOperationName), h.GetClusterInfo(WorkflowServiceGetClusterInfoOperationName), h.GetSystemInfo(WorkflowServiceGetSystemInfoOperationName), h.ListTaskQueuePartitions(WorkflowServiceListTaskQueuePartitionsOperationName), h.CreateSchedule(WorkflowServiceCreateScheduleOperationName), h.DescribeSchedule(WorkflowServiceDescribeScheduleOperationName), h.UpdateSchedule(WorkflowServiceUpdateScheduleOperationName), h.PatchSchedule(WorkflowServicePatchScheduleOperationName), h.ListScheduleMatchingTimes(WorkflowServiceListScheduleMatchingTimesOperationName), h.DeleteSchedule(WorkflowServiceDeleteScheduleOperationName), h.ListSchedules(WorkflowServiceListSchedulesOperationName), h.UpdateWorkerBuildIdCompatibility(WorkflowServiceUpdateWorkerBuildIdCompatibilityOperationName), h.GetWorkerBuildIdCompatibility(WorkflowServiceGetWorkerBuildIdCompatibilityOperationName), h.UpdateWorkerVersioningRules(WorkflowServiceUpdateWorkerVersioningRulesOperationName), h.GetWorkerVersioningRules(WorkflowServiceGetWorkerVersioningRulesOperationName), h.GetWorkerTaskReachability(WorkflowServiceGetWorkerTaskReachabilityOperationName), h.DescribeDeployment(WorkflowServiceDescribeDeploymentOperationName), h.ListDeployments(WorkflowServiceListDeploymentsOperationName), h.GetDeploymentReachability(WorkflowServiceGetDeploymentReachabilityOperationName), h.GetCurrentDeployment(WorkflowServiceGetCurrentDeploymentOperationName), h.SetCurrentDeployment(WorkflowServiceSetCurrentDeploymentOperationName), h.UpdateWorkflowExecution(WorkflowServiceUpdateWorkflowExecutionOperationName), h.PollWorkflowExecutionUpdate(WorkflowServicePollWorkflowExecutionUpdateOperationName), h.StartBatchOperation(WorkflowServiceStartBatchOperationOperationName), h.StopBatchOperation(WorkflowServiceStopBatchOperationOperationName), h.DescribeBatchOperation(WorkflowServiceDescribeBatchOperationOperationName), h.ListBatchOperations(WorkflowServiceListBatchOperationsOperationName), h.PollNexusTaskQueue(WorkflowServicePollNexusTaskQueueOperationName), h.RespondNexusTaskCompleted(WorkflowServiceRespondNexusTaskCompletedOperationName), h.RespondNexusTaskFailed(WorkflowServiceRespondNexusTaskFailedOperationName), h.UpdateActivityOptionsById(WorkflowServiceUpdateActivityOptionsByIdOperationName), h.UpdateWorkflowExecutionOptions(WorkflowServiceUpdateWorkflowExecutionOptionsOperationName), h.PauseActivityById(WorkflowServicePauseActivityByIdOperationName), h.UnpauseActivityById(WorkflowServiceUnpauseActivityByIdOperationName), h.ResetActivityById(WorkflowServiceResetActivityByIdOperationName))
	if err != nil {
		return nil, err
	}
	return svc, nil
}

type UnimplementedWorkflowServiceNexusHandler struct{}

func (h *UnimplementedWorkflowServiceNexusHandler) mustEmbedUnimplementedWorkflowServiceNexusHandler() {
}
func (h *UnimplementedWorkflowServiceNexusHandler) RegisterNamespace(name string) nexus.Operation[*v1.RegisterNamespaceRequest, *v1.RegisterNamespaceResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) DescribeNamespace(name string) nexus.Operation[*v1.DescribeNamespaceRequest, *v1.DescribeNamespaceResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListNamespaces(name string) nexus.Operation[*v1.ListNamespacesRequest, *v1.ListNamespacesResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) UpdateNamespace(name string) nexus.Operation[*v1.UpdateNamespaceRequest, *v1.UpdateNamespaceResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) DeprecateNamespace(name string) nexus.Operation[*v1.DeprecateNamespaceRequest, *v1.DeprecateNamespaceResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) StartWorkflowExecution(name string) nexus.Operation[*v1.StartWorkflowExecutionRequest, *v1.StartWorkflowExecutionResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ExecuteMultiOperation(name string) nexus.Operation[*v1.ExecuteMultiOperationRequest, *v1.ExecuteMultiOperationResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetWorkflowExecutionHistory(name string) nexus.Operation[*v1.GetWorkflowExecutionHistoryRequest, *v1.GetWorkflowExecutionHistoryResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetWorkflowExecutionHistoryReverse(name string) nexus.Operation[*v1.GetWorkflowExecutionHistoryReverseRequest, *v1.GetWorkflowExecutionHistoryReverseResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) PollWorkflowTaskQueue(name string) nexus.Operation[*v1.PollWorkflowTaskQueueRequest, *v1.PollWorkflowTaskQueueResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondWorkflowTaskCompleted(name string) nexus.Operation[*v1.RespondWorkflowTaskCompletedRequest, *v1.RespondWorkflowTaskCompletedResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondWorkflowTaskFailed(name string) nexus.Operation[*v1.RespondWorkflowTaskFailedRequest, *v1.RespondWorkflowTaskFailedResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) PollActivityTaskQueue(name string) nexus.Operation[*v1.PollActivityTaskQueueRequest, *v1.PollActivityTaskQueueResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RecordActivityTaskHeartbeat(name string) nexus.Operation[*v1.RecordActivityTaskHeartbeatRequest, *v1.RecordActivityTaskHeartbeatResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RecordActivityTaskHeartbeatById(name string) nexus.Operation[*v1.RecordActivityTaskHeartbeatByIdRequest, *v1.RecordActivityTaskHeartbeatByIdResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondActivityTaskCompleted(name string) nexus.Operation[*v1.RespondActivityTaskCompletedRequest, *v1.RespondActivityTaskCompletedResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondActivityTaskCompletedById(name string) nexus.Operation[*v1.RespondActivityTaskCompletedByIdRequest, *v1.RespondActivityTaskCompletedByIdResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondActivityTaskFailed(name string) nexus.Operation[*v1.RespondActivityTaskFailedRequest, *v1.RespondActivityTaskFailedResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondActivityTaskFailedById(name string) nexus.Operation[*v1.RespondActivityTaskFailedByIdRequest, *v1.RespondActivityTaskFailedByIdResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondActivityTaskCanceled(name string) nexus.Operation[*v1.RespondActivityTaskCanceledRequest, *v1.RespondActivityTaskCanceledResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondActivityTaskCanceledById(name string) nexus.Operation[*v1.RespondActivityTaskCanceledByIdRequest, *v1.RespondActivityTaskCanceledByIdResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RequestCancelWorkflowExecution(name string) nexus.Operation[*v1.RequestCancelWorkflowExecutionRequest, *v1.RequestCancelWorkflowExecutionResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) SignalWorkflowExecution(name string) nexus.Operation[*v1.SignalWorkflowExecutionRequest, *v1.SignalWorkflowExecutionResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) SignalWithStartWorkflowExecution(name string) nexus.Operation[*v1.SignalWithStartWorkflowExecutionRequest, *v1.SignalWithStartWorkflowExecutionResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ResetWorkflowExecution(name string) nexus.Operation[*v1.ResetWorkflowExecutionRequest, *v1.ResetWorkflowExecutionResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) TerminateWorkflowExecution(name string) nexus.Operation[*v1.TerminateWorkflowExecutionRequest, *v1.TerminateWorkflowExecutionResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) DeleteWorkflowExecution(name string) nexus.Operation[*v1.DeleteWorkflowExecutionRequest, *v1.DeleteWorkflowExecutionResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListOpenWorkflowExecutions(name string) nexus.Operation[*v1.ListOpenWorkflowExecutionsRequest, *v1.ListOpenWorkflowExecutionsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListClosedWorkflowExecutions(name string) nexus.Operation[*v1.ListClosedWorkflowExecutionsRequest, *v1.ListClosedWorkflowExecutionsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListWorkflowExecutions(name string) nexus.Operation[*v1.ListWorkflowExecutionsRequest, *v1.ListWorkflowExecutionsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListArchivedWorkflowExecutions(name string) nexus.Operation[*v1.ListArchivedWorkflowExecutionsRequest, *v1.ListArchivedWorkflowExecutionsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ScanWorkflowExecutions(name string) nexus.Operation[*v1.ScanWorkflowExecutionsRequest, *v1.ScanWorkflowExecutionsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) CountWorkflowExecutions(name string) nexus.Operation[*v1.CountWorkflowExecutionsRequest, *v1.CountWorkflowExecutionsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetSearchAttributes(name string) nexus.Operation[*v1.GetSearchAttributesRequest, *v1.GetSearchAttributesResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondQueryTaskCompleted(name string) nexus.Operation[*v1.RespondQueryTaskCompletedRequest, *v1.RespondQueryTaskCompletedResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ResetStickyTaskQueue(name string) nexus.Operation[*v1.ResetStickyTaskQueueRequest, *v1.ResetStickyTaskQueueResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ShutdownWorker(name string) nexus.Operation[*v1.ShutdownWorkerRequest, *v1.ShutdownWorkerResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) QueryWorkflow(name string) nexus.Operation[*v1.QueryWorkflowRequest, *v1.QueryWorkflowResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) DescribeWorkflowExecution(name string) nexus.Operation[*v1.DescribeWorkflowExecutionRequest, *v1.DescribeWorkflowExecutionResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) DescribeTaskQueue(name string) nexus.Operation[*v1.DescribeTaskQueueRequest, *v1.DescribeTaskQueueResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetClusterInfo(name string) nexus.Operation[*v1.GetClusterInfoRequest, *v1.GetClusterInfoResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetSystemInfo(name string) nexus.Operation[*v1.GetSystemInfoRequest, *v1.GetSystemInfoResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListTaskQueuePartitions(name string) nexus.Operation[*v1.ListTaskQueuePartitionsRequest, *v1.ListTaskQueuePartitionsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) CreateSchedule(name string) nexus.Operation[*v1.CreateScheduleRequest, *v1.CreateScheduleResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) DescribeSchedule(name string) nexus.Operation[*v1.DescribeScheduleRequest, *v1.DescribeScheduleResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) UpdateSchedule(name string) nexus.Operation[*v1.UpdateScheduleRequest, *v1.UpdateScheduleResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) PatchSchedule(name string) nexus.Operation[*v1.PatchScheduleRequest, *v1.PatchScheduleResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListScheduleMatchingTimes(name string) nexus.Operation[*v1.ListScheduleMatchingTimesRequest, *v1.ListScheduleMatchingTimesResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) DeleteSchedule(name string) nexus.Operation[*v1.DeleteScheduleRequest, *v1.DeleteScheduleResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListSchedules(name string) nexus.Operation[*v1.ListSchedulesRequest, *v1.ListSchedulesResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) UpdateWorkerBuildIdCompatibility(name string) nexus.Operation[*v1.UpdateWorkerBuildIdCompatibilityRequest, *v1.UpdateWorkerBuildIdCompatibilityResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetWorkerBuildIdCompatibility(name string) nexus.Operation[*v1.GetWorkerBuildIdCompatibilityRequest, *v1.GetWorkerBuildIdCompatibilityResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) UpdateWorkerVersioningRules(name string) nexus.Operation[*v1.UpdateWorkerVersioningRulesRequest, *v1.UpdateWorkerVersioningRulesResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetWorkerVersioningRules(name string) nexus.Operation[*v1.GetWorkerVersioningRulesRequest, *v1.GetWorkerVersioningRulesResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetWorkerTaskReachability(name string) nexus.Operation[*v1.GetWorkerTaskReachabilityRequest, *v1.GetWorkerTaskReachabilityResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) DescribeDeployment(name string) nexus.Operation[*v1.DescribeDeploymentRequest, *v1.DescribeDeploymentResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListDeployments(name string) nexus.Operation[*v1.ListDeploymentsRequest, *v1.ListDeploymentsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetDeploymentReachability(name string) nexus.Operation[*v1.GetDeploymentReachabilityRequest, *v1.GetDeploymentReachabilityResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) GetCurrentDeployment(name string) nexus.Operation[*v1.GetCurrentDeploymentRequest, *v1.GetCurrentDeploymentResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) SetCurrentDeployment(name string) nexus.Operation[*v1.SetCurrentDeploymentRequest, *v1.SetCurrentDeploymentResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) UpdateWorkflowExecution(name string) nexus.Operation[*v1.UpdateWorkflowExecutionRequest, *v1.UpdateWorkflowExecutionResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) PollWorkflowExecutionUpdate(name string) nexus.Operation[*v1.PollWorkflowExecutionUpdateRequest, *v1.PollWorkflowExecutionUpdateResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) StartBatchOperation(name string) nexus.Operation[*v1.StartBatchOperationRequest, *v1.StartBatchOperationResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) StopBatchOperation(name string) nexus.Operation[*v1.StopBatchOperationRequest, *v1.StopBatchOperationResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) DescribeBatchOperation(name string) nexus.Operation[*v1.DescribeBatchOperationRequest, *v1.DescribeBatchOperationResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ListBatchOperations(name string) nexus.Operation[*v1.ListBatchOperationsRequest, *v1.ListBatchOperationsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) PollNexusTaskQueue(name string) nexus.Operation[*v1.PollNexusTaskQueueRequest, *v1.PollNexusTaskQueueResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondNexusTaskCompleted(name string) nexus.Operation[*v1.RespondNexusTaskCompletedRequest, *v1.RespondNexusTaskCompletedResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) RespondNexusTaskFailed(name string) nexus.Operation[*v1.RespondNexusTaskFailedRequest, *v1.RespondNexusTaskFailedResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) UpdateActivityOptionsById(name string) nexus.Operation[*v1.UpdateActivityOptionsByIdRequest, *v1.UpdateActivityOptionsByIdResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) UpdateWorkflowExecutionOptions(name string) nexus.Operation[*v1.UpdateWorkflowExecutionOptionsRequest, *v1.UpdateWorkflowExecutionOptionsResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) PauseActivityById(name string) nexus.Operation[*v1.PauseActivityByIdRequest, *v1.PauseActivityByIdResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) UnpauseActivityById(name string) nexus.Operation[*v1.UnpauseActivityByIdRequest, *v1.UnpauseActivityByIdResponse] {
	panic("TODO")
}
func (h *UnimplementedWorkflowServiceNexusHandler) ResetActivityById(name string) nexus.Operation[*v1.ResetActivityByIdRequest, *v1.ResetActivityByIdResponse] {
	panic("TODO")
}

type WorkflowServiceNexusHTTPClient struct {
	client nexus.HTTPClient
}

// NewWorkflowServiceNexusHTTPClient initializes a new WorkflowServiceNexusHTTPClient.
// options.Service is overridden with the defined proto service name.
func NewWorkflowServiceNexusHTTPClient(options nexus.HTTPClientOptions) (*WorkflowServiceNexusHTTPClient, error) {
	options.Service = WorkflowServiceServiceName
	if options.Serializer == nil {
		options.Serializer = nexusproto.Serializer(nexusproto.SerializerModePreferJSON)
	}
	client, err := nexus.NewHTTPClient(options)
	if err != nil {
		return nil, err
	}
	return &WorkflowServiceNexusHTTPClient{
		client: *client,
	}, nil
}

type WorkflowServiceRegisterNamespaceOperationStartResult struct {
	Successful *v1.RegisterNamespaceResponse
	Pending    *nexus.OperationHandle[*v1.RegisterNamespaceResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RegisterNamespaceAsync(ctx context.Context, input *v1.RegisterNamespaceRequest, options nexus.StartOperationOptions) (*WorkflowServiceRegisterNamespaceOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRegisterNamespaceOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRegisterNamespaceOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RegisterNamespace(ctx context.Context, input *v1.RegisterNamespaceRequest, options nexus.ExecuteOperationOptions) (*v1.RegisterNamespaceResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRegisterNamespaceOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRegisterNamespaceHandle(id string) (*nexus.OperationHandle[*v1.RegisterNamespaceResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRegisterNamespaceOperation, id)
}

type WorkflowServiceDescribeNamespaceOperationStartResult struct {
	Successful *v1.DescribeNamespaceResponse
	Pending    *nexus.OperationHandle[*v1.DescribeNamespaceResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) DescribeNamespaceAsync(ctx context.Context, input *v1.DescribeNamespaceRequest, options nexus.StartOperationOptions) (*WorkflowServiceDescribeNamespaceOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceDescribeNamespaceOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceDescribeNamespaceOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) DescribeNamespace(ctx context.Context, input *v1.DescribeNamespaceRequest, options nexus.ExecuteOperationOptions) (*v1.DescribeNamespaceResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceDescribeNamespaceOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewDescribeNamespaceHandle(id string) (*nexus.OperationHandle[*v1.DescribeNamespaceResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceDescribeNamespaceOperation, id)
}

type WorkflowServiceListNamespacesOperationStartResult struct {
	Successful *v1.ListNamespacesResponse
	Pending    *nexus.OperationHandle[*v1.ListNamespacesResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListNamespacesAsync(ctx context.Context, input *v1.ListNamespacesRequest, options nexus.StartOperationOptions) (*WorkflowServiceListNamespacesOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListNamespacesOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListNamespacesOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListNamespaces(ctx context.Context, input *v1.ListNamespacesRequest, options nexus.ExecuteOperationOptions) (*v1.ListNamespacesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListNamespacesOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListNamespacesHandle(id string) (*nexus.OperationHandle[*v1.ListNamespacesResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListNamespacesOperation, id)
}

type WorkflowServiceUpdateNamespaceOperationStartResult struct {
	Successful *v1.UpdateNamespaceResponse
	Pending    *nexus.OperationHandle[*v1.UpdateNamespaceResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) UpdateNamespaceAsync(ctx context.Context, input *v1.UpdateNamespaceRequest, options nexus.StartOperationOptions) (*WorkflowServiceUpdateNamespaceOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceUpdateNamespaceOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceUpdateNamespaceOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) UpdateNamespace(ctx context.Context, input *v1.UpdateNamespaceRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateNamespaceResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceUpdateNamespaceOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewUpdateNamespaceHandle(id string) (*nexus.OperationHandle[*v1.UpdateNamespaceResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceUpdateNamespaceOperation, id)
}

type WorkflowServiceDeprecateNamespaceOperationStartResult struct {
	Successful *v1.DeprecateNamespaceResponse
	Pending    *nexus.OperationHandle[*v1.DeprecateNamespaceResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) DeprecateNamespaceAsync(ctx context.Context, input *v1.DeprecateNamespaceRequest, options nexus.StartOperationOptions) (*WorkflowServiceDeprecateNamespaceOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceDeprecateNamespaceOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceDeprecateNamespaceOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) DeprecateNamespace(ctx context.Context, input *v1.DeprecateNamespaceRequest, options nexus.ExecuteOperationOptions) (*v1.DeprecateNamespaceResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceDeprecateNamespaceOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewDeprecateNamespaceHandle(id string) (*nexus.OperationHandle[*v1.DeprecateNamespaceResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceDeprecateNamespaceOperation, id)
}

type WorkflowServiceStartWorkflowExecutionOperationStartResult struct {
	Successful *v1.StartWorkflowExecutionResponse
	Pending    *nexus.OperationHandle[*v1.StartWorkflowExecutionResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) StartWorkflowExecutionAsync(ctx context.Context, input *v1.StartWorkflowExecutionRequest, options nexus.StartOperationOptions) (*WorkflowServiceStartWorkflowExecutionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceStartWorkflowExecutionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceStartWorkflowExecutionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) StartWorkflowExecution(ctx context.Context, input *v1.StartWorkflowExecutionRequest, options nexus.ExecuteOperationOptions) (*v1.StartWorkflowExecutionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceStartWorkflowExecutionOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewStartWorkflowExecutionHandle(id string) (*nexus.OperationHandle[*v1.StartWorkflowExecutionResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceStartWorkflowExecutionOperation, id)
}

type WorkflowServiceExecuteMultiOperationOperationStartResult struct {
	Successful *v1.ExecuteMultiOperationResponse
	Pending    *nexus.OperationHandle[*v1.ExecuteMultiOperationResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ExecuteMultiOperationAsync(ctx context.Context, input *v1.ExecuteMultiOperationRequest, options nexus.StartOperationOptions) (*WorkflowServiceExecuteMultiOperationOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceExecuteMultiOperationOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceExecuteMultiOperationOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ExecuteMultiOperation(ctx context.Context, input *v1.ExecuteMultiOperationRequest, options nexus.ExecuteOperationOptions) (*v1.ExecuteMultiOperationResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceExecuteMultiOperationOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewExecuteMultiOperationHandle(id string) (*nexus.OperationHandle[*v1.ExecuteMultiOperationResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceExecuteMultiOperationOperation, id)
}

type WorkflowServiceGetWorkflowExecutionHistoryOperationStartResult struct {
	Successful *v1.GetWorkflowExecutionHistoryResponse
	Pending    *nexus.OperationHandle[*v1.GetWorkflowExecutionHistoryResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetWorkflowExecutionHistoryAsync(ctx context.Context, input *v1.GetWorkflowExecutionHistoryRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetWorkflowExecutionHistoryOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetWorkflowExecutionHistoryOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetWorkflowExecutionHistoryOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetWorkflowExecutionHistory(ctx context.Context, input *v1.GetWorkflowExecutionHistoryRequest, options nexus.ExecuteOperationOptions) (*v1.GetWorkflowExecutionHistoryResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetWorkflowExecutionHistoryOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetWorkflowExecutionHistoryHandle(id string) (*nexus.OperationHandle[*v1.GetWorkflowExecutionHistoryResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetWorkflowExecutionHistoryOperation, id)
}

type WorkflowServiceGetWorkflowExecutionHistoryReverseOperationStartResult struct {
	Successful *v1.GetWorkflowExecutionHistoryReverseResponse
	Pending    *nexus.OperationHandle[*v1.GetWorkflowExecutionHistoryReverseResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetWorkflowExecutionHistoryReverseAsync(ctx context.Context, input *v1.GetWorkflowExecutionHistoryReverseRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetWorkflowExecutionHistoryReverseOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetWorkflowExecutionHistoryReverseOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetWorkflowExecutionHistoryReverseOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetWorkflowExecutionHistoryReverse(ctx context.Context, input *v1.GetWorkflowExecutionHistoryReverseRequest, options nexus.ExecuteOperationOptions) (*v1.GetWorkflowExecutionHistoryReverseResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetWorkflowExecutionHistoryReverseOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetWorkflowExecutionHistoryReverseHandle(id string) (*nexus.OperationHandle[*v1.GetWorkflowExecutionHistoryReverseResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetWorkflowExecutionHistoryReverseOperation, id)
}

type WorkflowServicePollWorkflowTaskQueueOperationStartResult struct {
	Successful *v1.PollWorkflowTaskQueueResponse
	Pending    *nexus.OperationHandle[*v1.PollWorkflowTaskQueueResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) PollWorkflowTaskQueueAsync(ctx context.Context, input *v1.PollWorkflowTaskQueueRequest, options nexus.StartOperationOptions) (*WorkflowServicePollWorkflowTaskQueueOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServicePollWorkflowTaskQueueOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServicePollWorkflowTaskQueueOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) PollWorkflowTaskQueue(ctx context.Context, input *v1.PollWorkflowTaskQueueRequest, options nexus.ExecuteOperationOptions) (*v1.PollWorkflowTaskQueueResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServicePollWorkflowTaskQueueOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewPollWorkflowTaskQueueHandle(id string) (*nexus.OperationHandle[*v1.PollWorkflowTaskQueueResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServicePollWorkflowTaskQueueOperation, id)
}

type WorkflowServiceRespondWorkflowTaskCompletedOperationStartResult struct {
	Successful *v1.RespondWorkflowTaskCompletedResponse
	Pending    *nexus.OperationHandle[*v1.RespondWorkflowTaskCompletedResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondWorkflowTaskCompletedAsync(ctx context.Context, input *v1.RespondWorkflowTaskCompletedRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondWorkflowTaskCompletedOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondWorkflowTaskCompletedOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondWorkflowTaskCompletedOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondWorkflowTaskCompleted(ctx context.Context, input *v1.RespondWorkflowTaskCompletedRequest, options nexus.ExecuteOperationOptions) (*v1.RespondWorkflowTaskCompletedResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondWorkflowTaskCompletedOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondWorkflowTaskCompletedHandle(id string) (*nexus.OperationHandle[*v1.RespondWorkflowTaskCompletedResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondWorkflowTaskCompletedOperation, id)
}

type WorkflowServiceRespondWorkflowTaskFailedOperationStartResult struct {
	Successful *v1.RespondWorkflowTaskFailedResponse
	Pending    *nexus.OperationHandle[*v1.RespondWorkflowTaskFailedResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondWorkflowTaskFailedAsync(ctx context.Context, input *v1.RespondWorkflowTaskFailedRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondWorkflowTaskFailedOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondWorkflowTaskFailedOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondWorkflowTaskFailedOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondWorkflowTaskFailed(ctx context.Context, input *v1.RespondWorkflowTaskFailedRequest, options nexus.ExecuteOperationOptions) (*v1.RespondWorkflowTaskFailedResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondWorkflowTaskFailedOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondWorkflowTaskFailedHandle(id string) (*nexus.OperationHandle[*v1.RespondWorkflowTaskFailedResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondWorkflowTaskFailedOperation, id)
}

type WorkflowServicePollActivityTaskQueueOperationStartResult struct {
	Successful *v1.PollActivityTaskQueueResponse
	Pending    *nexus.OperationHandle[*v1.PollActivityTaskQueueResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) PollActivityTaskQueueAsync(ctx context.Context, input *v1.PollActivityTaskQueueRequest, options nexus.StartOperationOptions) (*WorkflowServicePollActivityTaskQueueOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServicePollActivityTaskQueueOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServicePollActivityTaskQueueOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) PollActivityTaskQueue(ctx context.Context, input *v1.PollActivityTaskQueueRequest, options nexus.ExecuteOperationOptions) (*v1.PollActivityTaskQueueResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServicePollActivityTaskQueueOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewPollActivityTaskQueueHandle(id string) (*nexus.OperationHandle[*v1.PollActivityTaskQueueResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServicePollActivityTaskQueueOperation, id)
}

type WorkflowServiceRecordActivityTaskHeartbeatOperationStartResult struct {
	Successful *v1.RecordActivityTaskHeartbeatResponse
	Pending    *nexus.OperationHandle[*v1.RecordActivityTaskHeartbeatResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RecordActivityTaskHeartbeatAsync(ctx context.Context, input *v1.RecordActivityTaskHeartbeatRequest, options nexus.StartOperationOptions) (*WorkflowServiceRecordActivityTaskHeartbeatOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRecordActivityTaskHeartbeatOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRecordActivityTaskHeartbeatOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RecordActivityTaskHeartbeat(ctx context.Context, input *v1.RecordActivityTaskHeartbeatRequest, options nexus.ExecuteOperationOptions) (*v1.RecordActivityTaskHeartbeatResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRecordActivityTaskHeartbeatOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRecordActivityTaskHeartbeatHandle(id string) (*nexus.OperationHandle[*v1.RecordActivityTaskHeartbeatResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRecordActivityTaskHeartbeatOperation, id)
}

type WorkflowServiceRecordActivityTaskHeartbeatByIdOperationStartResult struct {
	Successful *v1.RecordActivityTaskHeartbeatByIdResponse
	Pending    *nexus.OperationHandle[*v1.RecordActivityTaskHeartbeatByIdResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RecordActivityTaskHeartbeatByIdAsync(ctx context.Context, input *v1.RecordActivityTaskHeartbeatByIdRequest, options nexus.StartOperationOptions) (*WorkflowServiceRecordActivityTaskHeartbeatByIdOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRecordActivityTaskHeartbeatByIdOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRecordActivityTaskHeartbeatByIdOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RecordActivityTaskHeartbeatById(ctx context.Context, input *v1.RecordActivityTaskHeartbeatByIdRequest, options nexus.ExecuteOperationOptions) (*v1.RecordActivityTaskHeartbeatByIdResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRecordActivityTaskHeartbeatByIdOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRecordActivityTaskHeartbeatByIdHandle(id string) (*nexus.OperationHandle[*v1.RecordActivityTaskHeartbeatByIdResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRecordActivityTaskHeartbeatByIdOperation, id)
}

type WorkflowServiceRespondActivityTaskCompletedOperationStartResult struct {
	Successful *v1.RespondActivityTaskCompletedResponse
	Pending    *nexus.OperationHandle[*v1.RespondActivityTaskCompletedResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskCompletedAsync(ctx context.Context, input *v1.RespondActivityTaskCompletedRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondActivityTaskCompletedOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskCompletedOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondActivityTaskCompletedOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskCompleted(ctx context.Context, input *v1.RespondActivityTaskCompletedRequest, options nexus.ExecuteOperationOptions) (*v1.RespondActivityTaskCompletedResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskCompletedOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondActivityTaskCompletedHandle(id string) (*nexus.OperationHandle[*v1.RespondActivityTaskCompletedResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondActivityTaskCompletedOperation, id)
}

type WorkflowServiceRespondActivityTaskCompletedByIdOperationStartResult struct {
	Successful *v1.RespondActivityTaskCompletedByIdResponse
	Pending    *nexus.OperationHandle[*v1.RespondActivityTaskCompletedByIdResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskCompletedByIdAsync(ctx context.Context, input *v1.RespondActivityTaskCompletedByIdRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondActivityTaskCompletedByIdOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskCompletedByIdOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondActivityTaskCompletedByIdOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskCompletedById(ctx context.Context, input *v1.RespondActivityTaskCompletedByIdRequest, options nexus.ExecuteOperationOptions) (*v1.RespondActivityTaskCompletedByIdResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskCompletedByIdOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondActivityTaskCompletedByIdHandle(id string) (*nexus.OperationHandle[*v1.RespondActivityTaskCompletedByIdResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondActivityTaskCompletedByIdOperation, id)
}

type WorkflowServiceRespondActivityTaskFailedOperationStartResult struct {
	Successful *v1.RespondActivityTaskFailedResponse
	Pending    *nexus.OperationHandle[*v1.RespondActivityTaskFailedResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskFailedAsync(ctx context.Context, input *v1.RespondActivityTaskFailedRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondActivityTaskFailedOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskFailedOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondActivityTaskFailedOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskFailed(ctx context.Context, input *v1.RespondActivityTaskFailedRequest, options nexus.ExecuteOperationOptions) (*v1.RespondActivityTaskFailedResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskFailedOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondActivityTaskFailedHandle(id string) (*nexus.OperationHandle[*v1.RespondActivityTaskFailedResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondActivityTaskFailedOperation, id)
}

type WorkflowServiceRespondActivityTaskFailedByIdOperationStartResult struct {
	Successful *v1.RespondActivityTaskFailedByIdResponse
	Pending    *nexus.OperationHandle[*v1.RespondActivityTaskFailedByIdResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskFailedByIdAsync(ctx context.Context, input *v1.RespondActivityTaskFailedByIdRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondActivityTaskFailedByIdOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskFailedByIdOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondActivityTaskFailedByIdOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskFailedById(ctx context.Context, input *v1.RespondActivityTaskFailedByIdRequest, options nexus.ExecuteOperationOptions) (*v1.RespondActivityTaskFailedByIdResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskFailedByIdOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondActivityTaskFailedByIdHandle(id string) (*nexus.OperationHandle[*v1.RespondActivityTaskFailedByIdResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondActivityTaskFailedByIdOperation, id)
}

type WorkflowServiceRespondActivityTaskCanceledOperationStartResult struct {
	Successful *v1.RespondActivityTaskCanceledResponse
	Pending    *nexus.OperationHandle[*v1.RespondActivityTaskCanceledResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskCanceledAsync(ctx context.Context, input *v1.RespondActivityTaskCanceledRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondActivityTaskCanceledOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskCanceledOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondActivityTaskCanceledOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskCanceled(ctx context.Context, input *v1.RespondActivityTaskCanceledRequest, options nexus.ExecuteOperationOptions) (*v1.RespondActivityTaskCanceledResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskCanceledOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondActivityTaskCanceledHandle(id string) (*nexus.OperationHandle[*v1.RespondActivityTaskCanceledResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondActivityTaskCanceledOperation, id)
}

type WorkflowServiceRespondActivityTaskCanceledByIdOperationStartResult struct {
	Successful *v1.RespondActivityTaskCanceledByIdResponse
	Pending    *nexus.OperationHandle[*v1.RespondActivityTaskCanceledByIdResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskCanceledByIdAsync(ctx context.Context, input *v1.RespondActivityTaskCanceledByIdRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondActivityTaskCanceledByIdOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskCanceledByIdOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondActivityTaskCanceledByIdOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondActivityTaskCanceledById(ctx context.Context, input *v1.RespondActivityTaskCanceledByIdRequest, options nexus.ExecuteOperationOptions) (*v1.RespondActivityTaskCanceledByIdResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondActivityTaskCanceledByIdOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondActivityTaskCanceledByIdHandle(id string) (*nexus.OperationHandle[*v1.RespondActivityTaskCanceledByIdResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondActivityTaskCanceledByIdOperation, id)
}

type WorkflowServiceRequestCancelWorkflowExecutionOperationStartResult struct {
	Successful *v1.RequestCancelWorkflowExecutionResponse
	Pending    *nexus.OperationHandle[*v1.RequestCancelWorkflowExecutionResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RequestCancelWorkflowExecutionAsync(ctx context.Context, input *v1.RequestCancelWorkflowExecutionRequest, options nexus.StartOperationOptions) (*WorkflowServiceRequestCancelWorkflowExecutionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRequestCancelWorkflowExecutionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRequestCancelWorkflowExecutionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RequestCancelWorkflowExecution(ctx context.Context, input *v1.RequestCancelWorkflowExecutionRequest, options nexus.ExecuteOperationOptions) (*v1.RequestCancelWorkflowExecutionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRequestCancelWorkflowExecutionOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRequestCancelWorkflowExecutionHandle(id string) (*nexus.OperationHandle[*v1.RequestCancelWorkflowExecutionResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRequestCancelWorkflowExecutionOperation, id)
}

type WorkflowServiceSignalWorkflowExecutionOperationStartResult struct {
	Successful *v1.SignalWorkflowExecutionResponse
	Pending    *nexus.OperationHandle[*v1.SignalWorkflowExecutionResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) SignalWorkflowExecutionAsync(ctx context.Context, input *v1.SignalWorkflowExecutionRequest, options nexus.StartOperationOptions) (*WorkflowServiceSignalWorkflowExecutionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceSignalWorkflowExecutionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceSignalWorkflowExecutionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) SignalWorkflowExecution(ctx context.Context, input *v1.SignalWorkflowExecutionRequest, options nexus.ExecuteOperationOptions) (*v1.SignalWorkflowExecutionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceSignalWorkflowExecutionOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewSignalWorkflowExecutionHandle(id string) (*nexus.OperationHandle[*v1.SignalWorkflowExecutionResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceSignalWorkflowExecutionOperation, id)
}

type WorkflowServiceSignalWithStartWorkflowExecutionOperationStartResult struct {
	Successful *v1.SignalWithStartWorkflowExecutionResponse
	Pending    *nexus.OperationHandle[*v1.SignalWithStartWorkflowExecutionResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) SignalWithStartWorkflowExecutionAsync(ctx context.Context, input *v1.SignalWithStartWorkflowExecutionRequest, options nexus.StartOperationOptions) (*WorkflowServiceSignalWithStartWorkflowExecutionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceSignalWithStartWorkflowExecutionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceSignalWithStartWorkflowExecutionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) SignalWithStartWorkflowExecution(ctx context.Context, input *v1.SignalWithStartWorkflowExecutionRequest, options nexus.ExecuteOperationOptions) (*v1.SignalWithStartWorkflowExecutionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceSignalWithStartWorkflowExecutionOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewSignalWithStartWorkflowExecutionHandle(id string) (*nexus.OperationHandle[*v1.SignalWithStartWorkflowExecutionResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceSignalWithStartWorkflowExecutionOperation, id)
}

type WorkflowServiceResetWorkflowExecutionOperationStartResult struct {
	Successful *v1.ResetWorkflowExecutionResponse
	Pending    *nexus.OperationHandle[*v1.ResetWorkflowExecutionResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ResetWorkflowExecutionAsync(ctx context.Context, input *v1.ResetWorkflowExecutionRequest, options nexus.StartOperationOptions) (*WorkflowServiceResetWorkflowExecutionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceResetWorkflowExecutionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceResetWorkflowExecutionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ResetWorkflowExecution(ctx context.Context, input *v1.ResetWorkflowExecutionRequest, options nexus.ExecuteOperationOptions) (*v1.ResetWorkflowExecutionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceResetWorkflowExecutionOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewResetWorkflowExecutionHandle(id string) (*nexus.OperationHandle[*v1.ResetWorkflowExecutionResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceResetWorkflowExecutionOperation, id)
}

type WorkflowServiceTerminateWorkflowExecutionOperationStartResult struct {
	Successful *v1.TerminateWorkflowExecutionResponse
	Pending    *nexus.OperationHandle[*v1.TerminateWorkflowExecutionResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) TerminateWorkflowExecutionAsync(ctx context.Context, input *v1.TerminateWorkflowExecutionRequest, options nexus.StartOperationOptions) (*WorkflowServiceTerminateWorkflowExecutionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceTerminateWorkflowExecutionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceTerminateWorkflowExecutionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) TerminateWorkflowExecution(ctx context.Context, input *v1.TerminateWorkflowExecutionRequest, options nexus.ExecuteOperationOptions) (*v1.TerminateWorkflowExecutionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceTerminateWorkflowExecutionOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewTerminateWorkflowExecutionHandle(id string) (*nexus.OperationHandle[*v1.TerminateWorkflowExecutionResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceTerminateWorkflowExecutionOperation, id)
}

type WorkflowServiceDeleteWorkflowExecutionOperationStartResult struct {
	Successful *v1.DeleteWorkflowExecutionResponse
	Pending    *nexus.OperationHandle[*v1.DeleteWorkflowExecutionResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) DeleteWorkflowExecutionAsync(ctx context.Context, input *v1.DeleteWorkflowExecutionRequest, options nexus.StartOperationOptions) (*WorkflowServiceDeleteWorkflowExecutionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceDeleteWorkflowExecutionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceDeleteWorkflowExecutionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) DeleteWorkflowExecution(ctx context.Context, input *v1.DeleteWorkflowExecutionRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteWorkflowExecutionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceDeleteWorkflowExecutionOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewDeleteWorkflowExecutionHandle(id string) (*nexus.OperationHandle[*v1.DeleteWorkflowExecutionResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceDeleteWorkflowExecutionOperation, id)
}

type WorkflowServiceListOpenWorkflowExecutionsOperationStartResult struct {
	Successful *v1.ListOpenWorkflowExecutionsResponse
	Pending    *nexus.OperationHandle[*v1.ListOpenWorkflowExecutionsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListOpenWorkflowExecutionsAsync(ctx context.Context, input *v1.ListOpenWorkflowExecutionsRequest, options nexus.StartOperationOptions) (*WorkflowServiceListOpenWorkflowExecutionsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListOpenWorkflowExecutionsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListOpenWorkflowExecutionsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListOpenWorkflowExecutions(ctx context.Context, input *v1.ListOpenWorkflowExecutionsRequest, options nexus.ExecuteOperationOptions) (*v1.ListOpenWorkflowExecutionsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListOpenWorkflowExecutionsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListOpenWorkflowExecutionsHandle(id string) (*nexus.OperationHandle[*v1.ListOpenWorkflowExecutionsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListOpenWorkflowExecutionsOperation, id)
}

type WorkflowServiceListClosedWorkflowExecutionsOperationStartResult struct {
	Successful *v1.ListClosedWorkflowExecutionsResponse
	Pending    *nexus.OperationHandle[*v1.ListClosedWorkflowExecutionsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListClosedWorkflowExecutionsAsync(ctx context.Context, input *v1.ListClosedWorkflowExecutionsRequest, options nexus.StartOperationOptions) (*WorkflowServiceListClosedWorkflowExecutionsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListClosedWorkflowExecutionsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListClosedWorkflowExecutionsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListClosedWorkflowExecutions(ctx context.Context, input *v1.ListClosedWorkflowExecutionsRequest, options nexus.ExecuteOperationOptions) (*v1.ListClosedWorkflowExecutionsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListClosedWorkflowExecutionsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListClosedWorkflowExecutionsHandle(id string) (*nexus.OperationHandle[*v1.ListClosedWorkflowExecutionsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListClosedWorkflowExecutionsOperation, id)
}

type WorkflowServiceListWorkflowExecutionsOperationStartResult struct {
	Successful *v1.ListWorkflowExecutionsResponse
	Pending    *nexus.OperationHandle[*v1.ListWorkflowExecutionsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListWorkflowExecutionsAsync(ctx context.Context, input *v1.ListWorkflowExecutionsRequest, options nexus.StartOperationOptions) (*WorkflowServiceListWorkflowExecutionsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListWorkflowExecutionsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListWorkflowExecutionsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListWorkflowExecutions(ctx context.Context, input *v1.ListWorkflowExecutionsRequest, options nexus.ExecuteOperationOptions) (*v1.ListWorkflowExecutionsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListWorkflowExecutionsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListWorkflowExecutionsHandle(id string) (*nexus.OperationHandle[*v1.ListWorkflowExecutionsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListWorkflowExecutionsOperation, id)
}

type WorkflowServiceListArchivedWorkflowExecutionsOperationStartResult struct {
	Successful *v1.ListArchivedWorkflowExecutionsResponse
	Pending    *nexus.OperationHandle[*v1.ListArchivedWorkflowExecutionsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListArchivedWorkflowExecutionsAsync(ctx context.Context, input *v1.ListArchivedWorkflowExecutionsRequest, options nexus.StartOperationOptions) (*WorkflowServiceListArchivedWorkflowExecutionsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListArchivedWorkflowExecutionsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListArchivedWorkflowExecutionsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListArchivedWorkflowExecutions(ctx context.Context, input *v1.ListArchivedWorkflowExecutionsRequest, options nexus.ExecuteOperationOptions) (*v1.ListArchivedWorkflowExecutionsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListArchivedWorkflowExecutionsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListArchivedWorkflowExecutionsHandle(id string) (*nexus.OperationHandle[*v1.ListArchivedWorkflowExecutionsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListArchivedWorkflowExecutionsOperation, id)
}

type WorkflowServiceScanWorkflowExecutionsOperationStartResult struct {
	Successful *v1.ScanWorkflowExecutionsResponse
	Pending    *nexus.OperationHandle[*v1.ScanWorkflowExecutionsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ScanWorkflowExecutionsAsync(ctx context.Context, input *v1.ScanWorkflowExecutionsRequest, options nexus.StartOperationOptions) (*WorkflowServiceScanWorkflowExecutionsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceScanWorkflowExecutionsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceScanWorkflowExecutionsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ScanWorkflowExecutions(ctx context.Context, input *v1.ScanWorkflowExecutionsRequest, options nexus.ExecuteOperationOptions) (*v1.ScanWorkflowExecutionsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceScanWorkflowExecutionsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewScanWorkflowExecutionsHandle(id string) (*nexus.OperationHandle[*v1.ScanWorkflowExecutionsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceScanWorkflowExecutionsOperation, id)
}

type WorkflowServiceCountWorkflowExecutionsOperationStartResult struct {
	Successful *v1.CountWorkflowExecutionsResponse
	Pending    *nexus.OperationHandle[*v1.CountWorkflowExecutionsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) CountWorkflowExecutionsAsync(ctx context.Context, input *v1.CountWorkflowExecutionsRequest, options nexus.StartOperationOptions) (*WorkflowServiceCountWorkflowExecutionsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceCountWorkflowExecutionsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceCountWorkflowExecutionsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) CountWorkflowExecutions(ctx context.Context, input *v1.CountWorkflowExecutionsRequest, options nexus.ExecuteOperationOptions) (*v1.CountWorkflowExecutionsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceCountWorkflowExecutionsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewCountWorkflowExecutionsHandle(id string) (*nexus.OperationHandle[*v1.CountWorkflowExecutionsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceCountWorkflowExecutionsOperation, id)
}

type WorkflowServiceGetSearchAttributesOperationStartResult struct {
	Successful *v1.GetSearchAttributesResponse
	Pending    *nexus.OperationHandle[*v1.GetSearchAttributesResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetSearchAttributesAsync(ctx context.Context, input *v1.GetSearchAttributesRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetSearchAttributesOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetSearchAttributesOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetSearchAttributesOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetSearchAttributes(ctx context.Context, input *v1.GetSearchAttributesRequest, options nexus.ExecuteOperationOptions) (*v1.GetSearchAttributesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetSearchAttributesOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetSearchAttributesHandle(id string) (*nexus.OperationHandle[*v1.GetSearchAttributesResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetSearchAttributesOperation, id)
}

type WorkflowServiceRespondQueryTaskCompletedOperationStartResult struct {
	Successful *v1.RespondQueryTaskCompletedResponse
	Pending    *nexus.OperationHandle[*v1.RespondQueryTaskCompletedResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondQueryTaskCompletedAsync(ctx context.Context, input *v1.RespondQueryTaskCompletedRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondQueryTaskCompletedOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondQueryTaskCompletedOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondQueryTaskCompletedOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondQueryTaskCompleted(ctx context.Context, input *v1.RespondQueryTaskCompletedRequest, options nexus.ExecuteOperationOptions) (*v1.RespondQueryTaskCompletedResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondQueryTaskCompletedOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondQueryTaskCompletedHandle(id string) (*nexus.OperationHandle[*v1.RespondQueryTaskCompletedResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondQueryTaskCompletedOperation, id)
}

type WorkflowServiceResetStickyTaskQueueOperationStartResult struct {
	Successful *v1.ResetStickyTaskQueueResponse
	Pending    *nexus.OperationHandle[*v1.ResetStickyTaskQueueResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ResetStickyTaskQueueAsync(ctx context.Context, input *v1.ResetStickyTaskQueueRequest, options nexus.StartOperationOptions) (*WorkflowServiceResetStickyTaskQueueOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceResetStickyTaskQueueOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceResetStickyTaskQueueOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ResetStickyTaskQueue(ctx context.Context, input *v1.ResetStickyTaskQueueRequest, options nexus.ExecuteOperationOptions) (*v1.ResetStickyTaskQueueResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceResetStickyTaskQueueOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewResetStickyTaskQueueHandle(id string) (*nexus.OperationHandle[*v1.ResetStickyTaskQueueResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceResetStickyTaskQueueOperation, id)
}

type WorkflowServiceShutdownWorkerOperationStartResult struct {
	Successful *v1.ShutdownWorkerResponse
	Pending    *nexus.OperationHandle[*v1.ShutdownWorkerResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ShutdownWorkerAsync(ctx context.Context, input *v1.ShutdownWorkerRequest, options nexus.StartOperationOptions) (*WorkflowServiceShutdownWorkerOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceShutdownWorkerOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceShutdownWorkerOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ShutdownWorker(ctx context.Context, input *v1.ShutdownWorkerRequest, options nexus.ExecuteOperationOptions) (*v1.ShutdownWorkerResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceShutdownWorkerOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewShutdownWorkerHandle(id string) (*nexus.OperationHandle[*v1.ShutdownWorkerResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceShutdownWorkerOperation, id)
}

type WorkflowServiceQueryWorkflowOperationStartResult struct {
	Successful *v1.QueryWorkflowResponse
	Pending    *nexus.OperationHandle[*v1.QueryWorkflowResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) QueryWorkflowAsync(ctx context.Context, input *v1.QueryWorkflowRequest, options nexus.StartOperationOptions) (*WorkflowServiceQueryWorkflowOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceQueryWorkflowOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceQueryWorkflowOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) QueryWorkflow(ctx context.Context, input *v1.QueryWorkflowRequest, options nexus.ExecuteOperationOptions) (*v1.QueryWorkflowResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceQueryWorkflowOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewQueryWorkflowHandle(id string) (*nexus.OperationHandle[*v1.QueryWorkflowResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceQueryWorkflowOperation, id)
}

type WorkflowServiceDescribeWorkflowExecutionOperationStartResult struct {
	Successful *v1.DescribeWorkflowExecutionResponse
	Pending    *nexus.OperationHandle[*v1.DescribeWorkflowExecutionResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) DescribeWorkflowExecutionAsync(ctx context.Context, input *v1.DescribeWorkflowExecutionRequest, options nexus.StartOperationOptions) (*WorkflowServiceDescribeWorkflowExecutionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceDescribeWorkflowExecutionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceDescribeWorkflowExecutionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) DescribeWorkflowExecution(ctx context.Context, input *v1.DescribeWorkflowExecutionRequest, options nexus.ExecuteOperationOptions) (*v1.DescribeWorkflowExecutionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceDescribeWorkflowExecutionOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewDescribeWorkflowExecutionHandle(id string) (*nexus.OperationHandle[*v1.DescribeWorkflowExecutionResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceDescribeWorkflowExecutionOperation, id)
}

type WorkflowServiceDescribeTaskQueueOperationStartResult struct {
	Successful *v1.DescribeTaskQueueResponse
	Pending    *nexus.OperationHandle[*v1.DescribeTaskQueueResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) DescribeTaskQueueAsync(ctx context.Context, input *v1.DescribeTaskQueueRequest, options nexus.StartOperationOptions) (*WorkflowServiceDescribeTaskQueueOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceDescribeTaskQueueOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceDescribeTaskQueueOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) DescribeTaskQueue(ctx context.Context, input *v1.DescribeTaskQueueRequest, options nexus.ExecuteOperationOptions) (*v1.DescribeTaskQueueResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceDescribeTaskQueueOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewDescribeTaskQueueHandle(id string) (*nexus.OperationHandle[*v1.DescribeTaskQueueResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceDescribeTaskQueueOperation, id)
}

type WorkflowServiceGetClusterInfoOperationStartResult struct {
	Successful *v1.GetClusterInfoResponse
	Pending    *nexus.OperationHandle[*v1.GetClusterInfoResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetClusterInfoAsync(ctx context.Context, input *v1.GetClusterInfoRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetClusterInfoOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetClusterInfoOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetClusterInfoOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetClusterInfo(ctx context.Context, input *v1.GetClusterInfoRequest, options nexus.ExecuteOperationOptions) (*v1.GetClusterInfoResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetClusterInfoOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetClusterInfoHandle(id string) (*nexus.OperationHandle[*v1.GetClusterInfoResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetClusterInfoOperation, id)
}

type WorkflowServiceGetSystemInfoOperationStartResult struct {
	Successful *v1.GetSystemInfoResponse
	Pending    *nexus.OperationHandle[*v1.GetSystemInfoResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetSystemInfoAsync(ctx context.Context, input *v1.GetSystemInfoRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetSystemInfoOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetSystemInfoOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetSystemInfoOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetSystemInfo(ctx context.Context, input *v1.GetSystemInfoRequest, options nexus.ExecuteOperationOptions) (*v1.GetSystemInfoResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetSystemInfoOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetSystemInfoHandle(id string) (*nexus.OperationHandle[*v1.GetSystemInfoResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetSystemInfoOperation, id)
}

type WorkflowServiceListTaskQueuePartitionsOperationStartResult struct {
	Successful *v1.ListTaskQueuePartitionsResponse
	Pending    *nexus.OperationHandle[*v1.ListTaskQueuePartitionsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListTaskQueuePartitionsAsync(ctx context.Context, input *v1.ListTaskQueuePartitionsRequest, options nexus.StartOperationOptions) (*WorkflowServiceListTaskQueuePartitionsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListTaskQueuePartitionsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListTaskQueuePartitionsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListTaskQueuePartitions(ctx context.Context, input *v1.ListTaskQueuePartitionsRequest, options nexus.ExecuteOperationOptions) (*v1.ListTaskQueuePartitionsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListTaskQueuePartitionsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListTaskQueuePartitionsHandle(id string) (*nexus.OperationHandle[*v1.ListTaskQueuePartitionsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListTaskQueuePartitionsOperation, id)
}

type WorkflowServiceCreateScheduleOperationStartResult struct {
	Successful *v1.CreateScheduleResponse
	Pending    *nexus.OperationHandle[*v1.CreateScheduleResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) CreateScheduleAsync(ctx context.Context, input *v1.CreateScheduleRequest, options nexus.StartOperationOptions) (*WorkflowServiceCreateScheduleOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceCreateScheduleOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceCreateScheduleOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) CreateSchedule(ctx context.Context, input *v1.CreateScheduleRequest, options nexus.ExecuteOperationOptions) (*v1.CreateScheduleResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceCreateScheduleOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewCreateScheduleHandle(id string) (*nexus.OperationHandle[*v1.CreateScheduleResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceCreateScheduleOperation, id)
}

type WorkflowServiceDescribeScheduleOperationStartResult struct {
	Successful *v1.DescribeScheduleResponse
	Pending    *nexus.OperationHandle[*v1.DescribeScheduleResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) DescribeScheduleAsync(ctx context.Context, input *v1.DescribeScheduleRequest, options nexus.StartOperationOptions) (*WorkflowServiceDescribeScheduleOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceDescribeScheduleOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceDescribeScheduleOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) DescribeSchedule(ctx context.Context, input *v1.DescribeScheduleRequest, options nexus.ExecuteOperationOptions) (*v1.DescribeScheduleResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceDescribeScheduleOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewDescribeScheduleHandle(id string) (*nexus.OperationHandle[*v1.DescribeScheduleResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceDescribeScheduleOperation, id)
}

type WorkflowServiceUpdateScheduleOperationStartResult struct {
	Successful *v1.UpdateScheduleResponse
	Pending    *nexus.OperationHandle[*v1.UpdateScheduleResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) UpdateScheduleAsync(ctx context.Context, input *v1.UpdateScheduleRequest, options nexus.StartOperationOptions) (*WorkflowServiceUpdateScheduleOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceUpdateScheduleOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceUpdateScheduleOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) UpdateSchedule(ctx context.Context, input *v1.UpdateScheduleRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateScheduleResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceUpdateScheduleOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewUpdateScheduleHandle(id string) (*nexus.OperationHandle[*v1.UpdateScheduleResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceUpdateScheduleOperation, id)
}

type WorkflowServicePatchScheduleOperationStartResult struct {
	Successful *v1.PatchScheduleResponse
	Pending    *nexus.OperationHandle[*v1.PatchScheduleResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) PatchScheduleAsync(ctx context.Context, input *v1.PatchScheduleRequest, options nexus.StartOperationOptions) (*WorkflowServicePatchScheduleOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServicePatchScheduleOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServicePatchScheduleOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) PatchSchedule(ctx context.Context, input *v1.PatchScheduleRequest, options nexus.ExecuteOperationOptions) (*v1.PatchScheduleResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServicePatchScheduleOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewPatchScheduleHandle(id string) (*nexus.OperationHandle[*v1.PatchScheduleResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServicePatchScheduleOperation, id)
}

type WorkflowServiceListScheduleMatchingTimesOperationStartResult struct {
	Successful *v1.ListScheduleMatchingTimesResponse
	Pending    *nexus.OperationHandle[*v1.ListScheduleMatchingTimesResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListScheduleMatchingTimesAsync(ctx context.Context, input *v1.ListScheduleMatchingTimesRequest, options nexus.StartOperationOptions) (*WorkflowServiceListScheduleMatchingTimesOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListScheduleMatchingTimesOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListScheduleMatchingTimesOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListScheduleMatchingTimes(ctx context.Context, input *v1.ListScheduleMatchingTimesRequest, options nexus.ExecuteOperationOptions) (*v1.ListScheduleMatchingTimesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListScheduleMatchingTimesOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListScheduleMatchingTimesHandle(id string) (*nexus.OperationHandle[*v1.ListScheduleMatchingTimesResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListScheduleMatchingTimesOperation, id)
}

type WorkflowServiceDeleteScheduleOperationStartResult struct {
	Successful *v1.DeleteScheduleResponse
	Pending    *nexus.OperationHandle[*v1.DeleteScheduleResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) DeleteScheduleAsync(ctx context.Context, input *v1.DeleteScheduleRequest, options nexus.StartOperationOptions) (*WorkflowServiceDeleteScheduleOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceDeleteScheduleOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceDeleteScheduleOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) DeleteSchedule(ctx context.Context, input *v1.DeleteScheduleRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteScheduleResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceDeleteScheduleOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewDeleteScheduleHandle(id string) (*nexus.OperationHandle[*v1.DeleteScheduleResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceDeleteScheduleOperation, id)
}

type WorkflowServiceListSchedulesOperationStartResult struct {
	Successful *v1.ListSchedulesResponse
	Pending    *nexus.OperationHandle[*v1.ListSchedulesResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListSchedulesAsync(ctx context.Context, input *v1.ListSchedulesRequest, options nexus.StartOperationOptions) (*WorkflowServiceListSchedulesOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListSchedulesOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListSchedulesOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListSchedules(ctx context.Context, input *v1.ListSchedulesRequest, options nexus.ExecuteOperationOptions) (*v1.ListSchedulesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListSchedulesOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListSchedulesHandle(id string) (*nexus.OperationHandle[*v1.ListSchedulesResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListSchedulesOperation, id)
}

type WorkflowServiceUpdateWorkerBuildIdCompatibilityOperationStartResult struct {
	Successful *v1.UpdateWorkerBuildIdCompatibilityResponse
	Pending    *nexus.OperationHandle[*v1.UpdateWorkerBuildIdCompatibilityResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) UpdateWorkerBuildIdCompatibilityAsync(ctx context.Context, input *v1.UpdateWorkerBuildIdCompatibilityRequest, options nexus.StartOperationOptions) (*WorkflowServiceUpdateWorkerBuildIdCompatibilityOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceUpdateWorkerBuildIdCompatibilityOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceUpdateWorkerBuildIdCompatibilityOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) UpdateWorkerBuildIdCompatibility(ctx context.Context, input *v1.UpdateWorkerBuildIdCompatibilityRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateWorkerBuildIdCompatibilityResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceUpdateWorkerBuildIdCompatibilityOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewUpdateWorkerBuildIdCompatibilityHandle(id string) (*nexus.OperationHandle[*v1.UpdateWorkerBuildIdCompatibilityResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceUpdateWorkerBuildIdCompatibilityOperation, id)
}

type WorkflowServiceGetWorkerBuildIdCompatibilityOperationStartResult struct {
	Successful *v1.GetWorkerBuildIdCompatibilityResponse
	Pending    *nexus.OperationHandle[*v1.GetWorkerBuildIdCompatibilityResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetWorkerBuildIdCompatibilityAsync(ctx context.Context, input *v1.GetWorkerBuildIdCompatibilityRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetWorkerBuildIdCompatibilityOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetWorkerBuildIdCompatibilityOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetWorkerBuildIdCompatibilityOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetWorkerBuildIdCompatibility(ctx context.Context, input *v1.GetWorkerBuildIdCompatibilityRequest, options nexus.ExecuteOperationOptions) (*v1.GetWorkerBuildIdCompatibilityResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetWorkerBuildIdCompatibilityOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetWorkerBuildIdCompatibilityHandle(id string) (*nexus.OperationHandle[*v1.GetWorkerBuildIdCompatibilityResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetWorkerBuildIdCompatibilityOperation, id)
}

type WorkflowServiceUpdateWorkerVersioningRulesOperationStartResult struct {
	Successful *v1.UpdateWorkerVersioningRulesResponse
	Pending    *nexus.OperationHandle[*v1.UpdateWorkerVersioningRulesResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) UpdateWorkerVersioningRulesAsync(ctx context.Context, input *v1.UpdateWorkerVersioningRulesRequest, options nexus.StartOperationOptions) (*WorkflowServiceUpdateWorkerVersioningRulesOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceUpdateWorkerVersioningRulesOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceUpdateWorkerVersioningRulesOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) UpdateWorkerVersioningRules(ctx context.Context, input *v1.UpdateWorkerVersioningRulesRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateWorkerVersioningRulesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceUpdateWorkerVersioningRulesOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewUpdateWorkerVersioningRulesHandle(id string) (*nexus.OperationHandle[*v1.UpdateWorkerVersioningRulesResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceUpdateWorkerVersioningRulesOperation, id)
}

type WorkflowServiceGetWorkerVersioningRulesOperationStartResult struct {
	Successful *v1.GetWorkerVersioningRulesResponse
	Pending    *nexus.OperationHandle[*v1.GetWorkerVersioningRulesResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetWorkerVersioningRulesAsync(ctx context.Context, input *v1.GetWorkerVersioningRulesRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetWorkerVersioningRulesOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetWorkerVersioningRulesOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetWorkerVersioningRulesOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetWorkerVersioningRules(ctx context.Context, input *v1.GetWorkerVersioningRulesRequest, options nexus.ExecuteOperationOptions) (*v1.GetWorkerVersioningRulesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetWorkerVersioningRulesOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetWorkerVersioningRulesHandle(id string) (*nexus.OperationHandle[*v1.GetWorkerVersioningRulesResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetWorkerVersioningRulesOperation, id)
}

type WorkflowServiceGetWorkerTaskReachabilityOperationStartResult struct {
	Successful *v1.GetWorkerTaskReachabilityResponse
	Pending    *nexus.OperationHandle[*v1.GetWorkerTaskReachabilityResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetWorkerTaskReachabilityAsync(ctx context.Context, input *v1.GetWorkerTaskReachabilityRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetWorkerTaskReachabilityOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetWorkerTaskReachabilityOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetWorkerTaskReachabilityOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetWorkerTaskReachability(ctx context.Context, input *v1.GetWorkerTaskReachabilityRequest, options nexus.ExecuteOperationOptions) (*v1.GetWorkerTaskReachabilityResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetWorkerTaskReachabilityOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetWorkerTaskReachabilityHandle(id string) (*nexus.OperationHandle[*v1.GetWorkerTaskReachabilityResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetWorkerTaskReachabilityOperation, id)
}

type WorkflowServiceDescribeDeploymentOperationStartResult struct {
	Successful *v1.DescribeDeploymentResponse
	Pending    *nexus.OperationHandle[*v1.DescribeDeploymentResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) DescribeDeploymentAsync(ctx context.Context, input *v1.DescribeDeploymentRequest, options nexus.StartOperationOptions) (*WorkflowServiceDescribeDeploymentOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceDescribeDeploymentOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceDescribeDeploymentOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) DescribeDeployment(ctx context.Context, input *v1.DescribeDeploymentRequest, options nexus.ExecuteOperationOptions) (*v1.DescribeDeploymentResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceDescribeDeploymentOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewDescribeDeploymentHandle(id string) (*nexus.OperationHandle[*v1.DescribeDeploymentResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceDescribeDeploymentOperation, id)
}

type WorkflowServiceListDeploymentsOperationStartResult struct {
	Successful *v1.ListDeploymentsResponse
	Pending    *nexus.OperationHandle[*v1.ListDeploymentsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListDeploymentsAsync(ctx context.Context, input *v1.ListDeploymentsRequest, options nexus.StartOperationOptions) (*WorkflowServiceListDeploymentsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListDeploymentsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListDeploymentsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListDeployments(ctx context.Context, input *v1.ListDeploymentsRequest, options nexus.ExecuteOperationOptions) (*v1.ListDeploymentsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListDeploymentsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListDeploymentsHandle(id string) (*nexus.OperationHandle[*v1.ListDeploymentsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListDeploymentsOperation, id)
}

type WorkflowServiceGetDeploymentReachabilityOperationStartResult struct {
	Successful *v1.GetDeploymentReachabilityResponse
	Pending    *nexus.OperationHandle[*v1.GetDeploymentReachabilityResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetDeploymentReachabilityAsync(ctx context.Context, input *v1.GetDeploymentReachabilityRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetDeploymentReachabilityOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetDeploymentReachabilityOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetDeploymentReachabilityOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetDeploymentReachability(ctx context.Context, input *v1.GetDeploymentReachabilityRequest, options nexus.ExecuteOperationOptions) (*v1.GetDeploymentReachabilityResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetDeploymentReachabilityOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetDeploymentReachabilityHandle(id string) (*nexus.OperationHandle[*v1.GetDeploymentReachabilityResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetDeploymentReachabilityOperation, id)
}

type WorkflowServiceGetCurrentDeploymentOperationStartResult struct {
	Successful *v1.GetCurrentDeploymentResponse
	Pending    *nexus.OperationHandle[*v1.GetCurrentDeploymentResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) GetCurrentDeploymentAsync(ctx context.Context, input *v1.GetCurrentDeploymentRequest, options nexus.StartOperationOptions) (*WorkflowServiceGetCurrentDeploymentOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceGetCurrentDeploymentOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceGetCurrentDeploymentOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) GetCurrentDeployment(ctx context.Context, input *v1.GetCurrentDeploymentRequest, options nexus.ExecuteOperationOptions) (*v1.GetCurrentDeploymentResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceGetCurrentDeploymentOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewGetCurrentDeploymentHandle(id string) (*nexus.OperationHandle[*v1.GetCurrentDeploymentResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceGetCurrentDeploymentOperation, id)
}

type WorkflowServiceSetCurrentDeploymentOperationStartResult struct {
	Successful *v1.SetCurrentDeploymentResponse
	Pending    *nexus.OperationHandle[*v1.SetCurrentDeploymentResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) SetCurrentDeploymentAsync(ctx context.Context, input *v1.SetCurrentDeploymentRequest, options nexus.StartOperationOptions) (*WorkflowServiceSetCurrentDeploymentOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceSetCurrentDeploymentOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceSetCurrentDeploymentOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) SetCurrentDeployment(ctx context.Context, input *v1.SetCurrentDeploymentRequest, options nexus.ExecuteOperationOptions) (*v1.SetCurrentDeploymentResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceSetCurrentDeploymentOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewSetCurrentDeploymentHandle(id string) (*nexus.OperationHandle[*v1.SetCurrentDeploymentResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceSetCurrentDeploymentOperation, id)
}

type WorkflowServiceUpdateWorkflowExecutionOperationStartResult struct {
	Successful *v1.UpdateWorkflowExecutionResponse
	Pending    *nexus.OperationHandle[*v1.UpdateWorkflowExecutionResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) UpdateWorkflowExecutionAsync(ctx context.Context, input *v1.UpdateWorkflowExecutionRequest, options nexus.StartOperationOptions) (*WorkflowServiceUpdateWorkflowExecutionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceUpdateWorkflowExecutionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceUpdateWorkflowExecutionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) UpdateWorkflowExecution(ctx context.Context, input *v1.UpdateWorkflowExecutionRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateWorkflowExecutionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceUpdateWorkflowExecutionOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewUpdateWorkflowExecutionHandle(id string) (*nexus.OperationHandle[*v1.UpdateWorkflowExecutionResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceUpdateWorkflowExecutionOperation, id)
}

type WorkflowServicePollWorkflowExecutionUpdateOperationStartResult struct {
	Successful *v1.PollWorkflowExecutionUpdateResponse
	Pending    *nexus.OperationHandle[*v1.PollWorkflowExecutionUpdateResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) PollWorkflowExecutionUpdateAsync(ctx context.Context, input *v1.PollWorkflowExecutionUpdateRequest, options nexus.StartOperationOptions) (*WorkflowServicePollWorkflowExecutionUpdateOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServicePollWorkflowExecutionUpdateOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServicePollWorkflowExecutionUpdateOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) PollWorkflowExecutionUpdate(ctx context.Context, input *v1.PollWorkflowExecutionUpdateRequest, options nexus.ExecuteOperationOptions) (*v1.PollWorkflowExecutionUpdateResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServicePollWorkflowExecutionUpdateOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewPollWorkflowExecutionUpdateHandle(id string) (*nexus.OperationHandle[*v1.PollWorkflowExecutionUpdateResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServicePollWorkflowExecutionUpdateOperation, id)
}

type WorkflowServiceStartBatchOperationOperationStartResult struct {
	Successful *v1.StartBatchOperationResponse
	Pending    *nexus.OperationHandle[*v1.StartBatchOperationResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) StartBatchOperationAsync(ctx context.Context, input *v1.StartBatchOperationRequest, options nexus.StartOperationOptions) (*WorkflowServiceStartBatchOperationOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceStartBatchOperationOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceStartBatchOperationOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) StartBatchOperation(ctx context.Context, input *v1.StartBatchOperationRequest, options nexus.ExecuteOperationOptions) (*v1.StartBatchOperationResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceStartBatchOperationOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewStartBatchOperationHandle(id string) (*nexus.OperationHandle[*v1.StartBatchOperationResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceStartBatchOperationOperation, id)
}

type WorkflowServiceStopBatchOperationOperationStartResult struct {
	Successful *v1.StopBatchOperationResponse
	Pending    *nexus.OperationHandle[*v1.StopBatchOperationResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) StopBatchOperationAsync(ctx context.Context, input *v1.StopBatchOperationRequest, options nexus.StartOperationOptions) (*WorkflowServiceStopBatchOperationOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceStopBatchOperationOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceStopBatchOperationOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) StopBatchOperation(ctx context.Context, input *v1.StopBatchOperationRequest, options nexus.ExecuteOperationOptions) (*v1.StopBatchOperationResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceStopBatchOperationOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewStopBatchOperationHandle(id string) (*nexus.OperationHandle[*v1.StopBatchOperationResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceStopBatchOperationOperation, id)
}

type WorkflowServiceDescribeBatchOperationOperationStartResult struct {
	Successful *v1.DescribeBatchOperationResponse
	Pending    *nexus.OperationHandle[*v1.DescribeBatchOperationResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) DescribeBatchOperationAsync(ctx context.Context, input *v1.DescribeBatchOperationRequest, options nexus.StartOperationOptions) (*WorkflowServiceDescribeBatchOperationOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceDescribeBatchOperationOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceDescribeBatchOperationOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) DescribeBatchOperation(ctx context.Context, input *v1.DescribeBatchOperationRequest, options nexus.ExecuteOperationOptions) (*v1.DescribeBatchOperationResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceDescribeBatchOperationOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewDescribeBatchOperationHandle(id string) (*nexus.OperationHandle[*v1.DescribeBatchOperationResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceDescribeBatchOperationOperation, id)
}

type WorkflowServiceListBatchOperationsOperationStartResult struct {
	Successful *v1.ListBatchOperationsResponse
	Pending    *nexus.OperationHandle[*v1.ListBatchOperationsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ListBatchOperationsAsync(ctx context.Context, input *v1.ListBatchOperationsRequest, options nexus.StartOperationOptions) (*WorkflowServiceListBatchOperationsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceListBatchOperationsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceListBatchOperationsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ListBatchOperations(ctx context.Context, input *v1.ListBatchOperationsRequest, options nexus.ExecuteOperationOptions) (*v1.ListBatchOperationsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceListBatchOperationsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewListBatchOperationsHandle(id string) (*nexus.OperationHandle[*v1.ListBatchOperationsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceListBatchOperationsOperation, id)
}

type WorkflowServicePollNexusTaskQueueOperationStartResult struct {
	Successful *v1.PollNexusTaskQueueResponse
	Pending    *nexus.OperationHandle[*v1.PollNexusTaskQueueResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) PollNexusTaskQueueAsync(ctx context.Context, input *v1.PollNexusTaskQueueRequest, options nexus.StartOperationOptions) (*WorkflowServicePollNexusTaskQueueOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServicePollNexusTaskQueueOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServicePollNexusTaskQueueOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) PollNexusTaskQueue(ctx context.Context, input *v1.PollNexusTaskQueueRequest, options nexus.ExecuteOperationOptions) (*v1.PollNexusTaskQueueResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServicePollNexusTaskQueueOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewPollNexusTaskQueueHandle(id string) (*nexus.OperationHandle[*v1.PollNexusTaskQueueResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServicePollNexusTaskQueueOperation, id)
}

type WorkflowServiceRespondNexusTaskCompletedOperationStartResult struct {
	Successful *v1.RespondNexusTaskCompletedResponse
	Pending    *nexus.OperationHandle[*v1.RespondNexusTaskCompletedResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondNexusTaskCompletedAsync(ctx context.Context, input *v1.RespondNexusTaskCompletedRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondNexusTaskCompletedOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondNexusTaskCompletedOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondNexusTaskCompletedOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondNexusTaskCompleted(ctx context.Context, input *v1.RespondNexusTaskCompletedRequest, options nexus.ExecuteOperationOptions) (*v1.RespondNexusTaskCompletedResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondNexusTaskCompletedOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondNexusTaskCompletedHandle(id string) (*nexus.OperationHandle[*v1.RespondNexusTaskCompletedResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondNexusTaskCompletedOperation, id)
}

type WorkflowServiceRespondNexusTaskFailedOperationStartResult struct {
	Successful *v1.RespondNexusTaskFailedResponse
	Pending    *nexus.OperationHandle[*v1.RespondNexusTaskFailedResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) RespondNexusTaskFailedAsync(ctx context.Context, input *v1.RespondNexusTaskFailedRequest, options nexus.StartOperationOptions) (*WorkflowServiceRespondNexusTaskFailedOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceRespondNexusTaskFailedOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceRespondNexusTaskFailedOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) RespondNexusTaskFailed(ctx context.Context, input *v1.RespondNexusTaskFailedRequest, options nexus.ExecuteOperationOptions) (*v1.RespondNexusTaskFailedResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceRespondNexusTaskFailedOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewRespondNexusTaskFailedHandle(id string) (*nexus.OperationHandle[*v1.RespondNexusTaskFailedResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceRespondNexusTaskFailedOperation, id)
}

type WorkflowServiceUpdateActivityOptionsByIdOperationStartResult struct {
	Successful *v1.UpdateActivityOptionsByIdResponse
	Pending    *nexus.OperationHandle[*v1.UpdateActivityOptionsByIdResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) UpdateActivityOptionsByIdAsync(ctx context.Context, input *v1.UpdateActivityOptionsByIdRequest, options nexus.StartOperationOptions) (*WorkflowServiceUpdateActivityOptionsByIdOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceUpdateActivityOptionsByIdOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceUpdateActivityOptionsByIdOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) UpdateActivityOptionsById(ctx context.Context, input *v1.UpdateActivityOptionsByIdRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateActivityOptionsByIdResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceUpdateActivityOptionsByIdOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewUpdateActivityOptionsByIdHandle(id string) (*nexus.OperationHandle[*v1.UpdateActivityOptionsByIdResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceUpdateActivityOptionsByIdOperation, id)
}

type WorkflowServiceUpdateWorkflowExecutionOptionsOperationStartResult struct {
	Successful *v1.UpdateWorkflowExecutionOptionsResponse
	Pending    *nexus.OperationHandle[*v1.UpdateWorkflowExecutionOptionsResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) UpdateWorkflowExecutionOptionsAsync(ctx context.Context, input *v1.UpdateWorkflowExecutionOptionsRequest, options nexus.StartOperationOptions) (*WorkflowServiceUpdateWorkflowExecutionOptionsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceUpdateWorkflowExecutionOptionsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceUpdateWorkflowExecutionOptionsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) UpdateWorkflowExecutionOptions(ctx context.Context, input *v1.UpdateWorkflowExecutionOptionsRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateWorkflowExecutionOptionsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceUpdateWorkflowExecutionOptionsOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewUpdateWorkflowExecutionOptionsHandle(id string) (*nexus.OperationHandle[*v1.UpdateWorkflowExecutionOptionsResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceUpdateWorkflowExecutionOptionsOperation, id)
}

type WorkflowServicePauseActivityByIdOperationStartResult struct {
	Successful *v1.PauseActivityByIdResponse
	Pending    *nexus.OperationHandle[*v1.PauseActivityByIdResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) PauseActivityByIdAsync(ctx context.Context, input *v1.PauseActivityByIdRequest, options nexus.StartOperationOptions) (*WorkflowServicePauseActivityByIdOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServicePauseActivityByIdOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServicePauseActivityByIdOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) PauseActivityById(ctx context.Context, input *v1.PauseActivityByIdRequest, options nexus.ExecuteOperationOptions) (*v1.PauseActivityByIdResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServicePauseActivityByIdOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewPauseActivityByIdHandle(id string) (*nexus.OperationHandle[*v1.PauseActivityByIdResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServicePauseActivityByIdOperation, id)
}

type WorkflowServiceUnpauseActivityByIdOperationStartResult struct {
	Successful *v1.UnpauseActivityByIdResponse
	Pending    *nexus.OperationHandle[*v1.UnpauseActivityByIdResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) UnpauseActivityByIdAsync(ctx context.Context, input *v1.UnpauseActivityByIdRequest, options nexus.StartOperationOptions) (*WorkflowServiceUnpauseActivityByIdOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceUnpauseActivityByIdOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceUnpauseActivityByIdOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) UnpauseActivityById(ctx context.Context, input *v1.UnpauseActivityByIdRequest, options nexus.ExecuteOperationOptions) (*v1.UnpauseActivityByIdResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceUnpauseActivityByIdOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewUnpauseActivityByIdHandle(id string) (*nexus.OperationHandle[*v1.UnpauseActivityByIdResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceUnpauseActivityByIdOperation, id)
}

type WorkflowServiceResetActivityByIdOperationStartResult struct {
	Successful *v1.ResetActivityByIdResponse
	Pending    *nexus.OperationHandle[*v1.ResetActivityByIdResponse]
	Links      []nexus.Link
}

func (c *WorkflowServiceNexusHTTPClient) ResetActivityByIdAsync(ctx context.Context, input *v1.ResetActivityByIdRequest, options nexus.StartOperationOptions) (*WorkflowServiceResetActivityByIdOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, WorkflowServiceResetActivityByIdOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := WorkflowServiceResetActivityByIdOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *WorkflowServiceNexusHTTPClient) ResetActivityById(ctx context.Context, input *v1.ResetActivityByIdRequest, options nexus.ExecuteOperationOptions) (*v1.ResetActivityByIdResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, WorkflowServiceResetActivityByIdOperation, input, options)
	return output, err
}
func (c *WorkflowServiceNexusHTTPClient) NewResetActivityByIdHandle(id string) (*nexus.OperationHandle[*v1.ResetActivityByIdResponse], error) {
	return nexus.NewHandle(&c.client, WorkflowServiceResetActivityByIdOperation, id)
}
