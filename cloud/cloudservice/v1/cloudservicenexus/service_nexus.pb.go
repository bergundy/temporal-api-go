// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-nexus. DO NOT EDIT.
// plugins:
//
//	protoc-gen-go-nexus
//	go go1.23.4
//	protoc
//
// source: temporal/api/cloud/cloudservice/v1/service.proto
package cloudservicenexus

import (
	"context"

	nexusproto "github.com/nexus-rpc/sdk-go/contrib/nexusproto"
	nexus "github.com/nexus-rpc/sdk-go/nexus"
	v1 "go.temporal.io/api/cloud/cloudservice/v1"
)

// CloudServiceServiceName defines the fully-qualified name for the temporal.api.cloud.cloudservice.v1.CloudService service.
const CloudServiceServiceName = "temporal.api.cloud.cloudservice.v1.CloudService"

// CloudServiceGetUsersOperationName defines the fully-qualified name for the GetUsers operation.
const CloudServiceGetUsersOperationName = "GetUsers"

var CloudServiceGetUsersOperation = nexus.NewOperationReference[*v1.GetUsersRequest, *v1.GetUsersResponse](CloudServiceGetUsersOperationName)

// CloudServiceGetUserOperationName defines the fully-qualified name for the GetUser operation.
const CloudServiceGetUserOperationName = "GetUser"

var CloudServiceGetUserOperation = nexus.NewOperationReference[*v1.GetUserRequest, *v1.GetUserResponse](CloudServiceGetUserOperationName)

// CloudServiceCreateUserOperationName defines the fully-qualified name for the CreateUser operation.
const CloudServiceCreateUserOperationName = "CreateUser"

var CloudServiceCreateUserOperation = nexus.NewOperationReference[*v1.CreateUserRequest, *v1.CreateUserResponse](CloudServiceCreateUserOperationName)

// CloudServiceUpdateUserOperationName defines the fully-qualified name for the UpdateUser operation.
const CloudServiceUpdateUserOperationName = "UpdateUser"

var CloudServiceUpdateUserOperation = nexus.NewOperationReference[*v1.UpdateUserRequest, *v1.UpdateUserResponse](CloudServiceUpdateUserOperationName)

// CloudServiceDeleteUserOperationName defines the fully-qualified name for the DeleteUser operation.
const CloudServiceDeleteUserOperationName = "DeleteUser"

var CloudServiceDeleteUserOperation = nexus.NewOperationReference[*v1.DeleteUserRequest, *v1.DeleteUserResponse](CloudServiceDeleteUserOperationName)

// CloudServiceSetUserNamespaceAccessOperationName defines the fully-qualified name for the SetUserNamespaceAccess operation.
const CloudServiceSetUserNamespaceAccessOperationName = "SetUserNamespaceAccess"

var CloudServiceSetUserNamespaceAccessOperation = nexus.NewOperationReference[*v1.SetUserNamespaceAccessRequest, *v1.SetUserNamespaceAccessResponse](CloudServiceSetUserNamespaceAccessOperationName)

// CloudServiceGetAsyncOperationOperationName defines the fully-qualified name for the GetAsyncOperation operation.
const CloudServiceGetAsyncOperationOperationName = "GetAsyncOperation"

var CloudServiceGetAsyncOperationOperation = nexus.NewOperationReference[*v1.GetAsyncOperationRequest, *v1.GetAsyncOperationResponse](CloudServiceGetAsyncOperationOperationName)

// CloudServiceCreateNamespaceOperationName defines the fully-qualified name for the CreateNamespace operation.
const CloudServiceCreateNamespaceOperationName = "CreateNamespace"

var CloudServiceCreateNamespaceOperation = nexus.NewOperationReference[*v1.CreateNamespaceRequest, *v1.CreateNamespaceResponse](CloudServiceCreateNamespaceOperationName)

// CloudServiceGetNamespacesOperationName defines the fully-qualified name for the GetNamespaces operation.
const CloudServiceGetNamespacesOperationName = "GetNamespaces"

var CloudServiceGetNamespacesOperation = nexus.NewOperationReference[*v1.GetNamespacesRequest, *v1.GetNamespacesResponse](CloudServiceGetNamespacesOperationName)

// CloudServiceGetNamespaceOperationName defines the fully-qualified name for the GetNamespace operation.
const CloudServiceGetNamespaceOperationName = "GetNamespace"

var CloudServiceGetNamespaceOperation = nexus.NewOperationReference[*v1.GetNamespaceRequest, *v1.GetNamespaceResponse](CloudServiceGetNamespaceOperationName)

// CloudServiceUpdateNamespaceOperationName defines the fully-qualified name for the UpdateNamespace operation.
const CloudServiceUpdateNamespaceOperationName = "UpdateNamespace"

var CloudServiceUpdateNamespaceOperation = nexus.NewOperationReference[*v1.UpdateNamespaceRequest, *v1.UpdateNamespaceResponse](CloudServiceUpdateNamespaceOperationName)

// CloudServiceRenameCustomSearchAttributeOperationName defines the fully-qualified name for the RenameCustomSearchAttribute operation.
const CloudServiceRenameCustomSearchAttributeOperationName = "RenameCustomSearchAttribute"

var CloudServiceRenameCustomSearchAttributeOperation = nexus.NewOperationReference[*v1.RenameCustomSearchAttributeRequest, *v1.RenameCustomSearchAttributeResponse](CloudServiceRenameCustomSearchAttributeOperationName)

// CloudServiceDeleteNamespaceOperationName defines the fully-qualified name for the DeleteNamespace operation.
const CloudServiceDeleteNamespaceOperationName = "DeleteNamespace"

var CloudServiceDeleteNamespaceOperation = nexus.NewOperationReference[*v1.DeleteNamespaceRequest, *v1.DeleteNamespaceResponse](CloudServiceDeleteNamespaceOperationName)

// CloudServiceFailoverNamespaceRegionOperationName defines the fully-qualified name for the FailoverNamespaceRegion operation.
const CloudServiceFailoverNamespaceRegionOperationName = "FailoverNamespaceRegion"

var CloudServiceFailoverNamespaceRegionOperation = nexus.NewOperationReference[*v1.FailoverNamespaceRegionRequest, *v1.FailoverNamespaceRegionResponse](CloudServiceFailoverNamespaceRegionOperationName)

// CloudServiceAddNamespaceRegionOperationName defines the fully-qualified name for the AddNamespaceRegion operation.
const CloudServiceAddNamespaceRegionOperationName = "AddNamespaceRegion"

var CloudServiceAddNamespaceRegionOperation = nexus.NewOperationReference[*v1.AddNamespaceRegionRequest, *v1.AddNamespaceRegionResponse](CloudServiceAddNamespaceRegionOperationName)

// CloudServiceGetRegionsOperationName defines the fully-qualified name for the GetRegions operation.
const CloudServiceGetRegionsOperationName = "GetRegions"

var CloudServiceGetRegionsOperation = nexus.NewOperationReference[*v1.GetRegionsRequest, *v1.GetRegionsResponse](CloudServiceGetRegionsOperationName)

// CloudServiceGetRegionOperationName defines the fully-qualified name for the GetRegion operation.
const CloudServiceGetRegionOperationName = "GetRegion"

var CloudServiceGetRegionOperation = nexus.NewOperationReference[*v1.GetRegionRequest, *v1.GetRegionResponse](CloudServiceGetRegionOperationName)

// CloudServiceGetApiKeysOperationName defines the fully-qualified name for the GetApiKeys operation.
const CloudServiceGetApiKeysOperationName = "GetApiKeys"

var CloudServiceGetApiKeysOperation = nexus.NewOperationReference[*v1.GetApiKeysRequest, *v1.GetApiKeysResponse](CloudServiceGetApiKeysOperationName)

// CloudServiceGetApiKeyOperationName defines the fully-qualified name for the GetApiKey operation.
const CloudServiceGetApiKeyOperationName = "GetApiKey"

var CloudServiceGetApiKeyOperation = nexus.NewOperationReference[*v1.GetApiKeyRequest, *v1.GetApiKeyResponse](CloudServiceGetApiKeyOperationName)

// CloudServiceCreateApiKeyOperationName defines the fully-qualified name for the CreateApiKey operation.
const CloudServiceCreateApiKeyOperationName = "CreateApiKey"

var CloudServiceCreateApiKeyOperation = nexus.NewOperationReference[*v1.CreateApiKeyRequest, *v1.CreateApiKeyResponse](CloudServiceCreateApiKeyOperationName)

// CloudServiceUpdateApiKeyOperationName defines the fully-qualified name for the UpdateApiKey operation.
const CloudServiceUpdateApiKeyOperationName = "UpdateApiKey"

var CloudServiceUpdateApiKeyOperation = nexus.NewOperationReference[*v1.UpdateApiKeyRequest, *v1.UpdateApiKeyResponse](CloudServiceUpdateApiKeyOperationName)

// CloudServiceDeleteApiKeyOperationName defines the fully-qualified name for the DeleteApiKey operation.
const CloudServiceDeleteApiKeyOperationName = "DeleteApiKey"

var CloudServiceDeleteApiKeyOperation = nexus.NewOperationReference[*v1.DeleteApiKeyRequest, *v1.DeleteApiKeyResponse](CloudServiceDeleteApiKeyOperationName)

// CloudServiceGetNexusEndpointsOperationName defines the fully-qualified name for the GetNexusEndpoints operation.
const CloudServiceGetNexusEndpointsOperationName = "GetNexusEndpoints"

var CloudServiceGetNexusEndpointsOperation = nexus.NewOperationReference[*v1.GetNexusEndpointsRequest, *v1.GetNexusEndpointsResponse](CloudServiceGetNexusEndpointsOperationName)

// CloudServiceGetNexusEndpointOperationName defines the fully-qualified name for the GetNexusEndpoint operation.
const CloudServiceGetNexusEndpointOperationName = "GetNexusEndpoint"

var CloudServiceGetNexusEndpointOperation = nexus.NewOperationReference[*v1.GetNexusEndpointRequest, *v1.GetNexusEndpointResponse](CloudServiceGetNexusEndpointOperationName)

// CloudServiceCreateNexusEndpointOperationName defines the fully-qualified name for the CreateNexusEndpoint operation.
const CloudServiceCreateNexusEndpointOperationName = "CreateNexusEndpoint"

var CloudServiceCreateNexusEndpointOperation = nexus.NewOperationReference[*v1.CreateNexusEndpointRequest, *v1.CreateNexusEndpointResponse](CloudServiceCreateNexusEndpointOperationName)

// CloudServiceUpdateNexusEndpointOperationName defines the fully-qualified name for the UpdateNexusEndpoint operation.
const CloudServiceUpdateNexusEndpointOperationName = "UpdateNexusEndpoint"

var CloudServiceUpdateNexusEndpointOperation = nexus.NewOperationReference[*v1.UpdateNexusEndpointRequest, *v1.UpdateNexusEndpointResponse](CloudServiceUpdateNexusEndpointOperationName)

// CloudServiceDeleteNexusEndpointOperationName defines the fully-qualified name for the DeleteNexusEndpoint operation.
const CloudServiceDeleteNexusEndpointOperationName = "DeleteNexusEndpoint"

var CloudServiceDeleteNexusEndpointOperation = nexus.NewOperationReference[*v1.DeleteNexusEndpointRequest, *v1.DeleteNexusEndpointResponse](CloudServiceDeleteNexusEndpointOperationName)

// CloudServiceGetUserGroupsOperationName defines the fully-qualified name for the GetUserGroups operation.
const CloudServiceGetUserGroupsOperationName = "GetUserGroups"

var CloudServiceGetUserGroupsOperation = nexus.NewOperationReference[*v1.GetUserGroupsRequest, *v1.GetUserGroupsResponse](CloudServiceGetUserGroupsOperationName)

// CloudServiceGetUserGroupOperationName defines the fully-qualified name for the GetUserGroup operation.
const CloudServiceGetUserGroupOperationName = "GetUserGroup"

var CloudServiceGetUserGroupOperation = nexus.NewOperationReference[*v1.GetUserGroupRequest, *v1.GetUserGroupResponse](CloudServiceGetUserGroupOperationName)

// CloudServiceCreateUserGroupOperationName defines the fully-qualified name for the CreateUserGroup operation.
const CloudServiceCreateUserGroupOperationName = "CreateUserGroup"

var CloudServiceCreateUserGroupOperation = nexus.NewOperationReference[*v1.CreateUserGroupRequest, *v1.CreateUserGroupResponse](CloudServiceCreateUserGroupOperationName)

// CloudServiceUpdateUserGroupOperationName defines the fully-qualified name for the UpdateUserGroup operation.
const CloudServiceUpdateUserGroupOperationName = "UpdateUserGroup"

var CloudServiceUpdateUserGroupOperation = nexus.NewOperationReference[*v1.UpdateUserGroupRequest, *v1.UpdateUserGroupResponse](CloudServiceUpdateUserGroupOperationName)

// CloudServiceDeleteUserGroupOperationName defines the fully-qualified name for the DeleteUserGroup operation.
const CloudServiceDeleteUserGroupOperationName = "DeleteUserGroup"

var CloudServiceDeleteUserGroupOperation = nexus.NewOperationReference[*v1.DeleteUserGroupRequest, *v1.DeleteUserGroupResponse](CloudServiceDeleteUserGroupOperationName)

// CloudServiceSetUserGroupNamespaceAccessOperationName defines the fully-qualified name for the SetUserGroupNamespaceAccess operation.
const CloudServiceSetUserGroupNamespaceAccessOperationName = "SetUserGroupNamespaceAccess"

var CloudServiceSetUserGroupNamespaceAccessOperation = nexus.NewOperationReference[*v1.SetUserGroupNamespaceAccessRequest, *v1.SetUserGroupNamespaceAccessResponse](CloudServiceSetUserGroupNamespaceAccessOperationName)

// CloudServiceCreateServiceAccountOperationName defines the fully-qualified name for the CreateServiceAccount operation.
const CloudServiceCreateServiceAccountOperationName = "CreateServiceAccount"

var CloudServiceCreateServiceAccountOperation = nexus.NewOperationReference[*v1.CreateServiceAccountRequest, *v1.CreateServiceAccountResponse](CloudServiceCreateServiceAccountOperationName)

// CloudServiceGetServiceAccountOperationName defines the fully-qualified name for the GetServiceAccount operation.
const CloudServiceGetServiceAccountOperationName = "GetServiceAccount"

var CloudServiceGetServiceAccountOperation = nexus.NewOperationReference[*v1.GetServiceAccountRequest, *v1.GetServiceAccountResponse](CloudServiceGetServiceAccountOperationName)

// CloudServiceGetServiceAccountsOperationName defines the fully-qualified name for the GetServiceAccounts operation.
const CloudServiceGetServiceAccountsOperationName = "GetServiceAccounts"

var CloudServiceGetServiceAccountsOperation = nexus.NewOperationReference[*v1.GetServiceAccountsRequest, *v1.GetServiceAccountsResponse](CloudServiceGetServiceAccountsOperationName)

// CloudServiceUpdateServiceAccountOperationName defines the fully-qualified name for the UpdateServiceAccount operation.
const CloudServiceUpdateServiceAccountOperationName = "UpdateServiceAccount"

var CloudServiceUpdateServiceAccountOperation = nexus.NewOperationReference[*v1.UpdateServiceAccountRequest, *v1.UpdateServiceAccountResponse](CloudServiceUpdateServiceAccountOperationName)

// CloudServiceDeleteServiceAccountOperationName defines the fully-qualified name for the DeleteServiceAccount operation.
const CloudServiceDeleteServiceAccountOperationName = "DeleteServiceAccount"

var CloudServiceDeleteServiceAccountOperation = nexus.NewOperationReference[*v1.DeleteServiceAccountRequest, *v1.DeleteServiceAccountResponse](CloudServiceDeleteServiceAccountOperationName)

// CloudServiceGetUsageOperationName defines the fully-qualified name for the GetUsage operation.
const CloudServiceGetUsageOperationName = "GetUsage"

var CloudServiceGetUsageOperation = nexus.NewOperationReference[*v1.GetUsageRequest, *v1.GetUsageResponse](CloudServiceGetUsageOperationName)

// CloudServiceGetAccountOperationName defines the fully-qualified name for the GetAccount operation.
const CloudServiceGetAccountOperationName = "GetAccount"

var CloudServiceGetAccountOperation = nexus.NewOperationReference[*v1.GetAccountRequest, *v1.GetAccountResponse](CloudServiceGetAccountOperationName)

// CloudServiceUpdateAccountOperationName defines the fully-qualified name for the UpdateAccount operation.
const CloudServiceUpdateAccountOperationName = "UpdateAccount"

var CloudServiceUpdateAccountOperation = nexus.NewOperationReference[*v1.UpdateAccountRequest, *v1.UpdateAccountResponse](CloudServiceUpdateAccountOperationName)

// CloudServiceCreateNamespaceExportSinkOperationName defines the fully-qualified name for the CreateNamespaceExportSink operation.
const CloudServiceCreateNamespaceExportSinkOperationName = "CreateNamespaceExportSink"

var CloudServiceCreateNamespaceExportSinkOperation = nexus.NewOperationReference[*v1.CreateNamespaceExportSinkRequest, *v1.CreateNamespaceExportSinkResponse](CloudServiceCreateNamespaceExportSinkOperationName)

// CloudServiceGetNamespaceExportSinkOperationName defines the fully-qualified name for the GetNamespaceExportSink operation.
const CloudServiceGetNamespaceExportSinkOperationName = "GetNamespaceExportSink"

var CloudServiceGetNamespaceExportSinkOperation = nexus.NewOperationReference[*v1.GetNamespaceExportSinkRequest, *v1.GetNamespaceExportSinkResponse](CloudServiceGetNamespaceExportSinkOperationName)

// CloudServiceGetNamespaceExportSinksOperationName defines the fully-qualified name for the GetNamespaceExportSinks operation.
const CloudServiceGetNamespaceExportSinksOperationName = "GetNamespaceExportSinks"

var CloudServiceGetNamespaceExportSinksOperation = nexus.NewOperationReference[*v1.GetNamespaceExportSinksRequest, *v1.GetNamespaceExportSinksResponse](CloudServiceGetNamespaceExportSinksOperationName)

// CloudServiceUpdateNamespaceExportSinkOperationName defines the fully-qualified name for the UpdateNamespaceExportSink operation.
const CloudServiceUpdateNamespaceExportSinkOperationName = "UpdateNamespaceExportSink"

var CloudServiceUpdateNamespaceExportSinkOperation = nexus.NewOperationReference[*v1.UpdateNamespaceExportSinkRequest, *v1.UpdateNamespaceExportSinkResponse](CloudServiceUpdateNamespaceExportSinkOperationName)

// CloudServiceDeleteNamespaceExportSinkOperationName defines the fully-qualified name for the DeleteNamespaceExportSink operation.
const CloudServiceDeleteNamespaceExportSinkOperationName = "DeleteNamespaceExportSink"

var CloudServiceDeleteNamespaceExportSinkOperation = nexus.NewOperationReference[*v1.DeleteNamespaceExportSinkRequest, *v1.DeleteNamespaceExportSinkResponse](CloudServiceDeleteNamespaceExportSinkOperationName)

// CloudServiceValidateNamespaceExportSinkOperationName defines the fully-qualified name for the ValidateNamespaceExportSink operation.
const CloudServiceValidateNamespaceExportSinkOperationName = "ValidateNamespaceExportSink"

var CloudServiceValidateNamespaceExportSinkOperation = nexus.NewOperationReference[*v1.ValidateNamespaceExportSinkRequest, *v1.ValidateNamespaceExportSinkResponse](CloudServiceValidateNamespaceExportSinkOperationName)

type CloudServiceNexusHandler interface {
	mustEmbedUnimplementedCloudServiceNexusHandler()
	GetUsers(name string) nexus.Operation[*v1.GetUsersRequest, *v1.GetUsersResponse]
	GetUser(name string) nexus.Operation[*v1.GetUserRequest, *v1.GetUserResponse]
	CreateUser(name string) nexus.Operation[*v1.CreateUserRequest, *v1.CreateUserResponse]
	UpdateUser(name string) nexus.Operation[*v1.UpdateUserRequest, *v1.UpdateUserResponse]
	DeleteUser(name string) nexus.Operation[*v1.DeleteUserRequest, *v1.DeleteUserResponse]
	SetUserNamespaceAccess(name string) nexus.Operation[*v1.SetUserNamespaceAccessRequest, *v1.SetUserNamespaceAccessResponse]
	GetAsyncOperation(name string) nexus.Operation[*v1.GetAsyncOperationRequest, *v1.GetAsyncOperationResponse]
	CreateNamespace(name string) nexus.Operation[*v1.CreateNamespaceRequest, *v1.CreateNamespaceResponse]
	GetNamespaces(name string) nexus.Operation[*v1.GetNamespacesRequest, *v1.GetNamespacesResponse]
	GetNamespace(name string) nexus.Operation[*v1.GetNamespaceRequest, *v1.GetNamespaceResponse]
	UpdateNamespace(name string) nexus.Operation[*v1.UpdateNamespaceRequest, *v1.UpdateNamespaceResponse]
	RenameCustomSearchAttribute(name string) nexus.Operation[*v1.RenameCustomSearchAttributeRequest, *v1.RenameCustomSearchAttributeResponse]
	DeleteNamespace(name string) nexus.Operation[*v1.DeleteNamespaceRequest, *v1.DeleteNamespaceResponse]
	FailoverNamespaceRegion(name string) nexus.Operation[*v1.FailoverNamespaceRegionRequest, *v1.FailoverNamespaceRegionResponse]
	AddNamespaceRegion(name string) nexus.Operation[*v1.AddNamespaceRegionRequest, *v1.AddNamespaceRegionResponse]
	GetRegions(name string) nexus.Operation[*v1.GetRegionsRequest, *v1.GetRegionsResponse]
	GetRegion(name string) nexus.Operation[*v1.GetRegionRequest, *v1.GetRegionResponse]
	GetApiKeys(name string) nexus.Operation[*v1.GetApiKeysRequest, *v1.GetApiKeysResponse]
	GetApiKey(name string) nexus.Operation[*v1.GetApiKeyRequest, *v1.GetApiKeyResponse]
	CreateApiKey(name string) nexus.Operation[*v1.CreateApiKeyRequest, *v1.CreateApiKeyResponse]
	UpdateApiKey(name string) nexus.Operation[*v1.UpdateApiKeyRequest, *v1.UpdateApiKeyResponse]
	DeleteApiKey(name string) nexus.Operation[*v1.DeleteApiKeyRequest, *v1.DeleteApiKeyResponse]
	GetNexusEndpoints(name string) nexus.Operation[*v1.GetNexusEndpointsRequest, *v1.GetNexusEndpointsResponse]
	GetNexusEndpoint(name string) nexus.Operation[*v1.GetNexusEndpointRequest, *v1.GetNexusEndpointResponse]
	CreateNexusEndpoint(name string) nexus.Operation[*v1.CreateNexusEndpointRequest, *v1.CreateNexusEndpointResponse]
	UpdateNexusEndpoint(name string) nexus.Operation[*v1.UpdateNexusEndpointRequest, *v1.UpdateNexusEndpointResponse]
	DeleteNexusEndpoint(name string) nexus.Operation[*v1.DeleteNexusEndpointRequest, *v1.DeleteNexusEndpointResponse]
	GetUserGroups(name string) nexus.Operation[*v1.GetUserGroupsRequest, *v1.GetUserGroupsResponse]
	GetUserGroup(name string) nexus.Operation[*v1.GetUserGroupRequest, *v1.GetUserGroupResponse]
	CreateUserGroup(name string) nexus.Operation[*v1.CreateUserGroupRequest, *v1.CreateUserGroupResponse]
	UpdateUserGroup(name string) nexus.Operation[*v1.UpdateUserGroupRequest, *v1.UpdateUserGroupResponse]
	DeleteUserGroup(name string) nexus.Operation[*v1.DeleteUserGroupRequest, *v1.DeleteUserGroupResponse]
	SetUserGroupNamespaceAccess(name string) nexus.Operation[*v1.SetUserGroupNamespaceAccessRequest, *v1.SetUserGroupNamespaceAccessResponse]
	CreateServiceAccount(name string) nexus.Operation[*v1.CreateServiceAccountRequest, *v1.CreateServiceAccountResponse]
	GetServiceAccount(name string) nexus.Operation[*v1.GetServiceAccountRequest, *v1.GetServiceAccountResponse]
	GetServiceAccounts(name string) nexus.Operation[*v1.GetServiceAccountsRequest, *v1.GetServiceAccountsResponse]
	UpdateServiceAccount(name string) nexus.Operation[*v1.UpdateServiceAccountRequest, *v1.UpdateServiceAccountResponse]
	DeleteServiceAccount(name string) nexus.Operation[*v1.DeleteServiceAccountRequest, *v1.DeleteServiceAccountResponse]
	GetUsage(name string) nexus.Operation[*v1.GetUsageRequest, *v1.GetUsageResponse]
	GetAccount(name string) nexus.Operation[*v1.GetAccountRequest, *v1.GetAccountResponse]
	UpdateAccount(name string) nexus.Operation[*v1.UpdateAccountRequest, *v1.UpdateAccountResponse]
	CreateNamespaceExportSink(name string) nexus.Operation[*v1.CreateNamespaceExportSinkRequest, *v1.CreateNamespaceExportSinkResponse]
	GetNamespaceExportSink(name string) nexus.Operation[*v1.GetNamespaceExportSinkRequest, *v1.GetNamespaceExportSinkResponse]
	GetNamespaceExportSinks(name string) nexus.Operation[*v1.GetNamespaceExportSinksRequest, *v1.GetNamespaceExportSinksResponse]
	UpdateNamespaceExportSink(name string) nexus.Operation[*v1.UpdateNamespaceExportSinkRequest, *v1.UpdateNamespaceExportSinkResponse]
	DeleteNamespaceExportSink(name string) nexus.Operation[*v1.DeleteNamespaceExportSinkRequest, *v1.DeleteNamespaceExportSinkResponse]
	ValidateNamespaceExportSink(name string) nexus.Operation[*v1.ValidateNamespaceExportSinkRequest, *v1.ValidateNamespaceExportSinkResponse]
}

func NewCloudServiceNexusService(h CloudServiceNexusHandler) (*nexus.Service, error) {
	svc := nexus.NewService(CloudServiceServiceName)
	err := svc.Register(h.GetUsers(CloudServiceGetUsersOperationName), h.GetUser(CloudServiceGetUserOperationName), h.CreateUser(CloudServiceCreateUserOperationName), h.UpdateUser(CloudServiceUpdateUserOperationName), h.DeleteUser(CloudServiceDeleteUserOperationName), h.SetUserNamespaceAccess(CloudServiceSetUserNamespaceAccessOperationName), h.GetAsyncOperation(CloudServiceGetAsyncOperationOperationName), h.CreateNamespace(CloudServiceCreateNamespaceOperationName), h.GetNamespaces(CloudServiceGetNamespacesOperationName), h.GetNamespace(CloudServiceGetNamespaceOperationName), h.UpdateNamespace(CloudServiceUpdateNamespaceOperationName), h.RenameCustomSearchAttribute(CloudServiceRenameCustomSearchAttributeOperationName), h.DeleteNamespace(CloudServiceDeleteNamespaceOperationName), h.FailoverNamespaceRegion(CloudServiceFailoverNamespaceRegionOperationName), h.AddNamespaceRegion(CloudServiceAddNamespaceRegionOperationName), h.GetRegions(CloudServiceGetRegionsOperationName), h.GetRegion(CloudServiceGetRegionOperationName), h.GetApiKeys(CloudServiceGetApiKeysOperationName), h.GetApiKey(CloudServiceGetApiKeyOperationName), h.CreateApiKey(CloudServiceCreateApiKeyOperationName), h.UpdateApiKey(CloudServiceUpdateApiKeyOperationName), h.DeleteApiKey(CloudServiceDeleteApiKeyOperationName), h.GetNexusEndpoints(CloudServiceGetNexusEndpointsOperationName), h.GetNexusEndpoint(CloudServiceGetNexusEndpointOperationName), h.CreateNexusEndpoint(CloudServiceCreateNexusEndpointOperationName), h.UpdateNexusEndpoint(CloudServiceUpdateNexusEndpointOperationName), h.DeleteNexusEndpoint(CloudServiceDeleteNexusEndpointOperationName), h.GetUserGroups(CloudServiceGetUserGroupsOperationName), h.GetUserGroup(CloudServiceGetUserGroupOperationName), h.CreateUserGroup(CloudServiceCreateUserGroupOperationName), h.UpdateUserGroup(CloudServiceUpdateUserGroupOperationName), h.DeleteUserGroup(CloudServiceDeleteUserGroupOperationName), h.SetUserGroupNamespaceAccess(CloudServiceSetUserGroupNamespaceAccessOperationName), h.CreateServiceAccount(CloudServiceCreateServiceAccountOperationName), h.GetServiceAccount(CloudServiceGetServiceAccountOperationName), h.GetServiceAccounts(CloudServiceGetServiceAccountsOperationName), h.UpdateServiceAccount(CloudServiceUpdateServiceAccountOperationName), h.DeleteServiceAccount(CloudServiceDeleteServiceAccountOperationName), h.GetUsage(CloudServiceGetUsageOperationName), h.GetAccount(CloudServiceGetAccountOperationName), h.UpdateAccount(CloudServiceUpdateAccountOperationName), h.CreateNamespaceExportSink(CloudServiceCreateNamespaceExportSinkOperationName), h.GetNamespaceExportSink(CloudServiceGetNamespaceExportSinkOperationName), h.GetNamespaceExportSinks(CloudServiceGetNamespaceExportSinksOperationName), h.UpdateNamespaceExportSink(CloudServiceUpdateNamespaceExportSinkOperationName), h.DeleteNamespaceExportSink(CloudServiceDeleteNamespaceExportSinkOperationName), h.ValidateNamespaceExportSink(CloudServiceValidateNamespaceExportSinkOperationName))
	if err != nil {
		return nil, err
	}
	return svc, nil
}

type UnimplementedCloudServiceNexusHandler struct{}

func (h *UnimplementedCloudServiceNexusHandler) mustEmbedUnimplementedCloudServiceNexusHandler() {}
func (h *UnimplementedCloudServiceNexusHandler) GetUsers(name string) nexus.Operation[*v1.GetUsersRequest, *v1.GetUsersResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetUser(name string) nexus.Operation[*v1.GetUserRequest, *v1.GetUserResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) CreateUser(name string) nexus.Operation[*v1.CreateUserRequest, *v1.CreateUserResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) UpdateUser(name string) nexus.Operation[*v1.UpdateUserRequest, *v1.UpdateUserResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) DeleteUser(name string) nexus.Operation[*v1.DeleteUserRequest, *v1.DeleteUserResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) SetUserNamespaceAccess(name string) nexus.Operation[*v1.SetUserNamespaceAccessRequest, *v1.SetUserNamespaceAccessResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetAsyncOperation(name string) nexus.Operation[*v1.GetAsyncOperationRequest, *v1.GetAsyncOperationResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) CreateNamespace(name string) nexus.Operation[*v1.CreateNamespaceRequest, *v1.CreateNamespaceResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetNamespaces(name string) nexus.Operation[*v1.GetNamespacesRequest, *v1.GetNamespacesResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetNamespace(name string) nexus.Operation[*v1.GetNamespaceRequest, *v1.GetNamespaceResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) UpdateNamespace(name string) nexus.Operation[*v1.UpdateNamespaceRequest, *v1.UpdateNamespaceResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) RenameCustomSearchAttribute(name string) nexus.Operation[*v1.RenameCustomSearchAttributeRequest, *v1.RenameCustomSearchAttributeResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) DeleteNamespace(name string) nexus.Operation[*v1.DeleteNamespaceRequest, *v1.DeleteNamespaceResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) FailoverNamespaceRegion(name string) nexus.Operation[*v1.FailoverNamespaceRegionRequest, *v1.FailoverNamespaceRegionResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) AddNamespaceRegion(name string) nexus.Operation[*v1.AddNamespaceRegionRequest, *v1.AddNamespaceRegionResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetRegions(name string) nexus.Operation[*v1.GetRegionsRequest, *v1.GetRegionsResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetRegion(name string) nexus.Operation[*v1.GetRegionRequest, *v1.GetRegionResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetApiKeys(name string) nexus.Operation[*v1.GetApiKeysRequest, *v1.GetApiKeysResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetApiKey(name string) nexus.Operation[*v1.GetApiKeyRequest, *v1.GetApiKeyResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) CreateApiKey(name string) nexus.Operation[*v1.CreateApiKeyRequest, *v1.CreateApiKeyResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) UpdateApiKey(name string) nexus.Operation[*v1.UpdateApiKeyRequest, *v1.UpdateApiKeyResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) DeleteApiKey(name string) nexus.Operation[*v1.DeleteApiKeyRequest, *v1.DeleteApiKeyResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetNexusEndpoints(name string) nexus.Operation[*v1.GetNexusEndpointsRequest, *v1.GetNexusEndpointsResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetNexusEndpoint(name string) nexus.Operation[*v1.GetNexusEndpointRequest, *v1.GetNexusEndpointResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) CreateNexusEndpoint(name string) nexus.Operation[*v1.CreateNexusEndpointRequest, *v1.CreateNexusEndpointResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) UpdateNexusEndpoint(name string) nexus.Operation[*v1.UpdateNexusEndpointRequest, *v1.UpdateNexusEndpointResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) DeleteNexusEndpoint(name string) nexus.Operation[*v1.DeleteNexusEndpointRequest, *v1.DeleteNexusEndpointResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetUserGroups(name string) nexus.Operation[*v1.GetUserGroupsRequest, *v1.GetUserGroupsResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetUserGroup(name string) nexus.Operation[*v1.GetUserGroupRequest, *v1.GetUserGroupResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) CreateUserGroup(name string) nexus.Operation[*v1.CreateUserGroupRequest, *v1.CreateUserGroupResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) UpdateUserGroup(name string) nexus.Operation[*v1.UpdateUserGroupRequest, *v1.UpdateUserGroupResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) DeleteUserGroup(name string) nexus.Operation[*v1.DeleteUserGroupRequest, *v1.DeleteUserGroupResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) SetUserGroupNamespaceAccess(name string) nexus.Operation[*v1.SetUserGroupNamespaceAccessRequest, *v1.SetUserGroupNamespaceAccessResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) CreateServiceAccount(name string) nexus.Operation[*v1.CreateServiceAccountRequest, *v1.CreateServiceAccountResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetServiceAccount(name string) nexus.Operation[*v1.GetServiceAccountRequest, *v1.GetServiceAccountResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetServiceAccounts(name string) nexus.Operation[*v1.GetServiceAccountsRequest, *v1.GetServiceAccountsResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) UpdateServiceAccount(name string) nexus.Operation[*v1.UpdateServiceAccountRequest, *v1.UpdateServiceAccountResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) DeleteServiceAccount(name string) nexus.Operation[*v1.DeleteServiceAccountRequest, *v1.DeleteServiceAccountResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetUsage(name string) nexus.Operation[*v1.GetUsageRequest, *v1.GetUsageResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetAccount(name string) nexus.Operation[*v1.GetAccountRequest, *v1.GetAccountResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) UpdateAccount(name string) nexus.Operation[*v1.UpdateAccountRequest, *v1.UpdateAccountResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) CreateNamespaceExportSink(name string) nexus.Operation[*v1.CreateNamespaceExportSinkRequest, *v1.CreateNamespaceExportSinkResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetNamespaceExportSink(name string) nexus.Operation[*v1.GetNamespaceExportSinkRequest, *v1.GetNamespaceExportSinkResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) GetNamespaceExportSinks(name string) nexus.Operation[*v1.GetNamespaceExportSinksRequest, *v1.GetNamespaceExportSinksResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) UpdateNamespaceExportSink(name string) nexus.Operation[*v1.UpdateNamespaceExportSinkRequest, *v1.UpdateNamespaceExportSinkResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) DeleteNamespaceExportSink(name string) nexus.Operation[*v1.DeleteNamespaceExportSinkRequest, *v1.DeleteNamespaceExportSinkResponse] {
	panic("TODO")
}
func (h *UnimplementedCloudServiceNexusHandler) ValidateNamespaceExportSink(name string) nexus.Operation[*v1.ValidateNamespaceExportSinkRequest, *v1.ValidateNamespaceExportSinkResponse] {
	panic("TODO")
}

type CloudServiceNexusHTTPClient struct {
	client nexus.HTTPClient
}

// NewCloudServiceNexusHTTPClient initializes a new CloudServiceNexusHTTPClient.
// options.Service is overridden with the defined proto service name.
func NewCloudServiceNexusHTTPClient(options nexus.HTTPClientOptions) (*CloudServiceNexusHTTPClient, error) {
	options.Service = CloudServiceServiceName
	if options.Serializer == nil {
		options.Serializer = nexusproto.Serializer(nexusproto.SerializerModePreferJSON)
	}
	client, err := nexus.NewHTTPClient(options)
	if err != nil {
		return nil, err
	}
	return &CloudServiceNexusHTTPClient{
		client: *client,
	}, nil
}

type CloudServiceGetUsersOperationStartResult struct {
	Successful *v1.GetUsersResponse
	Pending    *nexus.OperationHandle[*v1.GetUsersResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetUsersAsync(ctx context.Context, input *v1.GetUsersRequest, options nexus.StartOperationOptions) (*CloudServiceGetUsersOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetUsersOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetUsersOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetUsers(ctx context.Context, input *v1.GetUsersRequest, options nexus.ExecuteOperationOptions) (*v1.GetUsersResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetUsersOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetUsersHandle(id string) (*nexus.OperationHandle[*v1.GetUsersResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetUsersOperation, id)
}

type CloudServiceGetUserOperationStartResult struct {
	Successful *v1.GetUserResponse
	Pending    *nexus.OperationHandle[*v1.GetUserResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetUserAsync(ctx context.Context, input *v1.GetUserRequest, options nexus.StartOperationOptions) (*CloudServiceGetUserOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetUserOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetUserOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetUser(ctx context.Context, input *v1.GetUserRequest, options nexus.ExecuteOperationOptions) (*v1.GetUserResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetUserOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetUserHandle(id string) (*nexus.OperationHandle[*v1.GetUserResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetUserOperation, id)
}

type CloudServiceCreateUserOperationStartResult struct {
	Successful *v1.CreateUserResponse
	Pending    *nexus.OperationHandle[*v1.CreateUserResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) CreateUserAsync(ctx context.Context, input *v1.CreateUserRequest, options nexus.StartOperationOptions) (*CloudServiceCreateUserOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceCreateUserOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceCreateUserOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) CreateUser(ctx context.Context, input *v1.CreateUserRequest, options nexus.ExecuteOperationOptions) (*v1.CreateUserResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceCreateUserOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewCreateUserHandle(id string) (*nexus.OperationHandle[*v1.CreateUserResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceCreateUserOperation, id)
}

type CloudServiceUpdateUserOperationStartResult struct {
	Successful *v1.UpdateUserResponse
	Pending    *nexus.OperationHandle[*v1.UpdateUserResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) UpdateUserAsync(ctx context.Context, input *v1.UpdateUserRequest, options nexus.StartOperationOptions) (*CloudServiceUpdateUserOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceUpdateUserOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceUpdateUserOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) UpdateUser(ctx context.Context, input *v1.UpdateUserRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateUserResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceUpdateUserOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewUpdateUserHandle(id string) (*nexus.OperationHandle[*v1.UpdateUserResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceUpdateUserOperation, id)
}

type CloudServiceDeleteUserOperationStartResult struct {
	Successful *v1.DeleteUserResponse
	Pending    *nexus.OperationHandle[*v1.DeleteUserResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) DeleteUserAsync(ctx context.Context, input *v1.DeleteUserRequest, options nexus.StartOperationOptions) (*CloudServiceDeleteUserOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceDeleteUserOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceDeleteUserOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) DeleteUser(ctx context.Context, input *v1.DeleteUserRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteUserResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceDeleteUserOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewDeleteUserHandle(id string) (*nexus.OperationHandle[*v1.DeleteUserResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceDeleteUserOperation, id)
}

type CloudServiceSetUserNamespaceAccessOperationStartResult struct {
	Successful *v1.SetUserNamespaceAccessResponse
	Pending    *nexus.OperationHandle[*v1.SetUserNamespaceAccessResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) SetUserNamespaceAccessAsync(ctx context.Context, input *v1.SetUserNamespaceAccessRequest, options nexus.StartOperationOptions) (*CloudServiceSetUserNamespaceAccessOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceSetUserNamespaceAccessOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceSetUserNamespaceAccessOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) SetUserNamespaceAccess(ctx context.Context, input *v1.SetUserNamespaceAccessRequest, options nexus.ExecuteOperationOptions) (*v1.SetUserNamespaceAccessResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceSetUserNamespaceAccessOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewSetUserNamespaceAccessHandle(id string) (*nexus.OperationHandle[*v1.SetUserNamespaceAccessResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceSetUserNamespaceAccessOperation, id)
}

type CloudServiceGetAsyncOperationOperationStartResult struct {
	Successful *v1.GetAsyncOperationResponse
	Pending    *nexus.OperationHandle[*v1.GetAsyncOperationResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetAsyncOperationAsync(ctx context.Context, input *v1.GetAsyncOperationRequest, options nexus.StartOperationOptions) (*CloudServiceGetAsyncOperationOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetAsyncOperationOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetAsyncOperationOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetAsyncOperation(ctx context.Context, input *v1.GetAsyncOperationRequest, options nexus.ExecuteOperationOptions) (*v1.GetAsyncOperationResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetAsyncOperationOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetAsyncOperationHandle(id string) (*nexus.OperationHandle[*v1.GetAsyncOperationResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetAsyncOperationOperation, id)
}

type CloudServiceCreateNamespaceOperationStartResult struct {
	Successful *v1.CreateNamespaceResponse
	Pending    *nexus.OperationHandle[*v1.CreateNamespaceResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) CreateNamespaceAsync(ctx context.Context, input *v1.CreateNamespaceRequest, options nexus.StartOperationOptions) (*CloudServiceCreateNamespaceOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceCreateNamespaceOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceCreateNamespaceOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) CreateNamespace(ctx context.Context, input *v1.CreateNamespaceRequest, options nexus.ExecuteOperationOptions) (*v1.CreateNamespaceResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceCreateNamespaceOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewCreateNamespaceHandle(id string) (*nexus.OperationHandle[*v1.CreateNamespaceResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceCreateNamespaceOperation, id)
}

type CloudServiceGetNamespacesOperationStartResult struct {
	Successful *v1.GetNamespacesResponse
	Pending    *nexus.OperationHandle[*v1.GetNamespacesResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetNamespacesAsync(ctx context.Context, input *v1.GetNamespacesRequest, options nexus.StartOperationOptions) (*CloudServiceGetNamespacesOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetNamespacesOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetNamespacesOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetNamespaces(ctx context.Context, input *v1.GetNamespacesRequest, options nexus.ExecuteOperationOptions) (*v1.GetNamespacesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetNamespacesOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetNamespacesHandle(id string) (*nexus.OperationHandle[*v1.GetNamespacesResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetNamespacesOperation, id)
}

type CloudServiceGetNamespaceOperationStartResult struct {
	Successful *v1.GetNamespaceResponse
	Pending    *nexus.OperationHandle[*v1.GetNamespaceResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetNamespaceAsync(ctx context.Context, input *v1.GetNamespaceRequest, options nexus.StartOperationOptions) (*CloudServiceGetNamespaceOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetNamespaceOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetNamespaceOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetNamespace(ctx context.Context, input *v1.GetNamespaceRequest, options nexus.ExecuteOperationOptions) (*v1.GetNamespaceResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetNamespaceOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetNamespaceHandle(id string) (*nexus.OperationHandle[*v1.GetNamespaceResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetNamespaceOperation, id)
}

type CloudServiceUpdateNamespaceOperationStartResult struct {
	Successful *v1.UpdateNamespaceResponse
	Pending    *nexus.OperationHandle[*v1.UpdateNamespaceResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) UpdateNamespaceAsync(ctx context.Context, input *v1.UpdateNamespaceRequest, options nexus.StartOperationOptions) (*CloudServiceUpdateNamespaceOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceUpdateNamespaceOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceUpdateNamespaceOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) UpdateNamespace(ctx context.Context, input *v1.UpdateNamespaceRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateNamespaceResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceUpdateNamespaceOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewUpdateNamespaceHandle(id string) (*nexus.OperationHandle[*v1.UpdateNamespaceResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceUpdateNamespaceOperation, id)
}

type CloudServiceRenameCustomSearchAttributeOperationStartResult struct {
	Successful *v1.RenameCustomSearchAttributeResponse
	Pending    *nexus.OperationHandle[*v1.RenameCustomSearchAttributeResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) RenameCustomSearchAttributeAsync(ctx context.Context, input *v1.RenameCustomSearchAttributeRequest, options nexus.StartOperationOptions) (*CloudServiceRenameCustomSearchAttributeOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceRenameCustomSearchAttributeOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceRenameCustomSearchAttributeOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) RenameCustomSearchAttribute(ctx context.Context, input *v1.RenameCustomSearchAttributeRequest, options nexus.ExecuteOperationOptions) (*v1.RenameCustomSearchAttributeResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceRenameCustomSearchAttributeOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewRenameCustomSearchAttributeHandle(id string) (*nexus.OperationHandle[*v1.RenameCustomSearchAttributeResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceRenameCustomSearchAttributeOperation, id)
}

type CloudServiceDeleteNamespaceOperationStartResult struct {
	Successful *v1.DeleteNamespaceResponse
	Pending    *nexus.OperationHandle[*v1.DeleteNamespaceResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) DeleteNamespaceAsync(ctx context.Context, input *v1.DeleteNamespaceRequest, options nexus.StartOperationOptions) (*CloudServiceDeleteNamespaceOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceDeleteNamespaceOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceDeleteNamespaceOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) DeleteNamespace(ctx context.Context, input *v1.DeleteNamespaceRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteNamespaceResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceDeleteNamespaceOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewDeleteNamespaceHandle(id string) (*nexus.OperationHandle[*v1.DeleteNamespaceResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceDeleteNamespaceOperation, id)
}

type CloudServiceFailoverNamespaceRegionOperationStartResult struct {
	Successful *v1.FailoverNamespaceRegionResponse
	Pending    *nexus.OperationHandle[*v1.FailoverNamespaceRegionResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) FailoverNamespaceRegionAsync(ctx context.Context, input *v1.FailoverNamespaceRegionRequest, options nexus.StartOperationOptions) (*CloudServiceFailoverNamespaceRegionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceFailoverNamespaceRegionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceFailoverNamespaceRegionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) FailoverNamespaceRegion(ctx context.Context, input *v1.FailoverNamespaceRegionRequest, options nexus.ExecuteOperationOptions) (*v1.FailoverNamespaceRegionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceFailoverNamespaceRegionOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewFailoverNamespaceRegionHandle(id string) (*nexus.OperationHandle[*v1.FailoverNamespaceRegionResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceFailoverNamespaceRegionOperation, id)
}

type CloudServiceAddNamespaceRegionOperationStartResult struct {
	Successful *v1.AddNamespaceRegionResponse
	Pending    *nexus.OperationHandle[*v1.AddNamespaceRegionResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) AddNamespaceRegionAsync(ctx context.Context, input *v1.AddNamespaceRegionRequest, options nexus.StartOperationOptions) (*CloudServiceAddNamespaceRegionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceAddNamespaceRegionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceAddNamespaceRegionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) AddNamespaceRegion(ctx context.Context, input *v1.AddNamespaceRegionRequest, options nexus.ExecuteOperationOptions) (*v1.AddNamespaceRegionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceAddNamespaceRegionOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewAddNamespaceRegionHandle(id string) (*nexus.OperationHandle[*v1.AddNamespaceRegionResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceAddNamespaceRegionOperation, id)
}

type CloudServiceGetRegionsOperationStartResult struct {
	Successful *v1.GetRegionsResponse
	Pending    *nexus.OperationHandle[*v1.GetRegionsResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetRegionsAsync(ctx context.Context, input *v1.GetRegionsRequest, options nexus.StartOperationOptions) (*CloudServiceGetRegionsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetRegionsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetRegionsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetRegions(ctx context.Context, input *v1.GetRegionsRequest, options nexus.ExecuteOperationOptions) (*v1.GetRegionsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetRegionsOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetRegionsHandle(id string) (*nexus.OperationHandle[*v1.GetRegionsResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetRegionsOperation, id)
}

type CloudServiceGetRegionOperationStartResult struct {
	Successful *v1.GetRegionResponse
	Pending    *nexus.OperationHandle[*v1.GetRegionResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetRegionAsync(ctx context.Context, input *v1.GetRegionRequest, options nexus.StartOperationOptions) (*CloudServiceGetRegionOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetRegionOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetRegionOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetRegion(ctx context.Context, input *v1.GetRegionRequest, options nexus.ExecuteOperationOptions) (*v1.GetRegionResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetRegionOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetRegionHandle(id string) (*nexus.OperationHandle[*v1.GetRegionResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetRegionOperation, id)
}

type CloudServiceGetApiKeysOperationStartResult struct {
	Successful *v1.GetApiKeysResponse
	Pending    *nexus.OperationHandle[*v1.GetApiKeysResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetApiKeysAsync(ctx context.Context, input *v1.GetApiKeysRequest, options nexus.StartOperationOptions) (*CloudServiceGetApiKeysOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetApiKeysOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetApiKeysOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetApiKeys(ctx context.Context, input *v1.GetApiKeysRequest, options nexus.ExecuteOperationOptions) (*v1.GetApiKeysResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetApiKeysOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetApiKeysHandle(id string) (*nexus.OperationHandle[*v1.GetApiKeysResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetApiKeysOperation, id)
}

type CloudServiceGetApiKeyOperationStartResult struct {
	Successful *v1.GetApiKeyResponse
	Pending    *nexus.OperationHandle[*v1.GetApiKeyResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetApiKeyAsync(ctx context.Context, input *v1.GetApiKeyRequest, options nexus.StartOperationOptions) (*CloudServiceGetApiKeyOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetApiKeyOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetApiKeyOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetApiKey(ctx context.Context, input *v1.GetApiKeyRequest, options nexus.ExecuteOperationOptions) (*v1.GetApiKeyResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetApiKeyOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetApiKeyHandle(id string) (*nexus.OperationHandle[*v1.GetApiKeyResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetApiKeyOperation, id)
}

type CloudServiceCreateApiKeyOperationStartResult struct {
	Successful *v1.CreateApiKeyResponse
	Pending    *nexus.OperationHandle[*v1.CreateApiKeyResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) CreateApiKeyAsync(ctx context.Context, input *v1.CreateApiKeyRequest, options nexus.StartOperationOptions) (*CloudServiceCreateApiKeyOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceCreateApiKeyOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceCreateApiKeyOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) CreateApiKey(ctx context.Context, input *v1.CreateApiKeyRequest, options nexus.ExecuteOperationOptions) (*v1.CreateApiKeyResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceCreateApiKeyOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewCreateApiKeyHandle(id string) (*nexus.OperationHandle[*v1.CreateApiKeyResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceCreateApiKeyOperation, id)
}

type CloudServiceUpdateApiKeyOperationStartResult struct {
	Successful *v1.UpdateApiKeyResponse
	Pending    *nexus.OperationHandle[*v1.UpdateApiKeyResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) UpdateApiKeyAsync(ctx context.Context, input *v1.UpdateApiKeyRequest, options nexus.StartOperationOptions) (*CloudServiceUpdateApiKeyOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceUpdateApiKeyOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceUpdateApiKeyOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) UpdateApiKey(ctx context.Context, input *v1.UpdateApiKeyRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateApiKeyResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceUpdateApiKeyOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewUpdateApiKeyHandle(id string) (*nexus.OperationHandle[*v1.UpdateApiKeyResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceUpdateApiKeyOperation, id)
}

type CloudServiceDeleteApiKeyOperationStartResult struct {
	Successful *v1.DeleteApiKeyResponse
	Pending    *nexus.OperationHandle[*v1.DeleteApiKeyResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) DeleteApiKeyAsync(ctx context.Context, input *v1.DeleteApiKeyRequest, options nexus.StartOperationOptions) (*CloudServiceDeleteApiKeyOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceDeleteApiKeyOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceDeleteApiKeyOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) DeleteApiKey(ctx context.Context, input *v1.DeleteApiKeyRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteApiKeyResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceDeleteApiKeyOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewDeleteApiKeyHandle(id string) (*nexus.OperationHandle[*v1.DeleteApiKeyResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceDeleteApiKeyOperation, id)
}

type CloudServiceGetNexusEndpointsOperationStartResult struct {
	Successful *v1.GetNexusEndpointsResponse
	Pending    *nexus.OperationHandle[*v1.GetNexusEndpointsResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetNexusEndpointsAsync(ctx context.Context, input *v1.GetNexusEndpointsRequest, options nexus.StartOperationOptions) (*CloudServiceGetNexusEndpointsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetNexusEndpointsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetNexusEndpointsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetNexusEndpoints(ctx context.Context, input *v1.GetNexusEndpointsRequest, options nexus.ExecuteOperationOptions) (*v1.GetNexusEndpointsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetNexusEndpointsOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetNexusEndpointsHandle(id string) (*nexus.OperationHandle[*v1.GetNexusEndpointsResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetNexusEndpointsOperation, id)
}

type CloudServiceGetNexusEndpointOperationStartResult struct {
	Successful *v1.GetNexusEndpointResponse
	Pending    *nexus.OperationHandle[*v1.GetNexusEndpointResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetNexusEndpointAsync(ctx context.Context, input *v1.GetNexusEndpointRequest, options nexus.StartOperationOptions) (*CloudServiceGetNexusEndpointOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetNexusEndpointOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetNexusEndpointOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetNexusEndpoint(ctx context.Context, input *v1.GetNexusEndpointRequest, options nexus.ExecuteOperationOptions) (*v1.GetNexusEndpointResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetNexusEndpointOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetNexusEndpointHandle(id string) (*nexus.OperationHandle[*v1.GetNexusEndpointResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetNexusEndpointOperation, id)
}

type CloudServiceCreateNexusEndpointOperationStartResult struct {
	Successful *v1.CreateNexusEndpointResponse
	Pending    *nexus.OperationHandle[*v1.CreateNexusEndpointResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) CreateNexusEndpointAsync(ctx context.Context, input *v1.CreateNexusEndpointRequest, options nexus.StartOperationOptions) (*CloudServiceCreateNexusEndpointOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceCreateNexusEndpointOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceCreateNexusEndpointOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) CreateNexusEndpoint(ctx context.Context, input *v1.CreateNexusEndpointRequest, options nexus.ExecuteOperationOptions) (*v1.CreateNexusEndpointResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceCreateNexusEndpointOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewCreateNexusEndpointHandle(id string) (*nexus.OperationHandle[*v1.CreateNexusEndpointResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceCreateNexusEndpointOperation, id)
}

type CloudServiceUpdateNexusEndpointOperationStartResult struct {
	Successful *v1.UpdateNexusEndpointResponse
	Pending    *nexus.OperationHandle[*v1.UpdateNexusEndpointResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) UpdateNexusEndpointAsync(ctx context.Context, input *v1.UpdateNexusEndpointRequest, options nexus.StartOperationOptions) (*CloudServiceUpdateNexusEndpointOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceUpdateNexusEndpointOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceUpdateNexusEndpointOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) UpdateNexusEndpoint(ctx context.Context, input *v1.UpdateNexusEndpointRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateNexusEndpointResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceUpdateNexusEndpointOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewUpdateNexusEndpointHandle(id string) (*nexus.OperationHandle[*v1.UpdateNexusEndpointResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceUpdateNexusEndpointOperation, id)
}

type CloudServiceDeleteNexusEndpointOperationStartResult struct {
	Successful *v1.DeleteNexusEndpointResponse
	Pending    *nexus.OperationHandle[*v1.DeleteNexusEndpointResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) DeleteNexusEndpointAsync(ctx context.Context, input *v1.DeleteNexusEndpointRequest, options nexus.StartOperationOptions) (*CloudServiceDeleteNexusEndpointOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceDeleteNexusEndpointOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceDeleteNexusEndpointOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) DeleteNexusEndpoint(ctx context.Context, input *v1.DeleteNexusEndpointRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteNexusEndpointResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceDeleteNexusEndpointOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewDeleteNexusEndpointHandle(id string) (*nexus.OperationHandle[*v1.DeleteNexusEndpointResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceDeleteNexusEndpointOperation, id)
}

type CloudServiceGetUserGroupsOperationStartResult struct {
	Successful *v1.GetUserGroupsResponse
	Pending    *nexus.OperationHandle[*v1.GetUserGroupsResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetUserGroupsAsync(ctx context.Context, input *v1.GetUserGroupsRequest, options nexus.StartOperationOptions) (*CloudServiceGetUserGroupsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetUserGroupsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetUserGroupsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetUserGroups(ctx context.Context, input *v1.GetUserGroupsRequest, options nexus.ExecuteOperationOptions) (*v1.GetUserGroupsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetUserGroupsOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetUserGroupsHandle(id string) (*nexus.OperationHandle[*v1.GetUserGroupsResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetUserGroupsOperation, id)
}

type CloudServiceGetUserGroupOperationStartResult struct {
	Successful *v1.GetUserGroupResponse
	Pending    *nexus.OperationHandle[*v1.GetUserGroupResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetUserGroupAsync(ctx context.Context, input *v1.GetUserGroupRequest, options nexus.StartOperationOptions) (*CloudServiceGetUserGroupOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetUserGroupOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetUserGroupOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetUserGroup(ctx context.Context, input *v1.GetUserGroupRequest, options nexus.ExecuteOperationOptions) (*v1.GetUserGroupResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetUserGroupOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetUserGroupHandle(id string) (*nexus.OperationHandle[*v1.GetUserGroupResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetUserGroupOperation, id)
}

type CloudServiceCreateUserGroupOperationStartResult struct {
	Successful *v1.CreateUserGroupResponse
	Pending    *nexus.OperationHandle[*v1.CreateUserGroupResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) CreateUserGroupAsync(ctx context.Context, input *v1.CreateUserGroupRequest, options nexus.StartOperationOptions) (*CloudServiceCreateUserGroupOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceCreateUserGroupOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceCreateUserGroupOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) CreateUserGroup(ctx context.Context, input *v1.CreateUserGroupRequest, options nexus.ExecuteOperationOptions) (*v1.CreateUserGroupResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceCreateUserGroupOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewCreateUserGroupHandle(id string) (*nexus.OperationHandle[*v1.CreateUserGroupResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceCreateUserGroupOperation, id)
}

type CloudServiceUpdateUserGroupOperationStartResult struct {
	Successful *v1.UpdateUserGroupResponse
	Pending    *nexus.OperationHandle[*v1.UpdateUserGroupResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) UpdateUserGroupAsync(ctx context.Context, input *v1.UpdateUserGroupRequest, options nexus.StartOperationOptions) (*CloudServiceUpdateUserGroupOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceUpdateUserGroupOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceUpdateUserGroupOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) UpdateUserGroup(ctx context.Context, input *v1.UpdateUserGroupRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateUserGroupResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceUpdateUserGroupOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewUpdateUserGroupHandle(id string) (*nexus.OperationHandle[*v1.UpdateUserGroupResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceUpdateUserGroupOperation, id)
}

type CloudServiceDeleteUserGroupOperationStartResult struct {
	Successful *v1.DeleteUserGroupResponse
	Pending    *nexus.OperationHandle[*v1.DeleteUserGroupResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) DeleteUserGroupAsync(ctx context.Context, input *v1.DeleteUserGroupRequest, options nexus.StartOperationOptions) (*CloudServiceDeleteUserGroupOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceDeleteUserGroupOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceDeleteUserGroupOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) DeleteUserGroup(ctx context.Context, input *v1.DeleteUserGroupRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteUserGroupResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceDeleteUserGroupOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewDeleteUserGroupHandle(id string) (*nexus.OperationHandle[*v1.DeleteUserGroupResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceDeleteUserGroupOperation, id)
}

type CloudServiceSetUserGroupNamespaceAccessOperationStartResult struct {
	Successful *v1.SetUserGroupNamespaceAccessResponse
	Pending    *nexus.OperationHandle[*v1.SetUserGroupNamespaceAccessResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) SetUserGroupNamespaceAccessAsync(ctx context.Context, input *v1.SetUserGroupNamespaceAccessRequest, options nexus.StartOperationOptions) (*CloudServiceSetUserGroupNamespaceAccessOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceSetUserGroupNamespaceAccessOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceSetUserGroupNamespaceAccessOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) SetUserGroupNamespaceAccess(ctx context.Context, input *v1.SetUserGroupNamespaceAccessRequest, options nexus.ExecuteOperationOptions) (*v1.SetUserGroupNamespaceAccessResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceSetUserGroupNamespaceAccessOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewSetUserGroupNamespaceAccessHandle(id string) (*nexus.OperationHandle[*v1.SetUserGroupNamespaceAccessResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceSetUserGroupNamespaceAccessOperation, id)
}

type CloudServiceCreateServiceAccountOperationStartResult struct {
	Successful *v1.CreateServiceAccountResponse
	Pending    *nexus.OperationHandle[*v1.CreateServiceAccountResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) CreateServiceAccountAsync(ctx context.Context, input *v1.CreateServiceAccountRequest, options nexus.StartOperationOptions) (*CloudServiceCreateServiceAccountOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceCreateServiceAccountOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceCreateServiceAccountOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) CreateServiceAccount(ctx context.Context, input *v1.CreateServiceAccountRequest, options nexus.ExecuteOperationOptions) (*v1.CreateServiceAccountResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceCreateServiceAccountOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewCreateServiceAccountHandle(id string) (*nexus.OperationHandle[*v1.CreateServiceAccountResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceCreateServiceAccountOperation, id)
}

type CloudServiceGetServiceAccountOperationStartResult struct {
	Successful *v1.GetServiceAccountResponse
	Pending    *nexus.OperationHandle[*v1.GetServiceAccountResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetServiceAccountAsync(ctx context.Context, input *v1.GetServiceAccountRequest, options nexus.StartOperationOptions) (*CloudServiceGetServiceAccountOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetServiceAccountOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetServiceAccountOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetServiceAccount(ctx context.Context, input *v1.GetServiceAccountRequest, options nexus.ExecuteOperationOptions) (*v1.GetServiceAccountResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetServiceAccountOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetServiceAccountHandle(id string) (*nexus.OperationHandle[*v1.GetServiceAccountResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetServiceAccountOperation, id)
}

type CloudServiceGetServiceAccountsOperationStartResult struct {
	Successful *v1.GetServiceAccountsResponse
	Pending    *nexus.OperationHandle[*v1.GetServiceAccountsResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetServiceAccountsAsync(ctx context.Context, input *v1.GetServiceAccountsRequest, options nexus.StartOperationOptions) (*CloudServiceGetServiceAccountsOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetServiceAccountsOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetServiceAccountsOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetServiceAccounts(ctx context.Context, input *v1.GetServiceAccountsRequest, options nexus.ExecuteOperationOptions) (*v1.GetServiceAccountsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetServiceAccountsOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetServiceAccountsHandle(id string) (*nexus.OperationHandle[*v1.GetServiceAccountsResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetServiceAccountsOperation, id)
}

type CloudServiceUpdateServiceAccountOperationStartResult struct {
	Successful *v1.UpdateServiceAccountResponse
	Pending    *nexus.OperationHandle[*v1.UpdateServiceAccountResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) UpdateServiceAccountAsync(ctx context.Context, input *v1.UpdateServiceAccountRequest, options nexus.StartOperationOptions) (*CloudServiceUpdateServiceAccountOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceUpdateServiceAccountOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceUpdateServiceAccountOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) UpdateServiceAccount(ctx context.Context, input *v1.UpdateServiceAccountRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateServiceAccountResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceUpdateServiceAccountOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewUpdateServiceAccountHandle(id string) (*nexus.OperationHandle[*v1.UpdateServiceAccountResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceUpdateServiceAccountOperation, id)
}

type CloudServiceDeleteServiceAccountOperationStartResult struct {
	Successful *v1.DeleteServiceAccountResponse
	Pending    *nexus.OperationHandle[*v1.DeleteServiceAccountResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) DeleteServiceAccountAsync(ctx context.Context, input *v1.DeleteServiceAccountRequest, options nexus.StartOperationOptions) (*CloudServiceDeleteServiceAccountOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceDeleteServiceAccountOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceDeleteServiceAccountOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) DeleteServiceAccount(ctx context.Context, input *v1.DeleteServiceAccountRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteServiceAccountResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceDeleteServiceAccountOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewDeleteServiceAccountHandle(id string) (*nexus.OperationHandle[*v1.DeleteServiceAccountResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceDeleteServiceAccountOperation, id)
}

type CloudServiceGetUsageOperationStartResult struct {
	Successful *v1.GetUsageResponse
	Pending    *nexus.OperationHandle[*v1.GetUsageResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetUsageAsync(ctx context.Context, input *v1.GetUsageRequest, options nexus.StartOperationOptions) (*CloudServiceGetUsageOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetUsageOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetUsageOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetUsage(ctx context.Context, input *v1.GetUsageRequest, options nexus.ExecuteOperationOptions) (*v1.GetUsageResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetUsageOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetUsageHandle(id string) (*nexus.OperationHandle[*v1.GetUsageResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetUsageOperation, id)
}

type CloudServiceGetAccountOperationStartResult struct {
	Successful *v1.GetAccountResponse
	Pending    *nexus.OperationHandle[*v1.GetAccountResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetAccountAsync(ctx context.Context, input *v1.GetAccountRequest, options nexus.StartOperationOptions) (*CloudServiceGetAccountOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetAccountOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetAccountOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetAccount(ctx context.Context, input *v1.GetAccountRequest, options nexus.ExecuteOperationOptions) (*v1.GetAccountResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetAccountOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetAccountHandle(id string) (*nexus.OperationHandle[*v1.GetAccountResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetAccountOperation, id)
}

type CloudServiceUpdateAccountOperationStartResult struct {
	Successful *v1.UpdateAccountResponse
	Pending    *nexus.OperationHandle[*v1.UpdateAccountResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) UpdateAccountAsync(ctx context.Context, input *v1.UpdateAccountRequest, options nexus.StartOperationOptions) (*CloudServiceUpdateAccountOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceUpdateAccountOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceUpdateAccountOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) UpdateAccount(ctx context.Context, input *v1.UpdateAccountRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateAccountResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceUpdateAccountOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewUpdateAccountHandle(id string) (*nexus.OperationHandle[*v1.UpdateAccountResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceUpdateAccountOperation, id)
}

type CloudServiceCreateNamespaceExportSinkOperationStartResult struct {
	Successful *v1.CreateNamespaceExportSinkResponse
	Pending    *nexus.OperationHandle[*v1.CreateNamespaceExportSinkResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) CreateNamespaceExportSinkAsync(ctx context.Context, input *v1.CreateNamespaceExportSinkRequest, options nexus.StartOperationOptions) (*CloudServiceCreateNamespaceExportSinkOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceCreateNamespaceExportSinkOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceCreateNamespaceExportSinkOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) CreateNamespaceExportSink(ctx context.Context, input *v1.CreateNamespaceExportSinkRequest, options nexus.ExecuteOperationOptions) (*v1.CreateNamespaceExportSinkResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceCreateNamespaceExportSinkOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewCreateNamespaceExportSinkHandle(id string) (*nexus.OperationHandle[*v1.CreateNamespaceExportSinkResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceCreateNamespaceExportSinkOperation, id)
}

type CloudServiceGetNamespaceExportSinkOperationStartResult struct {
	Successful *v1.GetNamespaceExportSinkResponse
	Pending    *nexus.OperationHandle[*v1.GetNamespaceExportSinkResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetNamespaceExportSinkAsync(ctx context.Context, input *v1.GetNamespaceExportSinkRequest, options nexus.StartOperationOptions) (*CloudServiceGetNamespaceExportSinkOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetNamespaceExportSinkOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetNamespaceExportSinkOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetNamespaceExportSink(ctx context.Context, input *v1.GetNamespaceExportSinkRequest, options nexus.ExecuteOperationOptions) (*v1.GetNamespaceExportSinkResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetNamespaceExportSinkOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetNamespaceExportSinkHandle(id string) (*nexus.OperationHandle[*v1.GetNamespaceExportSinkResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetNamespaceExportSinkOperation, id)
}

type CloudServiceGetNamespaceExportSinksOperationStartResult struct {
	Successful *v1.GetNamespaceExportSinksResponse
	Pending    *nexus.OperationHandle[*v1.GetNamespaceExportSinksResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) GetNamespaceExportSinksAsync(ctx context.Context, input *v1.GetNamespaceExportSinksRequest, options nexus.StartOperationOptions) (*CloudServiceGetNamespaceExportSinksOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceGetNamespaceExportSinksOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceGetNamespaceExportSinksOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) GetNamespaceExportSinks(ctx context.Context, input *v1.GetNamespaceExportSinksRequest, options nexus.ExecuteOperationOptions) (*v1.GetNamespaceExportSinksResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceGetNamespaceExportSinksOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewGetNamespaceExportSinksHandle(id string) (*nexus.OperationHandle[*v1.GetNamespaceExportSinksResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceGetNamespaceExportSinksOperation, id)
}

type CloudServiceUpdateNamespaceExportSinkOperationStartResult struct {
	Successful *v1.UpdateNamespaceExportSinkResponse
	Pending    *nexus.OperationHandle[*v1.UpdateNamespaceExportSinkResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) UpdateNamespaceExportSinkAsync(ctx context.Context, input *v1.UpdateNamespaceExportSinkRequest, options nexus.StartOperationOptions) (*CloudServiceUpdateNamespaceExportSinkOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceUpdateNamespaceExportSinkOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceUpdateNamespaceExportSinkOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) UpdateNamespaceExportSink(ctx context.Context, input *v1.UpdateNamespaceExportSinkRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateNamespaceExportSinkResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceUpdateNamespaceExportSinkOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewUpdateNamespaceExportSinkHandle(id string) (*nexus.OperationHandle[*v1.UpdateNamespaceExportSinkResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceUpdateNamespaceExportSinkOperation, id)
}

type CloudServiceDeleteNamespaceExportSinkOperationStartResult struct {
	Successful *v1.DeleteNamespaceExportSinkResponse
	Pending    *nexus.OperationHandle[*v1.DeleteNamespaceExportSinkResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) DeleteNamespaceExportSinkAsync(ctx context.Context, input *v1.DeleteNamespaceExportSinkRequest, options nexus.StartOperationOptions) (*CloudServiceDeleteNamespaceExportSinkOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceDeleteNamespaceExportSinkOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceDeleteNamespaceExportSinkOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) DeleteNamespaceExportSink(ctx context.Context, input *v1.DeleteNamespaceExportSinkRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteNamespaceExportSinkResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceDeleteNamespaceExportSinkOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewDeleteNamespaceExportSinkHandle(id string) (*nexus.OperationHandle[*v1.DeleteNamespaceExportSinkResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceDeleteNamespaceExportSinkOperation, id)
}

type CloudServiceValidateNamespaceExportSinkOperationStartResult struct {
	Successful *v1.ValidateNamespaceExportSinkResponse
	Pending    *nexus.OperationHandle[*v1.ValidateNamespaceExportSinkResponse]
	Links      []nexus.Link
}

func (c *CloudServiceNexusHTTPClient) ValidateNamespaceExportSinkAsync(ctx context.Context, input *v1.ValidateNamespaceExportSinkRequest, options nexus.StartOperationOptions) (*CloudServiceValidateNamespaceExportSinkOperationStartResult, error) {
	res, err := nexus.StartOperation(ctx, &c.client, CloudServiceValidateNamespaceExportSinkOperation, input, options)
	if err != nil {
		return nil, err
	}
	typed := CloudServiceValidateNamespaceExportSinkOperationStartResult{
		Successful: res.Successful,
		Pending:    res.Pending,
		Links:      res.Links,
	}
	return &typed, nil
}
func (c *CloudServiceNexusHTTPClient) ValidateNamespaceExportSink(ctx context.Context, input *v1.ValidateNamespaceExportSinkRequest, options nexus.ExecuteOperationOptions) (*v1.ValidateNamespaceExportSinkResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, CloudServiceValidateNamespaceExportSinkOperation, input, options)
	return output, err
}
func (c *CloudServiceNexusHTTPClient) NewValidateNamespaceExportSinkHandle(id string) (*nexus.OperationHandle[*v1.ValidateNamespaceExportSinkResponse], error) {
	return nexus.NewHandle(&c.client, CloudServiceValidateNamespaceExportSinkOperation, id)
}
