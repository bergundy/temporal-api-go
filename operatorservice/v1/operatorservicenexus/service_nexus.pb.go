// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-nexus. DO NOT EDIT.
// plugins:
//
//	protoc-gen-go-nexus
//	go go1.23.4
//	protoc
//
// source: temporal/api/operatorservice/v1/service.proto
package operatorservicenexus

import (
	"context"

	nexusproto "github.com/nexus-rpc/sdk-go/contrib/nexusproto"
	nexus "github.com/nexus-rpc/sdk-go/nexus"
	v1 "go.temporal.io/api/operatorservice/v1"
)

// OperatorServiceServiceName defines the fully-qualified name for the temporal.api.operatorservice.v1.OperatorService service.
const OperatorServiceServiceName = "temporal.api.operatorservice.v1.OperatorService"

// OperatorServiceAddSearchAttributesOperationName defines the fully-qualified name for the AddSearchAttributes operation.
const OperatorServiceAddSearchAttributesOperationName = "AddSearchAttributes"

var OperatorServiceAddSearchAttributesOperation = nexus.NewOperationReference[*v1.AddSearchAttributesRequest, *v1.AddSearchAttributesResponse](OperatorServiceAddSearchAttributesOperationName)

// OperatorServiceRemoveSearchAttributesOperationName defines the fully-qualified name for the RemoveSearchAttributes operation.
const OperatorServiceRemoveSearchAttributesOperationName = "RemoveSearchAttributes"

var OperatorServiceRemoveSearchAttributesOperation = nexus.NewOperationReference[*v1.RemoveSearchAttributesRequest, *v1.RemoveSearchAttributesResponse](OperatorServiceRemoveSearchAttributesOperationName)

// OperatorServiceListSearchAttributesOperationName defines the fully-qualified name for the ListSearchAttributes operation.
const OperatorServiceListSearchAttributesOperationName = "ListSearchAttributes"

var OperatorServiceListSearchAttributesOperation = nexus.NewOperationReference[*v1.ListSearchAttributesRequest, *v1.ListSearchAttributesResponse](OperatorServiceListSearchAttributesOperationName)

// OperatorServiceDeleteNamespaceOperationName defines the fully-qualified name for the DeleteNamespace operation.
const OperatorServiceDeleteNamespaceOperationName = "DeleteNamespace"

var OperatorServiceDeleteNamespaceOperation = nexus.NewOperationReference[*v1.DeleteNamespaceRequest, *v1.DeleteNamespaceResponse](OperatorServiceDeleteNamespaceOperationName)

// OperatorServiceAddOrUpdateRemoteClusterOperationName defines the fully-qualified name for the AddOrUpdateRemoteCluster operation.
const OperatorServiceAddOrUpdateRemoteClusterOperationName = "AddOrUpdateRemoteCluster"

var OperatorServiceAddOrUpdateRemoteClusterOperation = nexus.NewOperationReference[*v1.AddOrUpdateRemoteClusterRequest, *v1.AddOrUpdateRemoteClusterResponse](OperatorServiceAddOrUpdateRemoteClusterOperationName)

// OperatorServiceRemoveRemoteClusterOperationName defines the fully-qualified name for the RemoveRemoteCluster operation.
const OperatorServiceRemoveRemoteClusterOperationName = "RemoveRemoteCluster"

var OperatorServiceRemoveRemoteClusterOperation = nexus.NewOperationReference[*v1.RemoveRemoteClusterRequest, *v1.RemoveRemoteClusterResponse](OperatorServiceRemoveRemoteClusterOperationName)

// OperatorServiceListClustersOperationName defines the fully-qualified name for the ListClusters operation.
const OperatorServiceListClustersOperationName = "ListClusters"

var OperatorServiceListClustersOperation = nexus.NewOperationReference[*v1.ListClustersRequest, *v1.ListClustersResponse](OperatorServiceListClustersOperationName)

// OperatorServiceGetNexusEndpointOperationName defines the fully-qualified name for the GetNexusEndpoint operation.
const OperatorServiceGetNexusEndpointOperationName = "GetNexusEndpoint"

var OperatorServiceGetNexusEndpointOperation = nexus.NewOperationReference[*v1.GetNexusEndpointRequest, *v1.GetNexusEndpointResponse](OperatorServiceGetNexusEndpointOperationName)

// OperatorServiceCreateNexusEndpointOperationName defines the fully-qualified name for the CreateNexusEndpoint operation.
const OperatorServiceCreateNexusEndpointOperationName = "CreateNexusEndpoint"

var OperatorServiceCreateNexusEndpointOperation = nexus.NewOperationReference[*v1.CreateNexusEndpointRequest, *v1.CreateNexusEndpointResponse](OperatorServiceCreateNexusEndpointOperationName)

// OperatorServiceUpdateNexusEndpointOperationName defines the fully-qualified name for the UpdateNexusEndpoint operation.
const OperatorServiceUpdateNexusEndpointOperationName = "UpdateNexusEndpoint"

var OperatorServiceUpdateNexusEndpointOperation = nexus.NewOperationReference[*v1.UpdateNexusEndpointRequest, *v1.UpdateNexusEndpointResponse](OperatorServiceUpdateNexusEndpointOperationName)

// OperatorServiceDeleteNexusEndpointOperationName defines the fully-qualified name for the DeleteNexusEndpoint operation.
const OperatorServiceDeleteNexusEndpointOperationName = "DeleteNexusEndpoint"

var OperatorServiceDeleteNexusEndpointOperation = nexus.NewOperationReference[*v1.DeleteNexusEndpointRequest, *v1.DeleteNexusEndpointResponse](OperatorServiceDeleteNexusEndpointOperationName)

// OperatorServiceListNexusEndpointsOperationName defines the fully-qualified name for the ListNexusEndpoints operation.
const OperatorServiceListNexusEndpointsOperationName = "ListNexusEndpoints"

var OperatorServiceListNexusEndpointsOperation = nexus.NewOperationReference[*v1.ListNexusEndpointsRequest, *v1.ListNexusEndpointsResponse](OperatorServiceListNexusEndpointsOperationName)

type OperatorServiceNexusServiceHandler interface {
	mustEmbedUnimplementedOperatorServiceNexusServiceHandler()
	AddSearchAttributes(name string) nexus.Operation[*v1.AddSearchAttributesRequest, *v1.AddSearchAttributesResponse]
	RemoveSearchAttributes(name string) nexus.Operation[*v1.RemoveSearchAttributesRequest, *v1.RemoveSearchAttributesResponse]
	ListSearchAttributes(name string) nexus.Operation[*v1.ListSearchAttributesRequest, *v1.ListSearchAttributesResponse]
	DeleteNamespace(name string) nexus.Operation[*v1.DeleteNamespaceRequest, *v1.DeleteNamespaceResponse]
	AddOrUpdateRemoteCluster(name string) nexus.Operation[*v1.AddOrUpdateRemoteClusterRequest, *v1.AddOrUpdateRemoteClusterResponse]
	RemoveRemoteCluster(name string) nexus.Operation[*v1.RemoveRemoteClusterRequest, *v1.RemoveRemoteClusterResponse]
	ListClusters(name string) nexus.Operation[*v1.ListClustersRequest, *v1.ListClustersResponse]
	GetNexusEndpoint(name string) nexus.Operation[*v1.GetNexusEndpointRequest, *v1.GetNexusEndpointResponse]
	CreateNexusEndpoint(name string) nexus.Operation[*v1.CreateNexusEndpointRequest, *v1.CreateNexusEndpointResponse]
	UpdateNexusEndpoint(name string) nexus.Operation[*v1.UpdateNexusEndpointRequest, *v1.UpdateNexusEndpointResponse]
	DeleteNexusEndpoint(name string) nexus.Operation[*v1.DeleteNexusEndpointRequest, *v1.DeleteNexusEndpointResponse]
	ListNexusEndpoints(name string) nexus.Operation[*v1.ListNexusEndpointsRequest, *v1.ListNexusEndpointsResponse]
}

func NewOperatorServiceNexusService(h OperatorServiceNexusServiceHandler) (*nexus.Service, error) {
	svc := nexus.NewService(OperatorServiceServiceName)
	err := svc.Register(h.AddSearchAttributes(OperatorServiceAddSearchAttributesOperationName), h.RemoveSearchAttributes(OperatorServiceRemoveSearchAttributesOperationName), h.ListSearchAttributes(OperatorServiceListSearchAttributesOperationName), h.DeleteNamespace(OperatorServiceDeleteNamespaceOperationName), h.AddOrUpdateRemoteCluster(OperatorServiceAddOrUpdateRemoteClusterOperationName), h.RemoveRemoteCluster(OperatorServiceRemoveRemoteClusterOperationName), h.ListClusters(OperatorServiceListClustersOperationName), h.GetNexusEndpoint(OperatorServiceGetNexusEndpointOperationName), h.CreateNexusEndpoint(OperatorServiceCreateNexusEndpointOperationName), h.UpdateNexusEndpoint(OperatorServiceUpdateNexusEndpointOperationName), h.DeleteNexusEndpoint(OperatorServiceDeleteNexusEndpointOperationName), h.ListNexusEndpoints(OperatorServiceListNexusEndpointsOperationName))
	if err != nil {
		return nil, err
	}
	return svc, nil
}

type UnimplementedOperatorServiceNexusServiceHandler struct{}

func (h *UnimplementedOperatorServiceNexusServiceHandler) mustEmbedUnimplementedOperatorServiceNexusServiceHandler() {
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) AddSearchAttributes(name string) nexus.Operation[*v1.AddSearchAttributesRequest, *v1.AddSearchAttributesResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) RemoveSearchAttributes(name string) nexus.Operation[*v1.RemoveSearchAttributesRequest, *v1.RemoveSearchAttributesResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) ListSearchAttributes(name string) nexus.Operation[*v1.ListSearchAttributesRequest, *v1.ListSearchAttributesResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) DeleteNamespace(name string) nexus.Operation[*v1.DeleteNamespaceRequest, *v1.DeleteNamespaceResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) AddOrUpdateRemoteCluster(name string) nexus.Operation[*v1.AddOrUpdateRemoteClusterRequest, *v1.AddOrUpdateRemoteClusterResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) RemoveRemoteCluster(name string) nexus.Operation[*v1.RemoveRemoteClusterRequest, *v1.RemoveRemoteClusterResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) ListClusters(name string) nexus.Operation[*v1.ListClustersRequest, *v1.ListClustersResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) GetNexusEndpoint(name string) nexus.Operation[*v1.GetNexusEndpointRequest, *v1.GetNexusEndpointResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) CreateNexusEndpoint(name string) nexus.Operation[*v1.CreateNexusEndpointRequest, *v1.CreateNexusEndpointResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) UpdateNexusEndpoint(name string) nexus.Operation[*v1.UpdateNexusEndpointRequest, *v1.UpdateNexusEndpointResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) DeleteNexusEndpoint(name string) nexus.Operation[*v1.DeleteNexusEndpointRequest, *v1.DeleteNexusEndpointResponse] {
	panic("TODO")
}
func (h *UnimplementedOperatorServiceNexusServiceHandler) ListNexusEndpoints(name string) nexus.Operation[*v1.ListNexusEndpointsRequest, *v1.ListNexusEndpointsResponse] {
	panic("TODO")
}

type OperatorServiceNexusHTTPClient struct {
	client nexus.HTTPClient
}

// NewOperatorServiceNexusHTTPClient initializes a new OperatorServiceNexusHTTPClient.
// options.Service is overridden with the defined proto service name.
func NewOperatorServiceNexusHTTPClient(options nexus.HTTPClientOptions) (*OperatorServiceNexusHTTPClient, error) {
	options.Service = OperatorServiceServiceName
	if options.Serializer == nil {
		options.Serializer = nexusproto.Serializer(nexusproto.SerializerModePreferJSON)
	}
	client, err := nexus.NewHTTPClient(options)
	if err != nil {
		return nil, err
	}
	return &OperatorServiceNexusHTTPClient{
		client: *client,
	}, nil
}
func (c *OperatorServiceNexusHTTPClient) AddSearchAttributesAsync(ctx context.Context, input *v1.AddSearchAttributesRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.AddSearchAttributesResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceAddSearchAttributesOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) AddSearchAttributes(ctx context.Context, input *v1.AddSearchAttributesRequest, options nexus.ExecuteOperationOptions) (*v1.AddSearchAttributesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceAddSearchAttributesOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) RemoveSearchAttributesAsync(ctx context.Context, input *v1.RemoveSearchAttributesRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.RemoveSearchAttributesResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceRemoveSearchAttributesOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) RemoveSearchAttributes(ctx context.Context, input *v1.RemoveSearchAttributesRequest, options nexus.ExecuteOperationOptions) (*v1.RemoveSearchAttributesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceRemoveSearchAttributesOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) ListSearchAttributesAsync(ctx context.Context, input *v1.ListSearchAttributesRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.ListSearchAttributesResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceListSearchAttributesOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) ListSearchAttributes(ctx context.Context, input *v1.ListSearchAttributesRequest, options nexus.ExecuteOperationOptions) (*v1.ListSearchAttributesResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceListSearchAttributesOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) DeleteNamespaceAsync(ctx context.Context, input *v1.DeleteNamespaceRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.DeleteNamespaceResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceDeleteNamespaceOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) DeleteNamespace(ctx context.Context, input *v1.DeleteNamespaceRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteNamespaceResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceDeleteNamespaceOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) AddOrUpdateRemoteClusterAsync(ctx context.Context, input *v1.AddOrUpdateRemoteClusterRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.AddOrUpdateRemoteClusterResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceAddOrUpdateRemoteClusterOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) AddOrUpdateRemoteCluster(ctx context.Context, input *v1.AddOrUpdateRemoteClusterRequest, options nexus.ExecuteOperationOptions) (*v1.AddOrUpdateRemoteClusterResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceAddOrUpdateRemoteClusterOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) RemoveRemoteClusterAsync(ctx context.Context, input *v1.RemoveRemoteClusterRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.RemoveRemoteClusterResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceRemoveRemoteClusterOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) RemoveRemoteCluster(ctx context.Context, input *v1.RemoveRemoteClusterRequest, options nexus.ExecuteOperationOptions) (*v1.RemoveRemoteClusterResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceRemoveRemoteClusterOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) ListClustersAsync(ctx context.Context, input *v1.ListClustersRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.ListClustersResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceListClustersOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) ListClusters(ctx context.Context, input *v1.ListClustersRequest, options nexus.ExecuteOperationOptions) (*v1.ListClustersResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceListClustersOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) GetNexusEndpointAsync(ctx context.Context, input *v1.GetNexusEndpointRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.GetNexusEndpointResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceGetNexusEndpointOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) GetNexusEndpoint(ctx context.Context, input *v1.GetNexusEndpointRequest, options nexus.ExecuteOperationOptions) (*v1.GetNexusEndpointResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceGetNexusEndpointOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) CreateNexusEndpointAsync(ctx context.Context, input *v1.CreateNexusEndpointRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.CreateNexusEndpointResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceCreateNexusEndpointOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) CreateNexusEndpoint(ctx context.Context, input *v1.CreateNexusEndpointRequest, options nexus.ExecuteOperationOptions) (*v1.CreateNexusEndpointResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceCreateNexusEndpointOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) UpdateNexusEndpointAsync(ctx context.Context, input *v1.UpdateNexusEndpointRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.UpdateNexusEndpointResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceUpdateNexusEndpointOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) UpdateNexusEndpoint(ctx context.Context, input *v1.UpdateNexusEndpointRequest, options nexus.ExecuteOperationOptions) (*v1.UpdateNexusEndpointResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceUpdateNexusEndpointOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) DeleteNexusEndpointAsync(ctx context.Context, input *v1.DeleteNexusEndpointRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.DeleteNexusEndpointResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceDeleteNexusEndpointOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) DeleteNexusEndpoint(ctx context.Context, input *v1.DeleteNexusEndpointRequest, options nexus.ExecuteOperationOptions) (*v1.DeleteNexusEndpointResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceDeleteNexusEndpointOperation, input, options)
	return output, err
}
func (c *OperatorServiceNexusHTTPClient) ListNexusEndpointsAsync(ctx context.Context, input *v1.ListNexusEndpointsRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.ListNexusEndpointsResponse], error) {
	return nexus.StartOperation(ctx, &c.client, OperatorServiceListNexusEndpointsOperation, input, options)
}
func (c *OperatorServiceNexusHTTPClient) ListNexusEndpoints(ctx context.Context, input *v1.ListNexusEndpointsRequest, options nexus.ExecuteOperationOptions) (*v1.ListNexusEndpointsResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, OperatorServiceListNexusEndpointsOperation, input, options)
	return output, err
}
