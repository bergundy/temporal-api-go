// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/chasm/activity/v1/message.proto

package activity

import (
	reflect "reflect"
	"strconv"
	sync "sync"

	v1 "go.temporal.io/api/common/v1"
	v11 "go.temporal.io/api/failure/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivityState int32

const (
	ACTIVITY_STATE_UNSPECIFIED ActivityState = 0
	ACTIVITY_STATE_SCHEDULED   ActivityState = 1
	ACTIVITY_STATE_BACKING_OFF ActivityState = 2
	ACTIVITY_STATE_STARTED     ActivityState = 3
	ACTIVITY_STATE_SUCCEEDED   ActivityState = 4
	ACTIVITY_STATE_FAILED      ActivityState = 5
	ACTIVITY_STATE_CANCELED    ActivityState = 6
)

// Enum value maps for ActivityState.
var (
	ActivityState_name = map[int32]string{
		0: "ACTIVITY_STATE_UNSPECIFIED",
		1: "ACTIVITY_STATE_SCHEDULED",
		2: "ACTIVITY_STATE_BACKING_OFF",
		3: "ACTIVITY_STATE_STARTED",
		4: "ACTIVITY_STATE_SUCCEEDED",
		5: "ACTIVITY_STATE_FAILED",
		6: "ACTIVITY_STATE_CANCELED",
	}
	ActivityState_value = map[string]int32{
		"ACTIVITY_STATE_UNSPECIFIED": 0,
		"ACTIVITY_STATE_SCHEDULED":   1,
		"ACTIVITY_STATE_BACKING_OFF": 2,
		"ACTIVITY_STATE_STARTED":     3,
		"ACTIVITY_STATE_SUCCEEDED":   4,
		"ACTIVITY_STATE_FAILED":      5,
		"ACTIVITY_STATE_CANCELED":    6,
	}
)

func (x ActivityState) Enum() *ActivityState {
	p := new(ActivityState)
	*p = x
	return p
}

func (x ActivityState) String() string {
	switch x {
	case ACTIVITY_STATE_UNSPECIFIED:
		return "Unspecified"
	case ACTIVITY_STATE_SCHEDULED:
		return "Scheduled"
	case ACTIVITY_STATE_BACKING_OFF:
		return "BackingOff"
	case ACTIVITY_STATE_STARTED:
		return "Started"
	case ACTIVITY_STATE_SUCCEEDED:
		return "Succeeded"
	case ACTIVITY_STATE_FAILED:
		return "Failed"
	case ACTIVITY_STATE_CANCELED:
		return "Canceled"
	default:
		return strconv.Itoa(int(x))
	}

}

func (ActivityState) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_chasm_activity_v1_message_proto_enumTypes[0].Descriptor()
}

func (ActivityState) Type() protoreflect.EnumType {
	return &file_temporal_api_chasm_activity_v1_message_proto_enumTypes[0]
}

func (x ActivityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityState.Descriptor instead.
func (ActivityState) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_chasm_activity_v1_message_proto_rawDescGZIP(), []int{0}
}

// An enum that doesn't capture the intermediate states, it is too expensive to update visibility for every intermediate
// state.
// Used in the list result.
type ActivityCompletionState int32

const (
	ACTIVITY_COMPLETION_STATE_UNSPECIFIED ActivityCompletionState = 0
	ACTIVITY_COMPLETION_STATE_RUNNING     ActivityCompletionState = 1
	ACTIVITY_COMPLETION_STATE_SUCCEEDED   ActivityCompletionState = 2
	ACTIVITY_COMPLETION_STATE_FAILED      ActivityCompletionState = 3
	ACTIVITY_COMPLETION_STATE_CANCELED    ActivityCompletionState = 4
)

// Enum value maps for ActivityCompletionState.
var (
	ActivityCompletionState_name = map[int32]string{
		0: "ACTIVITY_COMPLETION_STATE_UNSPECIFIED",
		1: "ACTIVITY_COMPLETION_STATE_RUNNING",
		2: "ACTIVITY_COMPLETION_STATE_SUCCEEDED",
		3: "ACTIVITY_COMPLETION_STATE_FAILED",
		4: "ACTIVITY_COMPLETION_STATE_CANCELED",
	}
	ActivityCompletionState_value = map[string]int32{
		"ACTIVITY_COMPLETION_STATE_UNSPECIFIED": 0,
		"ACTIVITY_COMPLETION_STATE_RUNNING":     1,
		"ACTIVITY_COMPLETION_STATE_SUCCEEDED":   2,
		"ACTIVITY_COMPLETION_STATE_FAILED":      3,
		"ACTIVITY_COMPLETION_STATE_CANCELED":    4,
	}
)

func (x ActivityCompletionState) Enum() *ActivityCompletionState {
	p := new(ActivityCompletionState)
	*p = x
	return p
}

func (x ActivityCompletionState) String() string {
	switch x {
	case ACTIVITY_COMPLETION_STATE_UNSPECIFIED:
		return "Unspecified"
	case ACTIVITY_COMPLETION_STATE_RUNNING:
		return "Running"
	case ACTIVITY_COMPLETION_STATE_SUCCEEDED:
		return "Succeeded"
	case ACTIVITY_COMPLETION_STATE_FAILED:
		return "Failed"
	case ACTIVITY_COMPLETION_STATE_CANCELED:
		return "Canceled"
	default:
		return strconv.Itoa(int(x))
	}

}

func (ActivityCompletionState) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_chasm_activity_v1_message_proto_enumTypes[1].Descriptor()
}

func (ActivityCompletionState) Type() protoreflect.EnumType {
	return &file_temporal_api_chasm_activity_v1_message_proto_enumTypes[1]
}

func (x ActivityCompletionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityCompletionState.Descriptor instead.
func (ActivityCompletionState) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_chasm_activity_v1_message_proto_rawDescGZIP(), []int{1}
}

// Do we want to stutter here? This is already part of the activity package.
type ActivityOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                   string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TaskQueue              string               `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Header                 *v1.Header           `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	SearchAttributes       *v1.SearchAttributes `protobuf:"bytes,4,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	ScheduleToCloseTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	ScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	StartToCloseTimeout    *durationpb.Duration `protobuf:"bytes,7,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	HeartbeatTimeout       *durationpb.Duration `protobuf:"bytes,8,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	RetryPolicy            *v1.RetryPolicy      `protobuf:"bytes,9,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	CompletionCallbacks    []*v1.Callback       `protobuf:"bytes,10,rep,name=completion_callbacks,json=completionCallbacks,proto3" json:"completion_callbacks,omitempty"`
	Links                  []*v1.Link           `protobuf:"bytes,11,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *ActivityOptions) Reset() {
	*x = ActivityOptions{}
	mi := &file_temporal_api_chasm_activity_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOptions) ProtoMessage() {}

func (x *ActivityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_chasm_activity_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOptions.ProtoReflect.Descriptor instead.
func (*ActivityOptions) Descriptor() ([]byte, []int) {
	return file_temporal_api_chasm_activity_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *ActivityOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActivityOptions) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ActivityOptions) GetHeader() *v1.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ActivityOptions) GetSearchAttributes() *v1.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *ActivityOptions) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *ActivityOptions) GetScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *ActivityOptions) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *ActivityOptions) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *ActivityOptions) GetRetryPolicy() *v1.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ActivityOptions) GetCompletionCallbacks() []*v1.Callback {
	if x != nil {
		return x.CompletionCallbacks
	}
	return nil
}

func (x *ActivityOptions) GetLinks() []*v1.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

type ActivityListInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionState  ActivityCompletionState `protobuf:"varint,1,opt,name=completion_state,json=completionState,proto3,enum=temporal.api.chasm.activity.v1.ActivityCompletionState" json:"completion_state,omitempty"`
	Type             string                  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	TaskQueue        string                  `protobuf:"bytes,3,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	SearchAttributes *v1.SearchAttributes    `protobuf:"bytes,4,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	// Indicates if activity is paused.
	Paused bool `protobuf:"varint,5,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (x *ActivityListInfo) Reset() {
	*x = ActivityListInfo{}
	mi := &file_temporal_api_chasm_activity_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityListInfo) ProtoMessage() {}

func (x *ActivityListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_chasm_activity_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityListInfo.ProtoReflect.Descriptor instead.
func (*ActivityListInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_chasm_activity_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *ActivityListInfo) GetCompletionState() ActivityCompletionState {
	if x != nil {
		return x.CompletionState
	}
	return ACTIVITY_COMPLETION_STATE_UNSPECIFIED
}

func (x *ActivityListInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActivityListInfo) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ActivityListInfo) GetSearchAttributes() *v1.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *ActivityListInfo) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

type ActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             ActivityState          `protobuf:"varint,1,opt,name=state,proto3,enum=temporal.api.chasm.activity.v1.ActivityState" json:"state,omitempty"`
	Attempt           int32                  `protobuf:"varint,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
	HeartbeatDetails  *v1.Payloads           `protobuf:"bytes,3,opt,name=heartbeat_details,json=heartbeatDetails,proto3" json:"heartbeat_details,omitempty"`
	LastHeartbeatTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3" json:"last_heartbeat_time,omitempty"`
	LastStartedTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_started_time,json=lastStartedTime,proto3" json:"last_started_time,omitempty"`
	ScheduledTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	LastFailure       *v11.Failure           `protobuf:"bytes,7,opt,name=last_failure,json=lastFailure,proto3" json:"last_failure,omitempty"`
	// google.protobuf.Timestamp expiration_time = 8; // what's this?
	LastWorkerIdentity string `protobuf:"bytes,8,opt,name=last_worker_identity,json=lastWorkerIdentity,proto3" json:"last_worker_identity,omitempty"`
	// The time activity will wait until the next retry.
	// If activity is currently running it will be next retry interval if activity failed.
	// If activity is currently waiting it will be current retry interval.
	// If there will be no retry it will be null.
	CurrentRetryInterval *durationpb.Duration `protobuf:"bytes,9,opt,name=current_retry_interval,json=currentRetryInterval,proto3" json:"current_retry_interval,omitempty"`
	// The time when the last activity attempt was completed. If activity has not been completed yet then it will be null.
	LastAttemptCompleteTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_attempt_complete_time,json=lastAttemptCompleteTime,proto3" json:"last_attempt_complete_time,omitempty"`
	// Next time when activity will be scheduled.
	// If activity is currently scheduled or started it will be null.
	NextAttemptScheduleTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=next_attempt_schedule_time,json=nextAttemptScheduleTime,proto3" json:"next_attempt_schedule_time,omitempty"`
	// Indicates if activity is paused.
	Paused bool `protobuf:"varint,12,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (x *ActivityInfo) Reset() {
	*x = ActivityInfo{}
	mi := &file_temporal_api_chasm_activity_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityInfo) ProtoMessage() {}

func (x *ActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_chasm_activity_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityInfo.ProtoReflect.Descriptor instead.
func (*ActivityInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_chasm_activity_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *ActivityInfo) GetState() ActivityState {
	if x != nil {
		return x.State
	}
	return ACTIVITY_STATE_UNSPECIFIED
}

func (x *ActivityInfo) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *ActivityInfo) GetHeartbeatDetails() *v1.Payloads {
	if x != nil {
		return x.HeartbeatDetails
	}
	return nil
}

func (x *ActivityInfo) GetLastHeartbeatTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeatTime
	}
	return nil
}

func (x *ActivityInfo) GetLastStartedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStartedTime
	}
	return nil
}

func (x *ActivityInfo) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *ActivityInfo) GetLastFailure() *v11.Failure {
	if x != nil {
		return x.LastFailure
	}
	return nil
}

func (x *ActivityInfo) GetLastWorkerIdentity() string {
	if x != nil {
		return x.LastWorkerIdentity
	}
	return ""
}

func (x *ActivityInfo) GetCurrentRetryInterval() *durationpb.Duration {
	if x != nil {
		return x.CurrentRetryInterval
	}
	return nil
}

func (x *ActivityInfo) GetLastAttemptCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAttemptCompleteTime
	}
	return nil
}

func (x *ActivityInfo) GetNextAttemptScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NextAttemptScheduleTime
	}
	return nil
}

func (x *ActivityInfo) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

var File_temporal_api_chasm_activity_v1_message_proto protoreflect.FileDescriptor

var file_temporal_api_chasm_activity_v1_message_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x68,
	0x61, 0x73, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x6d, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x94, 0x06, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x21, 0x0a,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12,
	0x3a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x02, 0x68, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x02, 0x68, 0x00,
	0x12, 0x58, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x42, 0x02, 0x68, 0x00, 0x12, 0x58, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x02, 0x68, 0x00, 0x12, 0x52, 0x0a, 0x16,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x02, 0x68, 0x00, 0x12, 0x4a, 0x0a,
	0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x42, 0x02, 0x68, 0x00, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x02, 0x68, 0x00, 0x12,
	0x57, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x42, 0x02, 0x68, 0x00, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x02, 0x68, 0x00, 0x22, 0xac, 0x02, 0x0a, 0x10, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x66,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x6d, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x02,
	0x68, 0x00, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x02,
	0x68, 0x00, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x02, 0x68, 0x00, 0x22, 0xd5, 0x06,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x6d,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x02, 0x68, 0x00, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x42, 0x02, 0x68, 0x00,
	0x12, 0x51, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x10, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x02, 0x68, 0x00,
	0x12, 0x4e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x4a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x02, 0x68, 0x00,
	0x12, 0x34, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x02, 0x68, 0x00, 0x12, 0x53, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x42, 0x02, 0x68, 0x00, 0x12, 0x5b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12,
	0x5b, 0x0a, 0x1a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x6e, 0x65,
	0x78, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42,
	0x02, 0x68, 0x00, 0x2a, 0xdf, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xe2, 0x01, 0x0a,
	0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a,
	0x20, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x42, 0xac, 0x01, 0x0a, 0x21, 0x69, 0x6f, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x68, 0x61, 0x73,
	0x6d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67, 0x6f, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x68, 0x61, 0x73, 0x6d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31,
	0x3b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0xaa, 0x02, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x6d, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x31, 0xea, 0x02, 0x24, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x68, 0x61,
	0x73, 0x6d, 0x3a, 0x3a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_temporal_api_chasm_activity_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_chasm_activity_v1_message_proto_rawDescData = file_temporal_api_chasm_activity_v1_message_proto_rawDesc
)

func file_temporal_api_chasm_activity_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_chasm_activity_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_chasm_activity_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_temporal_api_chasm_activity_v1_message_proto_rawDescData)
	})
	return file_temporal_api_chasm_activity_v1_message_proto_rawDescData
}

var file_temporal_api_chasm_activity_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_temporal_api_chasm_activity_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_temporal_api_chasm_activity_v1_message_proto_goTypes = []any{
	(ActivityState)(0),            // 0: temporal.api.chasm.activity.v1.ActivityState
	(ActivityCompletionState)(0),  // 1: temporal.api.chasm.activity.v1.ActivityCompletionState
	(*ActivityOptions)(nil),       // 2: temporal.api.chasm.activity.v1.ActivityOptions
	(*ActivityListInfo)(nil),      // 3: temporal.api.chasm.activity.v1.ActivityListInfo
	(*ActivityInfo)(nil),          // 4: temporal.api.chasm.activity.v1.ActivityInfo
	(*v1.Header)(nil),             // 5: temporal.api.common.v1.Header
	(*v1.SearchAttributes)(nil),   // 6: temporal.api.common.v1.SearchAttributes
	(*durationpb.Duration)(nil),   // 7: google.protobuf.Duration
	(*v1.RetryPolicy)(nil),        // 8: temporal.api.common.v1.RetryPolicy
	(*v1.Callback)(nil),           // 9: temporal.api.common.v1.Callback
	(*v1.Link)(nil),               // 10: temporal.api.common.v1.Link
	(*v1.Payloads)(nil),           // 11: temporal.api.common.v1.Payloads
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*v11.Failure)(nil),           // 13: temporal.api.failure.v1.Failure
}
var file_temporal_api_chasm_activity_v1_message_proto_depIdxs = []int32{
	5,  // 0: temporal.api.chasm.activity.v1.ActivityOptions.header:type_name -> temporal.api.common.v1.Header
	6,  // 1: temporal.api.chasm.activity.v1.ActivityOptions.search_attributes:type_name -> temporal.api.common.v1.SearchAttributes
	7,  // 2: temporal.api.chasm.activity.v1.ActivityOptions.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	7,  // 3: temporal.api.chasm.activity.v1.ActivityOptions.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	7,  // 4: temporal.api.chasm.activity.v1.ActivityOptions.start_to_close_timeout:type_name -> google.protobuf.Duration
	7,  // 5: temporal.api.chasm.activity.v1.ActivityOptions.heartbeat_timeout:type_name -> google.protobuf.Duration
	8,  // 6: temporal.api.chasm.activity.v1.ActivityOptions.retry_policy:type_name -> temporal.api.common.v1.RetryPolicy
	9,  // 7: temporal.api.chasm.activity.v1.ActivityOptions.completion_callbacks:type_name -> temporal.api.common.v1.Callback
	10, // 8: temporal.api.chasm.activity.v1.ActivityOptions.links:type_name -> temporal.api.common.v1.Link
	1,  // 9: temporal.api.chasm.activity.v1.ActivityListInfo.completion_state:type_name -> temporal.api.chasm.activity.v1.ActivityCompletionState
	6,  // 10: temporal.api.chasm.activity.v1.ActivityListInfo.search_attributes:type_name -> temporal.api.common.v1.SearchAttributes
	0,  // 11: temporal.api.chasm.activity.v1.ActivityInfo.state:type_name -> temporal.api.chasm.activity.v1.ActivityState
	11, // 12: temporal.api.chasm.activity.v1.ActivityInfo.heartbeat_details:type_name -> temporal.api.common.v1.Payloads
	12, // 13: temporal.api.chasm.activity.v1.ActivityInfo.last_heartbeat_time:type_name -> google.protobuf.Timestamp
	12, // 14: temporal.api.chasm.activity.v1.ActivityInfo.last_started_time:type_name -> google.protobuf.Timestamp
	12, // 15: temporal.api.chasm.activity.v1.ActivityInfo.scheduled_time:type_name -> google.protobuf.Timestamp
	13, // 16: temporal.api.chasm.activity.v1.ActivityInfo.last_failure:type_name -> temporal.api.failure.v1.Failure
	7,  // 17: temporal.api.chasm.activity.v1.ActivityInfo.current_retry_interval:type_name -> google.protobuf.Duration
	12, // 18: temporal.api.chasm.activity.v1.ActivityInfo.last_attempt_complete_time:type_name -> google.protobuf.Timestamp
	12, // 19: temporal.api.chasm.activity.v1.ActivityInfo.next_attempt_schedule_time:type_name -> google.protobuf.Timestamp
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_temporal_api_chasm_activity_v1_message_proto_init() }
func file_temporal_api_chasm_activity_v1_message_proto_init() {
	if File_temporal_api_chasm_activity_v1_message_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_temporal_api_chasm_activity_v1_message_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_chasm_activity_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_chasm_activity_v1_message_proto_depIdxs,
		EnumInfos:         file_temporal_api_chasm_activity_v1_message_proto_enumTypes,
		MessageInfos:      file_temporal_api_chasm_activity_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_chasm_activity_v1_message_proto = out.File
	file_temporal_api_chasm_activity_v1_message_proto_rawDesc = nil
	file_temporal_api_chasm_activity_v1_message_proto_goTypes = nil
	file_temporal_api_chasm_activity_v1_message_proto_depIdxs = nil
}
