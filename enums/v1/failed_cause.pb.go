// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/enums/v1/failed_cause.proto

package enums

import (
	fmt "fmt"
	math "math"
	strconv "strconv"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Workflow tasks can fail for various reasons. Note that some of these reasons can only originate
// from the server, and some of them can only originate from the SDK/worker.
type WorkflowTaskFailedCause int32

const (
	WORKFLOW_TASK_FAILED_CAUSE_UNSPECIFIED WorkflowTaskFailedCause = 0
	// Between starting and completing the workflow task (with a workflow completion command), some
	// new command (like a signal) was processed into workflow history. The outstanding task will be
	// failed with this reason, and a worker must pick up a new task.
	WORKFLOW_TASK_FAILED_CAUSE_UNHANDLED_COMMAND                                         WorkflowTaskFailedCause = 1
	WORKFLOW_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES                          WorkflowTaskFailedCause = 2
	WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES                    WorkflowTaskFailedCause = 3
	WORKFLOW_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES                                WorkflowTaskFailedCause = 4
	WORKFLOW_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES                               WorkflowTaskFailedCause = 5
	WORKFLOW_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES                              WorkflowTaskFailedCause = 6
	WORKFLOW_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES                WorkflowTaskFailedCause = 7
	WORKFLOW_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES                    WorkflowTaskFailedCause = 8
	WORKFLOW_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES                  WorkflowTaskFailedCause = 9
	WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES WorkflowTaskFailedCause = 10
	WORKFLOW_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES                            WorkflowTaskFailedCause = 11
	WORKFLOW_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID                                  WorkflowTaskFailedCause = 12
	// The worker wishes to fail the task and have the next one be generated on a normal, not sticky
	// queue. Generally workers should prefer to use the explicit `ResetStickyTaskQueue` RPC call.
	WORKFLOW_TASK_FAILED_CAUSE_RESET_STICKY_TASK_QUEUE                  WorkflowTaskFailedCause = 13
	WORKFLOW_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE        WorkflowTaskFailedCause = 14
	WORKFLOW_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES WorkflowTaskFailedCause = 15
	WORKFLOW_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES     WorkflowTaskFailedCause = 16
	WORKFLOW_TASK_FAILED_CAUSE_FORCE_CLOSE_COMMAND                      WorkflowTaskFailedCause = 17
	WORKFLOW_TASK_FAILED_CAUSE_FAILOVER_CLOSE_COMMAND                   WorkflowTaskFailedCause = 18
	WORKFLOW_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE                    WorkflowTaskFailedCause = 19
	WORKFLOW_TASK_FAILED_CAUSE_RESET_WORKFLOW                           WorkflowTaskFailedCause = 20
	WORKFLOW_TASK_FAILED_CAUSE_BAD_BINARY                               WorkflowTaskFailedCause = 21
	WORKFLOW_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID           WorkflowTaskFailedCause = 22
	WORKFLOW_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES                    WorkflowTaskFailedCause = 23
	// The worker encountered a mismatch while replaying history between what was expected, and
	// what the workflow code actually did.
	WORKFLOW_TASK_FAILED_CAUSE_NON_DETERMINISTIC_ERROR                   WorkflowTaskFailedCause = 24
	WORKFLOW_TASK_FAILED_CAUSE_BAD_MODIFY_WORKFLOW_PROPERTIES_ATTRIBUTES WorkflowTaskFailedCause = 25
	// We send the below error codes to users when their requests would violate a size constraint
	// of their workflow. We do this to ensure that the state of their workflow does not become too
	// large because that can cause severe performance degradation. You can modify the thresholds for
	// each of these errors within your dynamic config.
	//
	// Spawning a new child workflow would cause this workflow to exceed its limit of pending child
	// workflows.
	WORKFLOW_TASK_FAILED_CAUSE_PENDING_CHILD_WORKFLOWS_LIMIT_EXCEEDED WorkflowTaskFailedCause = 26
	// Starting a new activity would cause this workflow to exceed its limit of pending activities
	// that we track.
	WORKFLOW_TASK_FAILED_CAUSE_PENDING_ACTIVITIES_LIMIT_EXCEEDED WorkflowTaskFailedCause = 27
	// A workflow has a buffer of signals that have not yet reached their destination. We return this
	// error when sending a new signal would exceed the capacity of this buffer.
	WORKFLOW_TASK_FAILED_CAUSE_PENDING_SIGNALS_LIMIT_EXCEEDED WorkflowTaskFailedCause = 28
	// Similarly, we have a buffer of pending requests to cancel other workflows. We return this error
	// when our capacity for pending cancel requests is already reached.
	WORKFLOW_TASK_FAILED_CAUSE_PENDING_REQUEST_CANCEL_LIMIT_EXCEEDED WorkflowTaskFailedCause = 29
	// Workflow execution update message (update.Acceptance, update.Rejection, or update.Response)
	// has wrong format, or missing required fields.
	WORKFLOW_TASK_FAILED_CAUSE_BAD_UPDATE_WORKFLOW_EXECUTION_MESSAGE WorkflowTaskFailedCause = 30
	// Similar to WORKFLOW_TASK_FAILED_CAUSE_UNHANDLED_COMMAND, but for updates.
	WORKFLOW_TASK_FAILED_CAUSE_UNHANDLED_UPDATE                             WorkflowTaskFailedCause = 31
	WORKFLOW_TASK_FAILED_CAUSE_BAD_SCHEDULE_NEXT_OPERATION_ATTRIBUTES       WorkflowTaskFailedCause = 32
	WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_NEXT_OPERATION_ATTRIBUTES WorkflowTaskFailedCause = 33
)

var WorkflowTaskFailedCause_name = map[int32]string{
	0:  "Unspecified",
	1:  "UnhandledCommand",
	2:  "BadScheduleActivityAttributes",
	3:  "BadRequestCancelActivityAttributes",
	4:  "BadStartTimerAttributes",
	5:  "BadCancelTimerAttributes",
	6:  "BadRecordMarkerAttributes",
	7:  "BadCompleteWorkflowExecutionAttributes",
	8:  "BadFailWorkflowExecutionAttributes",
	9:  "BadCancelWorkflowExecutionAttributes",
	10: "BadRequestCancelExternalWorkflowExecutionAttributes",
	11: "BadContinueAsNewAttributes",
	12: "StartTimerDuplicateId",
	13: "ResetStickyTaskQueue",
	14: "WorkflowWorkerUnhandledFailure",
	15: "BadSignalWorkflowExecutionAttributes",
	16: "BadStartChildExecutionAttributes",
	17: "ForceCloseCommand",
	18: "FailoverCloseCommand",
	19: "BadSignalInputSize",
	20: "ResetWorkflow",
	21: "BadBinary",
	22: "ScheduleActivityDuplicateId",
	23: "BadSearchAttributes",
	24: "NonDeterministicError",
	25: "BadModifyWorkflowPropertiesAttributes",
	26: "PendingChildWorkflowsLimitExceeded",
	27: "PendingActivitiesLimitExceeded",
	28: "PendingSignalsLimitExceeded",
	29: "PendingRequestCancelLimitExceeded",
	30: "BadUpdateWorkflowExecutionMessage",
	31: "UnhandledUpdate",
	32: "BadScheduleNextOperationAttributes",
	33: "BadRequestCancelNextOperationAttributes",
}

var WorkflowTaskFailedCause_value = map[string]int32{
	"Unspecified":                                         0,
	"UnhandledCommand":                                    1,
	"BadScheduleActivityAttributes":                       2,
	"BadRequestCancelActivityAttributes":                  3,
	"BadStartTimerAttributes":                             4,
	"BadCancelTimerAttributes":                            5,
	"BadRecordMarkerAttributes":                           6,
	"BadCompleteWorkflowExecutionAttributes":              7,
	"BadFailWorkflowExecutionAttributes":                  8,
	"BadCancelWorkflowExecutionAttributes":                9,
	"BadRequestCancelExternalWorkflowExecutionAttributes": 10,
	"BadContinueAsNewAttributes":                          11,
	"StartTimerDuplicateId":                               12,
	"ResetStickyTaskQueue":                                13,
	"WorkflowWorkerUnhandledFailure":                      14,
	"BadSignalWorkflowExecutionAttributes":                15,
	"BadStartChildExecutionAttributes":                    16,
	"ForceCloseCommand":                                   17,
	"FailoverCloseCommand":                                18,
	"BadSignalInputSize":                                  19,
	"ResetWorkflow":                                       20,
	"BadBinary":                                           21,
	"ScheduleActivityDuplicateId":                         22,
	"BadSearchAttributes":                                 23,
	"NonDeterministicError":                               24,
	"BadModifyWorkflowPropertiesAttributes":               25,
	"PendingChildWorkflowsLimitExceeded":                  26,
	"PendingActivitiesLimitExceeded":                      27,
	"PendingSignalsLimitExceeded":                         28,
	"PendingRequestCancelLimitExceeded":                   29,
	"BadUpdateWorkflowExecutionMessage":                   30,
	"UnhandledUpdate":                                     31,
	"BadScheduleNextOperationAttributes":                  32,
	"BadRequestCancelNextOperationAttributes":             33,
}

func (WorkflowTaskFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b293cf8d1d965f2d, []int{0}
}

type StartChildWorkflowExecutionFailedCause int32

const (
	START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED             StartChildWorkflowExecutionFailedCause = 0
	START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS StartChildWorkflowExecutionFailedCause = 1
	START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND     StartChildWorkflowExecutionFailedCause = 2
)

var StartChildWorkflowExecutionFailedCause_name = map[int32]string{
	0: "Unspecified",
	1: "WorkflowAlreadyExists",
	2: "NamespaceNotFound",
}

var StartChildWorkflowExecutionFailedCause_value = map[string]int32{
	"Unspecified":           0,
	"WorkflowAlreadyExists": 1,
	"NamespaceNotFound":     2,
}

func (StartChildWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b293cf8d1d965f2d, []int{1}
}

type CancelExternalWorkflowExecutionFailedCause int32

const (
	CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED                           CancelExternalWorkflowExecutionFailedCause = 0
	CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND CancelExternalWorkflowExecutionFailedCause = 1
	CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND                   CancelExternalWorkflowExecutionFailedCause = 2
)

var CancelExternalWorkflowExecutionFailedCause_name = map[int32]string{
	0: "Unspecified",
	1: "ExternalWorkflowExecutionNotFound",
	2: "NamespaceNotFound",
}

var CancelExternalWorkflowExecutionFailedCause_value = map[string]int32{
	"Unspecified":                       0,
	"ExternalWorkflowExecutionNotFound": 1,
	"NamespaceNotFound":                 2,
}

func (CancelExternalWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b293cf8d1d965f2d, []int{2}
}

type SignalExternalWorkflowExecutionFailedCause int32

const (
	SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED                           SignalExternalWorkflowExecutionFailedCause = 0
	SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND SignalExternalWorkflowExecutionFailedCause = 1
	SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND                   SignalExternalWorkflowExecutionFailedCause = 2
	// Signal count limit is per workflow and controlled by server dynamic config "history.maximumSignalsPerExecution"
	SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_SIGNAL_COUNT_LIMIT_EXCEEDED SignalExternalWorkflowExecutionFailedCause = 3
)

var SignalExternalWorkflowExecutionFailedCause_name = map[int32]string{
	0: "Unspecified",
	1: "ExternalWorkflowExecutionNotFound",
	2: "NamespaceNotFound",
	3: "SignalCountLimitExceeded",
}

var SignalExternalWorkflowExecutionFailedCause_value = map[string]int32{
	"Unspecified":                       0,
	"ExternalWorkflowExecutionNotFound": 1,
	"NamespaceNotFound":                 2,
	"SignalCountLimitExceeded":          3,
}

func (SignalExternalWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b293cf8d1d965f2d, []int{3}
}

type ResourceExhaustedCause int32

const (
	RESOURCE_EXHAUSTED_CAUSE_UNSPECIFIED ResourceExhaustedCause = 0
	// Caller exceeds request per second limit.
	RESOURCE_EXHAUSTED_CAUSE_RPS_LIMIT ResourceExhaustedCause = 1
	// Caller exceeds max concurrent request limit.
	RESOURCE_EXHAUSTED_CAUSE_CONCURRENT_LIMIT ResourceExhaustedCause = 2
	// System overloaded.
	RESOURCE_EXHAUSTED_CAUSE_SYSTEM_OVERLOADED ResourceExhaustedCause = 3
	// Namespace exceeds persistence rate limit.
	RESOURCE_EXHAUSTED_CAUSE_PERSISTENCE_LIMIT ResourceExhaustedCause = 4
	// Workflow is busy
	RESOURCE_EXHAUSTED_CAUSE_BUSY_WORKFLOW ResourceExhaustedCause = 5
	// Caller exceeds action per second limit.
	RESOURCE_EXHAUSTED_CAUSE_APS_LIMIT ResourceExhaustedCause = 6
)

var ResourceExhaustedCause_name = map[int32]string{
	0: "Unspecified",
	1: "RpsLimit",
	2: "ConcurrentLimit",
	3: "SystemOverloaded",
	4: "PersistenceLimit",
	5: "BusyWorkflow",
	6: "ApsLimit",
}

var ResourceExhaustedCause_value = map[string]int32{
	"Unspecified":      0,
	"RpsLimit":         1,
	"ConcurrentLimit":  2,
	"SystemOverloaded": 3,
	"PersistenceLimit": 4,
	"BusyWorkflow":     5,
	"ApsLimit":         6,
}

func (ResourceExhaustedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b293cf8d1d965f2d, []int{4}
}

func init() {
	proto.RegisterEnum("temporal.api.enums.v1.WorkflowTaskFailedCause", WorkflowTaskFailedCause_name, WorkflowTaskFailedCause_value)
	proto.RegisterEnum("temporal.api.enums.v1.StartChildWorkflowExecutionFailedCause", StartChildWorkflowExecutionFailedCause_name, StartChildWorkflowExecutionFailedCause_value)
	proto.RegisterEnum("temporal.api.enums.v1.CancelExternalWorkflowExecutionFailedCause", CancelExternalWorkflowExecutionFailedCause_name, CancelExternalWorkflowExecutionFailedCause_value)
	proto.RegisterEnum("temporal.api.enums.v1.SignalExternalWorkflowExecutionFailedCause", SignalExternalWorkflowExecutionFailedCause_name, SignalExternalWorkflowExecutionFailedCause_value)
	proto.RegisterEnum("temporal.api.enums.v1.ResourceExhaustedCause", ResourceExhaustedCause_name, ResourceExhaustedCause_value)
}

func init() {
	proto.RegisterFile("temporal/api/enums/v1/failed_cause.proto", fileDescriptor_b293cf8d1d965f2d)
}

var fileDescriptor_b293cf8d1d965f2d = []byte{
	// 1074 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdf, 0x72, 0x1b, 0xb5,
	0x17, 0xf6, 0xba, 0x7f, 0x7e, 0x3f, 0xc4, 0xbf, 0x45, 0xd0, 0xa6, 0x14, 0x58, 0x28, 0x03, 0x99,
	0xd6, 0x80, 0xd3, 0xb4, 0xb4, 0x99, 0x3a, 0x30, 0xa9, 0xac, 0x3d, 0xb6, 0x35, 0x5e, 0x6b, 0xb7,
	0x92, 0x36, 0xb1, 0x7b, 0xa3, 0x31, 0xa9, 0xdb, 0xee, 0xd4, 0x8d, 0x3d, 0x8e, 0x53, 0x72, 0xc9,
	0x23, 0xc0, 0x5b, 0x30, 0x3c, 0x03, 0x0f, 0xc0, 0x0d, 0x33, 0xb9, 0xec, 0x25, 0x71, 0x6e, 0x18,
	0xae, 0x3a, 0xd3, 0x17, 0x60, 0xd6, 0xb1, 0x9d, 0x8d, 0x63, 0xef, 0xae, 0xb9, 0x5b, 0x5b, 0xdf,
	0xf7, 0x49, 0xe7, 0xd3, 0xd1, 0x39, 0x12, 0xba, 0xde, 0x6f, 0x3d, 0xef, 0x76, 0x7a, 0xcd, 0xf6,
	0x4a, 0xb3, 0x1b, 0xac, 0xb4, 0x76, 0xf6, 0x9e, 0xef, 0xae, 0xbc, 0x58, 0x5d, 0x79, 0xdc, 0x0c,
	0xda, 0xad, 0x47, 0x7a, 0xbb, 0xb9, 0xb7, 0xdb, 0xca, 0x77, 0x7b, 0x9d, 0x7e, 0x07, 0x5f, 0x1a,
	0x23, 0xf3, 0xcd, 0x6e, 0x90, 0x1f, 0x22, 0xf3, 0x2f, 0x56, 0x73, 0xaf, 0x4d, 0xb4, 0xb4, 0xd5,
	0xe9, 0x3d, 0x7b, 0xdc, 0xee, 0xfc, 0xa8, 0x9a, 0xbb, 0xcf, 0x4a, 0x43, 0x26, 0x0d, 0x89, 0x38,
	0x87, 0x96, 0xb7, 0x5c, 0x51, 0x2d, 0x39, 0xee, 0x96, 0x56, 0x44, 0x56, 0x75, 0x89, 0x30, 0x07,
	0x6c, 0x4d, 0x89, 0x2f, 0x41, 0xfb, 0x5c, 0x7a, 0x40, 0x59, 0x89, 0x81, 0x6d, 0x66, 0xf0, 0x4d,
	0xf4, 0x75, 0x2c, 0xb6, 0x42, 0xb8, 0x3d, 0xfc, 0xed, 0xd6, 0x6a, 0x84, 0xdb, 0xa6, 0x81, 0x37,
	0xd0, 0x7a, 0x0c, 0xa3, 0x48, 0x6c, 0x2d, 0x69, 0x05, 0x6c, 0xdf, 0x01, 0x4d, 0xa8, 0x62, 0x9b,
	0x4c, 0x35, 0x34, 0x51, 0x4a, 0xb0, 0xa2, 0xaf, 0x40, 0x9a, 0x59, 0x0c, 0x88, 0x24, 0x08, 0x08,
	0x78, 0xe0, 0x83, 0x54, 0x9a, 0x12, 0x4e, 0xc1, 0x99, 0x29, 0x73, 0x0e, 0xdf, 0x43, 0x77, 0x92,
	0xd6, 0xa1, 0x88, 0x50, 0x5a, 0xb1, 0x1a, 0x88, 0x28, 0xf5, 0x3c, 0x2e, 0xa0, 0xbb, 0x09, 0xd4,
	0xd1, 0xcc, 0x67, 0xb8, 0x17, 0xf0, 0x3a, 0x5a, 0x4b, 0x5c, 0x3d, 0x75, 0x85, 0xad, 0x6b, 0x44,
	0x54, 0x4f, 0x93, 0x2f, 0x62, 0x86, 0x20, 0x69, 0x62, 0xb7, 0xe6, 0x39, 0xa0, 0x40, 0x4f, 0x70,
	0x50, 0x07, 0xea, 0x2b, 0xe6, 0xf2, 0xa8, 0xd4, 0xff, 0x52, 0xb8, 0x18, 0xfe, 0x91, 0x20, 0xf3,
	0x7f, 0x5c, 0x46, 0x34, 0x9d, 0x15, 0xf1, 0x42, 0x6f, 0xe0, 0x3a, 0x52, 0x8b, 0xed, 0x2a, 0xd4,
	0x15, 0x08, 0x4e, 0x92, 0x94, 0x11, 0xfe, 0x1e, 0xdd, 0x4b, 0x34, 0x8d, 0x2b, 0xc6, 0x7d, 0xd0,
	0x44, 0x6a, 0x0e, 0x5b, 0x51, 0xfa, 0x9b, 0x78, 0x0d, 0xdd, 0x8e, 0xa1, 0x47, 0x73, 0xc4, 0xf6,
	0x3d, 0x87, 0x51, 0xa2, 0x40, 0x33, 0xdb, 0x7c, 0x0b, 0xdf, 0x45, 0xb7, 0x62, 0x88, 0x02, 0x24,
	0x28, 0x2d, 0x15, 0xa3, 0xd5, 0xc6, 0xf1, 0xf0, 0x03, 0x1f, 0x7c, 0x30, 0xdf, 0xc6, 0xf7, 0xd1,
	0x77, 0x31, 0xbc, 0xc9, 0x50, 0xf8, 0x01, 0x22, 0x72, 0xc4, 0x42, 0x98, 0x2f, 0xc0, 0x7c, 0x27,
	0xc5, 0xa6, 0x48, 0x56, 0x4e, 0xb6, 0xee, 0x5d, 0x4c, 0xd1, 0x46, 0xaa, 0x33, 0x42, 0x2b, 0xcc,
	0xb1, 0x67, 0x8b, 0x98, 0xf8, 0x16, 0xca, 0xc7, 0x88, 0x94, 0x5c, 0x41, 0x41, 0x53, 0xc7, 0x95,
	0x30, 0x29, 0x12, 0xef, 0xe1, 0x3b, 0x68, 0x35, 0x8e, 0x43, 0x98, 0xe3, 0x6e, 0x82, 0x98, 0xa2,
	0x61, 0xfc, 0x2d, 0xba, 0x99, 0x2e, 0x70, 0xc6, 0x3d, 0x5f, 0x69, 0xc9, 0x1e, 0x82, 0xf9, 0x3e,
	0xfe, 0x06, 0xdd, 0x48, 0xdc, 0xa8, 0x31, 0xc0, 0xfc, 0x00, 0xdf, 0x40, 0x5f, 0x26, 0x4c, 0x52,
	0x64, 0x9c, 0x88, 0x86, 0x79, 0x29, 0x21, 0xf5, 0xce, 0xd6, 0xb9, 0x53, 0x19, 0x74, 0x39, 0x4d,
	0x38, 0x40, 0x04, 0xad, 0x44, 0xfd, 0x5e, 0x4a, 0xc8, 0x3b, 0xee, 0x72, 0x6d, 0x83, 0x02, 0x51,
	0x63, 0x9c, 0x85, 0xe9, 0xa7, 0x41, 0x08, 0x57, 0x98, 0x57, 0x70, 0x05, 0xd9, 0x09, 0xb3, 0xd5,
	0x5c, 0x9b, 0x95, 0x1a, 0x27, 0x59, 0xe3, 0x09, 0xd7, 0x03, 0xa1, 0x18, 0xc8, 0xe8, 0x0a, 0x3e,
	0x4c, 0xa8, 0x2d, 0x1e, 0x70, 0x9b, 0xf1, 0xf2, 0x28, 0x69, 0xc6, 0x40, 0xa9, 0x1d, 0x56, 0x63,
	0x4a, 0x43, 0x9d, 0x02, 0xd8, 0x60, 0x9b, 0x57, 0x13, 0x0e, 0xc2, 0x58, 0x66, 0x64, 0x5e, 0xb8,
	0x88, 0x29, 0x85, 0x8f, 0x12, 0xfc, 0x1f, 0x2b, 0x1c, 0xe7, 0xc4, 0x19, 0xfa, 0xc7, 0xd8, 0x46,
	0xf7, 0x53, 0xd0, 0xa7, 0xea, 0xd2, 0x94, 0xca, 0x27, 0x09, 0x2a, 0xa1, 0xaf, 0xbe, 0x67, 0x93,
	0xd9, 0x25, 0xbb, 0x06, 0x52, 0x92, 0x32, 0x98, 0x16, 0x5e, 0x41, 0x5f, 0xa5, 0x6a, 0xb4, 0xc7,
	0x5a, 0xe6, 0xa7, 0x29, 0x0a, 0xfc, 0x24, 0xff, 0x38, 0xd4, 0x95, 0x0e, 0xb7, 0x92, 0x4c, 0x9f,
	0xde, 0xcf, 0x70, 0x15, 0x95, 0x17, 0xab, 0xcb, 0xf3, 0xc5, 0xae, 0xe5, 0x5e, 0x1b, 0x68, 0x59,
	0xf6, 0x9b, 0xbd, 0x3e, 0x7d, 0x1a, 0xb4, 0x1f, 0x8d, 0xef, 0x1f, 0xb0, 0xdf, 0xda, 0xde, 0xeb,
	0x07, 0x9d, 0x9d, 0xe8, 0x25, 0x64, 0x1d, 0xad, 0x45, 0x6b, 0xcb, 0x0c, 0x6f, 0x62, 0x6e, 0x25,
	0x65, 0x44, 0x17, 0x21, 0x4f, 0xc6, 0x89, 0x23, 0x80, 0xd8, 0x0d, 0x0d, 0x75, 0x26, 0x95, 0x34,
	0x8d, 0xb0, 0x00, 0x2e, 0x22, 0xc4, 0x49, 0x0d, 0xa4, 0x47, 0x68, 0x78, 0xcc, 0x94, 0x2e, 0xb9,
	0x3e, 0xb7, 0xcd, 0x6c, 0xee, 0x97, 0x2c, 0xca, 0xd1, 0xe6, 0xce, 0x76, 0xab, 0x0d, 0xfb, 0xfd,
	0x56, 0x6f, 0xa7, 0xd9, 0x8e, 0x8d, 0x7c, 0x03, 0xad, 0xa7, 0x68, 0x71, 0x31, 0xd1, 0x37, 0x90,
	0xbf, 0xa8, 0x40, 0x1c, 0xf0, 0x24, 0x14, 0x23, 0x34, 0x76, 0x51, 0xe9, 0xd9, 0x9e, 0x0c, 0xb2,
	0x28, 0x27, 0x83, 0x27, 0x3b, 0xcd, 0xd4, 0x9e, 0x8c, 0x2a, 0xf7, 0x7f, 0xf7, 0x64, 0x51, 0x81,
	0x05, 0x3c, 0x59, 0x54, 0x7a, 0xa6, 0x27, 0xd8, 0x45, 0xd5, 0x45, 0x85, 0x46, 0x78, 0xea, 0xfa,
	0x5c, 0x4d, 0x57, 0x9e, 0x73, 0xb9, 0x3f, 0xb3, 0xe8, 0xb2, 0x68, 0xed, 0x76, 0xf6, 0x7a, 0xdb,
	0x2d, 0xd8, 0x7f, 0xda, 0xdc, 0xdb, 0xed, 0x8f, 0x0d, 0xbd, 0x8e, 0xbe, 0x10, 0x20, 0x5d, 0x3f,
	0x6c, 0xbe, 0x50, 0xaf, 0x10, 0x5f, 0xaa, 0x39, 0xce, 0x2d, 0xa3, 0xcf, 0xe7, 0x22, 0x85, 0x37,
	0xaa, 0x9a, 0xa6, 0x11, 0x76, 0xd1, 0xb9, 0x38, 0xea, 0x72, 0xea, 0x0b, 0x01, 0xe3, 0x45, 0x9a,
	0x59, 0x9c, 0x47, 0xb9, 0xb9, 0x70, 0xd9, 0x90, 0x0a, 0x6a, 0x3a, 0x6c, 0xf1, 0x8e, 0x4b, 0x86,
	0xb1, 0xc4, 0xe2, 0x3d, 0x10, 0x92, 0x49, 0x05, 0x9c, 0xc2, 0x48, 0xff, 0x7c, 0xf8, 0x88, 0x99,
	0x8b, 0x2f, 0xfa, 0xf2, 0xa4, 0x8b, 0x99, 0x17, 0x62, 0x43, 0x24, 0x93, 0x10, 0x2f, 0x16, 0x7f,
	0x37, 0x0e, 0x0e, 0xad, 0xcc, 0xcb, 0x43, 0x2b, 0xf3, 0xea, 0xd0, 0x32, 0x7e, 0x1a, 0x58, 0xc6,
	0xaf, 0x03, 0xcb, 0xf8, 0x63, 0x60, 0x19, 0x07, 0x03, 0xcb, 0xf8, 0x6b, 0x60, 0x19, 0x7f, 0x0f,
	0xac, 0xcc, 0xab, 0x81, 0x65, 0xfc, 0x7c, 0x64, 0x65, 0x0e, 0x8e, 0xac, 0xcc, 0xcb, 0x23, 0x2b,
	0x83, 0xae, 0x04, 0x9d, 0xfc, 0xcc, 0x57, 0x58, 0xd1, 0x8c, 0xe4, 0xb8, 0x17, 0x3e, 0xd7, 0x3c,
	0xe3, 0xe1, 0xb5, 0x27, 0x11, 0x74, 0xd0, 0x39, 0xf5, 0xc0, 0x5b, 0x1f, 0x7e, 0xfc, 0x96, 0x5d,
	0x52, 0x23, 0x40, 0xd0, 0xc9, 0x93, 0x6e, 0x90, 0x87, 0xa1, 0xe0, 0xe6, 0xea, 0x3f, 0xd9, 0xab,
	0x27, 0x23, 0x85, 0x02, 0xe9, 0x06, 0x85, 0xc2, 0x70, 0xac, 0x50, 0xd8, 0x5c, 0xfd, 0xe1, 0xe2,
	0xf0, 0x45, 0x78, 0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xd8, 0x8b, 0xda, 0x3d, 0x0e,
	0x00, 0x00,
}

func (x WorkflowTaskFailedCause) String() string {
	s, ok := WorkflowTaskFailedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StartChildWorkflowExecutionFailedCause) String() string {
	s, ok := StartChildWorkflowExecutionFailedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CancelExternalWorkflowExecutionFailedCause) String() string {
	s, ok := CancelExternalWorkflowExecutionFailedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SignalExternalWorkflowExecutionFailedCause) String() string {
	s, ok := SignalExternalWorkflowExecutionFailedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ResourceExhaustedCause) String() string {
	s, ok := ResourceExhaustedCause_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
