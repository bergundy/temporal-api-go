// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-nexus. DO NOT EDIT.
// plugins:
//
//	protoc-gen-go-nexus
//	go go1.23.4
//	protoc
//
// source: temporal/api/chasm/activityservice/v1/service.proto
package activityservicenexus

import (
	"context"

	nexusproto "github.com/nexus-rpc/sdk-go/contrib/nexusproto"
	nexus "github.com/nexus-rpc/sdk-go/nexus"
	v1 "go.temporal.io/api/chasm/activityservice/v1"
)

// ActivityServiceServiceName defines the fully-qualified name for the temporal.api.chasm.activityservice.v1.ActivityService service.
const ActivityServiceServiceName = "temporal.api.chasm.activityservice.v1.ActivityService"

// ActivityServiceStartActivityOperationName defines the fully-qualified name for the StartActivity operation.
const ActivityServiceStartActivityOperationName = "StartActivity"

var ActivityServiceStartActivityOperation = nexus.NewOperationReference[*v1.StartActivityRequest, *v1.StartActivityResponse](ActivityServiceStartActivityOperationName)

type ActivityServiceNexusServiceHandler interface {
	mustEmbedUnimplementedActivityServiceNexusServiceHandler()
	StartActivity(name string) nexus.Operation[*v1.StartActivityRequest, *v1.StartActivityResponse]
}

func NewActivityServiceNexusService(h ActivityServiceNexusServiceHandler) (*nexus.Service, error) {
	svc := nexus.NewService(ActivityServiceServiceName)
	err := svc.Register(h.StartActivity(ActivityServiceStartActivityOperationName))
	if err != nil {
		return nil, err
	}
	return svc, nil
}

type UnimplementedActivityServiceNexusServiceHandler struct{}

func (h *UnimplementedActivityServiceNexusServiceHandler) mustEmbedUnimplementedActivityServiceNexusServiceHandler() {
}
func (h *UnimplementedActivityServiceNexusServiceHandler) StartActivity(name string) nexus.Operation[*v1.StartActivityRequest, *v1.StartActivityResponse] {
	panic("TODO")
}

type ActivityServiceNexusHTTPClient struct {
	client nexus.HTTPClient
}

// NewActivityServiceNexusHTTPClient initializes a new ActivityServiceNexusHTTPClient.
// options.Service is overridden with the defined proto service name.
func NewActivityServiceNexusHTTPClient(options nexus.HTTPClientOptions) (*ActivityServiceNexusHTTPClient, error) {
	options.Service = ActivityServiceServiceName
	if options.Serializer == nil {
		options.Serializer = nexusproto.Serializer(nexusproto.SerializerModePreferJSON)
	}
	client, err := nexus.NewHTTPClient(options)
	if err != nil {
		return nil, err
	}
	return &ActivityServiceNexusHTTPClient{
		client: *client,
	}, nil
}
func (c *ActivityServiceNexusHTTPClient) StartActivityAsync(ctx context.Context, input *v1.StartActivityRequest, options nexus.StartOperationOptions) (*nexus.ClientStartOperationResult[*v1.StartActivityResponse], error) {
	return nexus.StartOperation(ctx, &c.client, ActivityServiceStartActivityOperation, input, options)
}
func (c *ActivityServiceNexusHTTPClient) StartActivity(ctx context.Context, input *v1.StartActivityRequest, options nexus.ExecuteOperationOptions) (*v1.StartActivityResponse, error) {
	output, err := nexus.ExecuteOperation(ctx, &c.client, ActivityServiceStartActivityOperation, input, options)
	return output, err
}
