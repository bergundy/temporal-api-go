// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package activity

import (
	"fmt"

	"google.golang.org/protobuf/proto"
)

// Marshal an object of type ActivityOptions to the protobuf v3 wire format
func (val *ActivityOptions) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityOptions from the protobuf v3 wire format
func (val *ActivityOptions) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityOptions) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityOptions values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityOptions
	switch t := that.(type) {
	case *ActivityOptions:
		that1 = t
	case ActivityOptions:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ActivityListInfo to the protobuf v3 wire format
func (val *ActivityListInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityListInfo from the protobuf v3 wire format
func (val *ActivityListInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityListInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityListInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityListInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityListInfo
	switch t := that.(type) {
	case *ActivityListInfo:
		that1 = t
	case ActivityListInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ActivityInfo to the protobuf v3 wire format
func (val *ActivityInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityInfo from the protobuf v3 wire format
func (val *ActivityInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityInfo
	switch t := that.(type) {
	case *ActivityInfo:
		that1 = t
	case ActivityInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

var (
	ActivityState_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Scheduled":   1,
		"BackingOff":  2,
		"Started":     3,
		"Succeeded":   4,
		"Failed":      5,
		"Canceled":    6,
	}
)

// ActivityStateFromString parses a ActivityState value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to ActivityState
func ActivityStateFromString(s string) (ActivityState, error) {
	if v, ok := ActivityState_value[s]; ok {
		return ActivityState(v), nil
	} else if v, ok := ActivityState_shorthandValue[s]; ok {
		return ActivityState(v), nil
	}
	return ActivityState(0), fmt.Errorf("%s is not a valid ActivityState", s)
}

var (
	ActivityCompletionState_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Running":     1,
		"Succeeded":   2,
		"Failed":      3,
		"Canceled":    4,
	}
)

// ActivityCompletionStateFromString parses a ActivityCompletionState value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to ActivityCompletionState
func ActivityCompletionStateFromString(s string) (ActivityCompletionState, error) {
	if v, ok := ActivityCompletionState_value[s]; ok {
		return ActivityCompletionState(v), nil
	} else if v, ok := ActivityCompletionState_shorthandValue[s]; ok {
		return ActivityCompletionState(v), nil
	}
	return ActivityCompletionState(0), fmt.Errorf("%s is not a valid ActivityCompletionState", s)
}
